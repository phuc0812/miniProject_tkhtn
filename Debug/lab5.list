
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b600  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b84  0800b7b0  0800b7b0  0000c7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d334  0800d334  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d334  0800d334  0000e334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d33c  0800d33c  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d33c  0800d33c  0000e33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d340  0800d340  0000e340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d344  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1d8  2**0
                  CONTENTS
 10 .bss          00002028  200001d8  200001d8  0000f1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00002400  20002200  20002200  0000f1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001921d  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004706  00000000  00000000  00028425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f0  00000000  00000000  0002cb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001137  00000000  00000000  0002e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028c1c  00000000  00000000  0002f357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d668  00000000  00000000  00057f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2b07  00000000  00000000  000755db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001580e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062f0  00000000  00000000  00158128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0015e418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b798 	.word	0x0800b798

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	0800b798 	.word	0x0800b798

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f002 f944 	bl	8002810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f900 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f968 	bl	8000860 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000590:	f009 ff46 	bl	800a420 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 8000594:	f001 f912 	bl	80017bc <BSP_LCD_Init>
  BSP_SDRAM_Init();
 8000598:	f001 ff70 	bl	800247c <BSP_SDRAM_Init>
  BSP_GYRO_Init();
 800059c:	f001 f894 	bl	80016c8 <BSP_GYRO_Init>

  //set the layer buffer address into SDRAM
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 80005a0:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 80005a4:	2001      	movs	r0, #1
 80005a6:	f001 f98b 	bl	80018c0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 80005aa:	2001      	movs	r0, #1
 80005ac:	f001 f9ec 	bl	8001988 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 80005b0:	f001 fd66 	bl	8002080 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_WHITE);//clear the LCD on blue color
 80005b4:	f04f 30ff 	mov.w	r0, #4294967295
 80005b8:	f001 fa58 	bl	8001a6c <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);//set text background color
 80005bc:	f04f 30ff 	mov.w	r0, #4294967295
 80005c0:	f001 fa0a 	bl	80019d8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);//set text color
 80005c4:	4861      	ldr	r0, [pc, #388]	@ (800074c <main+0x1cc>)
 80005c6:	f001 f9ef 	bl	80019a8 <BSP_LCD_SetTextColor>

  BSP_LCD_FillCircle(120, 160, ball_r);
 80005ca:	4b61      	ldr	r3, [pc, #388]	@ (8000750 <main+0x1d0>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	461a      	mov	r2, r3
 80005d2:	21a0      	movs	r1, #160	@ 0xa0
 80005d4:	2078      	movs	r0, #120	@ 0x78
 80005d6:	f001 fcb3 	bl	8001f40 <BSP_LCD_FillCircle>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  sprintf(buffer_lcd, "Score: %d", score);
 80005da:	4b5e      	ldr	r3, [pc, #376]	@ (8000754 <main+0x1d4>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	495d      	ldr	r1, [pc, #372]	@ (8000758 <main+0x1d8>)
 80005e2:	485e      	ldr	r0, [pc, #376]	@ (800075c <main+0x1dc>)
 80005e4:	f00a fc38 	bl	800ae58 <siprintf>
	  BSP_LCD_DisplayStringAtLine(1, buffer_lcd);
 80005e8:	495c      	ldr	r1, [pc, #368]	@ (800075c <main+0x1dc>)
 80005ea:	2001      	movs	r0, #1
 80005ec:	f001 fb68 	bl	8001cc0 <BSP_LCD_DisplayStringAtLine>

	  BSP_GYRO_GetXYZ(data);
 80005f0:	485b      	ldr	r0, [pc, #364]	@ (8000760 <main+0x1e0>)
 80005f2:	f001 f8cf 	bl	8001794 <BSP_GYRO_GetXYZ>

	  if(!gameStarted){
 80005f6:	4b5b      	ldr	r3, [pc, #364]	@ (8000764 <main+0x1e4>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d10e      	bne.n	800061c <main+0x9c>
		  if(data[1] > THRESHOLD){
 80005fe:	4b58      	ldr	r3, [pc, #352]	@ (8000760 <main+0x1e0>)
 8000600:	edd3 7a01 	vldr	s15, [r3, #4]
 8000604:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8000768 <main+0x1e8>
 8000608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800060c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000610:	dc00      	bgt.n	8000614 <main+0x94>
			  gameStarted = 1;
		  }
		  continue;
 8000612:	e096      	b.n	8000742 <main+0x1c2>
			  gameStarted = 1;
 8000614:	4b53      	ldr	r3, [pc, #332]	@ (8000764 <main+0x1e4>)
 8000616:	2201      	movs	r2, #1
 8000618:	601a      	str	r2, [r3, #0]
		  continue;
 800061a:	e092      	b.n	8000742 <main+0x1c2>
	  }

	  // Xóa quả bóng trước đó
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f001 f9c2 	bl	80019a8 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(120, 160, ball_r);
 8000624:	4b4a      	ldr	r3, [pc, #296]	@ (8000750 <main+0x1d0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	b29b      	uxth	r3, r3
 800062a:	461a      	mov	r2, r3
 800062c:	21a0      	movs	r1, #160	@ 0xa0
 800062e:	2078      	movs	r0, #120	@ 0x78
 8000630:	f001 fc86 	bl	8001f40 <BSP_LCD_FillCircle>


	  ball_r += step_r; // Cập nhật bán kính
 8000634:	4b46      	ldr	r3, [pc, #280]	@ (8000750 <main+0x1d0>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b4c      	ldr	r3, [pc, #304]	@ (800076c <main+0x1ec>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4413      	add	r3, r2
 800063e:	4a44      	ldr	r2, [pc, #272]	@ (8000750 <main+0x1d0>)
 8000640:	6013      	str	r3, [r2, #0]
	  ball_hight += step_hight; // cập nhật độ cao
 8000642:	4b4b      	ldr	r3, [pc, #300]	@ (8000770 <main+0x1f0>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	4b4b      	ldr	r3, [pc, #300]	@ (8000774 <main+0x1f4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	4a48      	ldr	r2, [pc, #288]	@ (8000770 <main+0x1f0>)
 800064e:	6013      	str	r3, [r2, #0]

	  if (ball_r >= 60) {
 8000650:	4b3f      	ldr	r3, [pc, #252]	@ (8000750 <main+0x1d0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b3b      	cmp	r3, #59	@ 0x3b
 8000656:	dd0e      	ble.n	8000676 <main+0xf6>
		  step_r = -step_r;  // Đảo chiều
 8000658:	4b44      	ldr	r3, [pc, #272]	@ (800076c <main+0x1ec>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	425b      	negs	r3, r3
 800065e:	4a43      	ldr	r2, [pc, #268]	@ (800076c <main+0x1ec>)
 8000660:	6013      	str	r3, [r2, #0]
		  step_hight = -step_hight;
 8000662:	4b44      	ldr	r3, [pc, #272]	@ (8000774 <main+0x1f4>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	425b      	negs	r3, r3
 8000668:	4a42      	ldr	r2, [pc, #264]	@ (8000774 <main+0x1f4>)
 800066a:	6013      	str	r3, [r2, #0]
		  score++;
 800066c:	4b39      	ldr	r3, [pc, #228]	@ (8000754 <main+0x1d4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	3301      	adds	r3, #1
 8000672:	4a38      	ldr	r2, [pc, #224]	@ (8000754 <main+0x1d4>)
 8000674:	6013      	str	r3, [r2, #0]
	  }

	  if (data[1] > THRESHOLD && ball_r < 60 && step_r < 0) {
 8000676:	4b3a      	ldr	r3, [pc, #232]	@ (8000760 <main+0x1e0>)
 8000678:	edd3 7a01 	vldr	s15, [r3, #4]
 800067c:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8000768 <main+0x1e8>
 8000680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000688:	dd1c      	ble.n	80006c4 <main+0x144>
 800068a:	4b31      	ldr	r3, [pc, #196]	@ (8000750 <main+0x1d0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b3b      	cmp	r3, #59	@ 0x3b
 8000690:	dc18      	bgt.n	80006c4 <main+0x144>
 8000692:	4b36      	ldr	r3, [pc, #216]	@ (800076c <main+0x1ec>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	da14      	bge.n	80006c4 <main+0x144>
		  step_r = -step_r;  // Đảo chiều
 800069a:	4b34      	ldr	r3, [pc, #208]	@ (800076c <main+0x1ec>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	425b      	negs	r3, r3
 80006a0:	4a32      	ldr	r2, [pc, #200]	@ (800076c <main+0x1ec>)
 80006a2:	6013      	str	r3, [r2, #0]
		  step_hight = -step_hight;
 80006a4:	4b33      	ldr	r3, [pc, #204]	@ (8000774 <main+0x1f4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	425b      	negs	r3, r3
 80006aa:	4a32      	ldr	r2, [pc, #200]	@ (8000774 <main+0x1f4>)
 80006ac:	6013      	str	r3, [r2, #0]
		  sprintf(buffer_usb, "Độ cao hiện tại là: %d", ball_hight);
 80006ae:	4b30      	ldr	r3, [pc, #192]	@ (8000770 <main+0x1f0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4930      	ldr	r1, [pc, #192]	@ (8000778 <main+0x1f8>)
 80006b6:	4831      	ldr	r0, [pc, #196]	@ (800077c <main+0x1fc>)
 80006b8:	f00a fbce 	bl	800ae58 <siprintf>
		  CDC_Transmit_HS(buffer_usb, sizeof(buffer_usb));
 80006bc:	2132      	movs	r1, #50	@ 0x32
 80006be:	482f      	ldr	r0, [pc, #188]	@ (800077c <main+0x1fc>)
 80006c0:	f009 ff6c 	bl	800a59c <CDC_Transmit_HS>
	  }

	  if(ball_r <= 10){
 80006c4:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <main+0x1d0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b0a      	cmp	r3, #10
 80006ca:	dc02      	bgt.n	80006d2 <main+0x152>
		  isGameOver = 1;
 80006cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <main+0x200>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]
	  }

	  if(isGameOver){
 80006d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000780 <main+0x200>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d025      	beq.n	8000726 <main+0x1a6>
		  BSP_LCD_Clear(LCD_COLOR_RED);
 80006da:	482a      	ldr	r0, [pc, #168]	@ (8000784 <main+0x204>)
 80006dc:	f001 f9c6 	bl	8001a6c <BSP_LCD_Clear>
		  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80006e0:	4828      	ldr	r0, [pc, #160]	@ (8000784 <main+0x204>)
 80006e2:	f001 f979 	bl	80019d8 <BSP_LCD_SetBackColor>
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80006e6:	f04f 30ff 	mov.w	r0, #4294967295
 80006ea:	f001 f95d 	bl	80019a8 <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 10, "GAME OVER", CENTER_MODE);
 80006ee:	f001 f8db 	bl	80018a8 <BSP_LCD_GetYSize>
 80006f2:	4603      	mov	r3, r0
 80006f4:	085b      	lsrs	r3, r3, #1
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	3b0a      	subs	r3, #10
 80006fa:	b299      	uxth	r1, r3
 80006fc:	2301      	movs	r3, #1
 80006fe:	4a22      	ldr	r2, [pc, #136]	@ (8000788 <main+0x208>)
 8000700:	2000      	movs	r0, #0
 8000702:	f001 fa1f 	bl	8001b44 <BSP_LCD_DisplayStringAt>
		  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 10, buffer_lcd, CENTER_MODE);
 8000706:	f001 f8cf 	bl	80018a8 <BSP_LCD_GetYSize>
 800070a:	4603      	mov	r3, r0
 800070c:	085b      	lsrs	r3, r3, #1
 800070e:	b29b      	uxth	r3, r3
 8000710:	330a      	adds	r3, #10
 8000712:	b299      	uxth	r1, r3
 8000714:	2301      	movs	r3, #1
 8000716:	4a11      	ldr	r2, [pc, #68]	@ (800075c <main+0x1dc>)
 8000718:	2000      	movs	r0, #0
 800071a:	f001 fa13 	bl	8001b44 <BSP_LCD_DisplayStringAt>
		  score = 0;
 800071e:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <main+0x1d4>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
		  break;
 8000724:	e00e      	b.n	8000744 <main+0x1c4>
	  }

	  // Vẽ quả bóng mới
	  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000726:	4809      	ldr	r0, [pc, #36]	@ (800074c <main+0x1cc>)
 8000728:	f001 f93e 	bl	80019a8 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(120, 160, ball_r);
 800072c:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <main+0x1d0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	b29b      	uxth	r3, r3
 8000732:	461a      	mov	r2, r3
 8000734:	21a0      	movs	r1, #160	@ 0xa0
 8000736:	2078      	movs	r0, #120	@ 0x78
 8000738:	f001 fc02 	bl	8001f40 <BSP_LCD_FillCircle>

	  HAL_Delay(30);
 800073c:	201e      	movs	r0, #30
 800073e:	f002 f8d9 	bl	80028f4 <HAL_Delay>
	  sprintf(buffer_lcd, "Score: %d", score);
 8000742:	e74a      	b.n	80005da <main+0x5a>
 8000744:	2300      	movs	r3, #0
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000746:	4618      	mov	r0, r3
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	ff0000ff 	.word	0xff0000ff
 8000750:	20000000 	.word	0x20000000
 8000754:	200001fc 	.word	0x200001fc
 8000758:	0800b7b0 	.word	0x0800b7b0
 800075c:	20000200 	.word	0x20000200
 8000760:	20000268 	.word	0x20000268
 8000764:	200001f4 	.word	0x200001f4
 8000768:	43fa0000 	.word	0x43fa0000
 800076c:	2000000c 	.word	0x2000000c
 8000770:	20000004 	.word	0x20000004
 8000774:	20000008 	.word	0x20000008
 8000778:	0800b7bc 	.word	0x0800b7bc
 800077c:	20000234 	.word	0x20000234
 8000780:	200001f8 	.word	0x200001f8
 8000784:	ffff0000 	.word	0xffff0000
 8000788:	0800b7dc 	.word	0x0800b7dc

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	@ 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	@ 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f00a fb7c 	bl	800ae98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	4b28      	ldr	r3, [pc, #160]	@ (8000858 <SystemClock_Config+0xcc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b8:	4a27      	ldr	r2, [pc, #156]	@ (8000858 <SystemClock_Config+0xcc>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c0:	4b25      	ldr	r3, [pc, #148]	@ (8000858 <SystemClock_Config+0xcc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b22      	ldr	r3, [pc, #136]	@ (800085c <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a21      	ldr	r2, [pc, #132]	@ (800085c <SystemClock_Config+0xd0>)
 80007d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007fc:	2308      	movs	r3, #8
 80007fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000800:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000804:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000806:	2302      	movs	r3, #2
 8000808:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800080a:	2307      	movs	r3, #7
 800080c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	4618      	mov	r0, r3
 8000814:	f004 fcea 	bl	80051ec <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800081e:	f000 f855 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	230f      	movs	r3, #15
 8000824:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000826:	2302      	movs	r3, #2
 8000828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800082e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000832:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000838:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	2105      	movs	r1, #5
 8000840:	4618      	mov	r0, r3
 8000842:	f004 ff4b 	bl	80056dc <HAL_RCC_ClockConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800084c:	f000 f83e 	bl	80008cc <Error_Handler>
  }
}
 8000850:	bf00      	nop
 8000852:	3750      	adds	r7, #80	@ 0x50
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <MX_GPIO_Init+0x68>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a16      	ldr	r2, [pc, #88]	@ (80008c8 <MX_GPIO_Init+0x68>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_GPIO_Init+0x68>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <MX_GPIO_Init+0x68>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a0f      	ldr	r2, [pc, #60]	@ (80008c8 <MX_GPIO_Init+0x68>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <MX_GPIO_Init+0x68>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_GPIO_Init+0x68>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a08      	ldr	r2, [pc, #32]	@ (80008c8 <MX_GPIO_Init+0x68>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_GPIO_Init+0x68>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ba:	bf00      	nop
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <Error_Handler+0x8>

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000924 <HAL_MspInit+0x4c>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_MspInit+0x4c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	@ 0x40
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <NMI_Handler+0x4>

08000930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <MemManage_Handler+0x4>

08000940 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <UsageFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097e:	f001 ff99 	bl	80028b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800098c:	4802      	ldr	r0, [pc, #8]	@ (8000998 <OTG_HS_IRQHandler+0x10>)
 800098e:	f003 fb1e 	bl	8003fce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200019b4 	.word	0x200019b4

0800099c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a4:	4a14      	ldr	r2, [pc, #80]	@ (80009f8 <_sbrk+0x5c>)
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <_sbrk+0x60>)
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b0:	4b13      	ldr	r3, [pc, #76]	@ (8000a00 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d102      	bne.n	80009be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <_sbrk+0x64>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	@ (8000a04 <_sbrk+0x68>)
 80009bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009be:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d207      	bcs.n	80009dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009cc:	f00a fa6c 	bl	800aea8 <__errno>
 80009d0:	4603      	mov	r3, r0
 80009d2:	220c      	movs	r2, #12
 80009d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	e009      	b.n	80009f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009dc:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e2:	4b07      	ldr	r3, [pc, #28]	@ (8000a00 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	4a05      	ldr	r2, [pc, #20]	@ (8000a00 <_sbrk+0x64>)
 80009ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ee:	68fb      	ldr	r3, [r7, #12]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20030000 	.word	0x20030000
 80009fc:	00000400 	.word	0x00000400
 8000a00:	20000274 	.word	0x20000274
 8000a04:	20002200 	.word	0x20002200

08000a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	@ (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a30:	f7ff ffea 	bl	8000a08 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	@ (8000a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	@ (8000a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	@ (8000a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f00a fa2b 	bl	800aeb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5e:	f7ff fd8f 	bl	8000580 <main>
  bx  lr    
 8000a62:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a64:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8000a70:	0800d344 	.word	0x0800d344
  ldr r2, =_sbss
 8000a74:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000a78:	20002200 	.word	0x20002200

08000a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC_IRQHandler>

08000a7e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000a82:	f000 fc6f 	bl	8001364 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000a86:	20ca      	movs	r0, #202	@ 0xca
 8000a88:	f000 f95d 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000a8c:	20c3      	movs	r0, #195	@ 0xc3
 8000a8e:	f000 f967 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000a92:	2008      	movs	r0, #8
 8000a94:	f000 f964 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000a98:	2050      	movs	r0, #80	@ 0x50
 8000a9a:	f000 f961 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000a9e:	20cf      	movs	r0, #207	@ 0xcf
 8000aa0:	f000 f951 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 f95b 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000aaa:	20c1      	movs	r0, #193	@ 0xc1
 8000aac:	f000 f958 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000ab0:	2030      	movs	r0, #48	@ 0x30
 8000ab2:	f000 f955 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000ab6:	20ed      	movs	r0, #237	@ 0xed
 8000ab8:	f000 f945 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000abc:	2064      	movs	r0, #100	@ 0x64
 8000abe:	f000 f94f 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000ac2:	2003      	movs	r0, #3
 8000ac4:	f000 f94c 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000ac8:	2012      	movs	r0, #18
 8000aca:	f000 f949 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000ace:	2081      	movs	r0, #129	@ 0x81
 8000ad0:	f000 f946 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000ad4:	20e8      	movs	r0, #232	@ 0xe8
 8000ad6:	f000 f936 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000ada:	2085      	movs	r0, #133	@ 0x85
 8000adc:	f000 f940 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f000 f93d 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000ae6:	2078      	movs	r0, #120	@ 0x78
 8000ae8:	f000 f93a 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000aec:	20cb      	movs	r0, #203	@ 0xcb
 8000aee:	f000 f92a 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000af2:	2039      	movs	r0, #57	@ 0x39
 8000af4:	f000 f934 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000af8:	202c      	movs	r0, #44	@ 0x2c
 8000afa:	f000 f931 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f000 f92e 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000b04:	2034      	movs	r0, #52	@ 0x34
 8000b06:	f000 f92b 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000b0a:	2002      	movs	r0, #2
 8000b0c:	f000 f928 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000b10:	20f7      	movs	r0, #247	@ 0xf7
 8000b12:	f000 f918 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000b16:	2020      	movs	r0, #32
 8000b18:	f000 f922 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000b1c:	20ea      	movs	r0, #234	@ 0xea
 8000b1e:	f000 f912 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 f91c 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 f919 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000b2e:	20b1      	movs	r0, #177	@ 0xb1
 8000b30:	f000 f909 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f000 f913 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000b3a:	201b      	movs	r0, #27
 8000b3c:	f000 f910 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000b40:	20b6      	movs	r0, #182	@ 0xb6
 8000b42:	f000 f900 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000b46:	200a      	movs	r0, #10
 8000b48:	f000 f90a 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000b4c:	20a2      	movs	r0, #162	@ 0xa2
 8000b4e:	f000 f907 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000b52:	20c0      	movs	r0, #192	@ 0xc0
 8000b54:	f000 f8f7 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000b58:	2010      	movs	r0, #16
 8000b5a:	f000 f901 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000b5e:	20c1      	movs	r0, #193	@ 0xc1
 8000b60:	f000 f8f1 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000b64:	2010      	movs	r0, #16
 8000b66:	f000 f8fb 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000b6a:	20c5      	movs	r0, #197	@ 0xc5
 8000b6c:	f000 f8eb 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000b70:	2045      	movs	r0, #69	@ 0x45
 8000b72:	f000 f8f5 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000b76:	2015      	movs	r0, #21
 8000b78:	f000 f8f2 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000b7c:	20c7      	movs	r0, #199	@ 0xc7
 8000b7e:	f000 f8e2 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000b82:	2090      	movs	r0, #144	@ 0x90
 8000b84:	f000 f8ec 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000b88:	2036      	movs	r0, #54	@ 0x36
 8000b8a:	f000 f8dc 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000b8e:	20c8      	movs	r0, #200	@ 0xc8
 8000b90:	f000 f8e6 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000b94:	20f2      	movs	r0, #242	@ 0xf2
 8000b96:	f000 f8d6 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f8e0 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000ba0:	20b0      	movs	r0, #176	@ 0xb0
 8000ba2:	f000 f8d0 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000ba6:	20c2      	movs	r0, #194	@ 0xc2
 8000ba8:	f000 f8da 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000bac:	20b6      	movs	r0, #182	@ 0xb6
 8000bae:	f000 f8ca 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000bb2:	200a      	movs	r0, #10
 8000bb4:	f000 f8d4 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000bb8:	20a7      	movs	r0, #167	@ 0xa7
 8000bba:	f000 f8d1 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000bbe:	2027      	movs	r0, #39	@ 0x27
 8000bc0:	f000 f8ce 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000bc4:	2004      	movs	r0, #4
 8000bc6:	f000 f8cb 	bl	8000d60 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000bca:	202a      	movs	r0, #42	@ 0x2a
 8000bcc:	f000 f8bb 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 f8c5 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 f8c2 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f000 f8bf 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000be2:	20ef      	movs	r0, #239	@ 0xef
 8000be4:	f000 f8bc 	bl	8000d60 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000be8:	202b      	movs	r0, #43	@ 0x2b
 8000bea:	f000 f8ac 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 f8b6 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f000 f8b3 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f000 f8b0 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000c00:	203f      	movs	r0, #63	@ 0x3f
 8000c02:	f000 f8ad 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000c06:	20f6      	movs	r0, #246	@ 0xf6
 8000c08:	f000 f89d 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 f8a7 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 f8a4 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000c18:	2006      	movs	r0, #6
 8000c1a:	f000 f8a1 	bl	8000d60 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000c1e:	202c      	movs	r0, #44	@ 0x2c
 8000c20:	f000 f891 	bl	8000d46 <ili9341_WriteReg>
  LCD_Delay(200);
 8000c24:	20c8      	movs	r0, #200	@ 0xc8
 8000c26:	f000 fc8b 	bl	8001540 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000c2a:	2026      	movs	r0, #38	@ 0x26
 8000c2c:	f000 f88b 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f000 f895 	bl	8000d60 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000c36:	20e0      	movs	r0, #224	@ 0xe0
 8000c38:	f000 f885 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000c3c:	200f      	movs	r0, #15
 8000c3e:	f000 f88f 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000c42:	2029      	movs	r0, #41	@ 0x29
 8000c44:	f000 f88c 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000c48:	2024      	movs	r0, #36	@ 0x24
 8000c4a:	f000 f889 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000c4e:	200c      	movs	r0, #12
 8000c50:	f000 f886 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000c54:	200e      	movs	r0, #14
 8000c56:	f000 f883 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000c5a:	2009      	movs	r0, #9
 8000c5c:	f000 f880 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000c60:	204e      	movs	r0, #78	@ 0x4e
 8000c62:	f000 f87d 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000c66:	2078      	movs	r0, #120	@ 0x78
 8000c68:	f000 f87a 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000c6c:	203c      	movs	r0, #60	@ 0x3c
 8000c6e:	f000 f877 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000c72:	2009      	movs	r0, #9
 8000c74:	f000 f874 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000c78:	2013      	movs	r0, #19
 8000c7a:	f000 f871 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000c7e:	2005      	movs	r0, #5
 8000c80:	f000 f86e 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000c84:	2017      	movs	r0, #23
 8000c86:	f000 f86b 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000c8a:	2011      	movs	r0, #17
 8000c8c:	f000 f868 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000c90:	2000      	movs	r0, #0
 8000c92:	f000 f865 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000c96:	20e1      	movs	r0, #225	@ 0xe1
 8000c98:	f000 f855 	bl	8000d46 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f000 f85f 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000ca2:	2016      	movs	r0, #22
 8000ca4:	f000 f85c 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000ca8:	201b      	movs	r0, #27
 8000caa:	f000 f859 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000cae:	2004      	movs	r0, #4
 8000cb0:	f000 f856 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000cb4:	2011      	movs	r0, #17
 8000cb6:	f000 f853 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000cba:	2007      	movs	r0, #7
 8000cbc:	f000 f850 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000cc0:	2031      	movs	r0, #49	@ 0x31
 8000cc2:	f000 f84d 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000cc6:	2033      	movs	r0, #51	@ 0x33
 8000cc8:	f000 f84a 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000ccc:	2042      	movs	r0, #66	@ 0x42
 8000cce:	f000 f847 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000cd2:	2005      	movs	r0, #5
 8000cd4:	f000 f844 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000cd8:	200c      	movs	r0, #12
 8000cda:	f000 f841 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f000 f83e 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000ce4:	2028      	movs	r0, #40	@ 0x28
 8000ce6:	f000 f83b 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000cea:	202f      	movs	r0, #47	@ 0x2f
 8000cec:	f000 f838 	bl	8000d60 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000cf0:	200f      	movs	r0, #15
 8000cf2:	f000 f835 	bl	8000d60 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000cf6:	2011      	movs	r0, #17
 8000cf8:	f000 f825 	bl	8000d46 <ili9341_WriteReg>
  LCD_Delay(200);
 8000cfc:	20c8      	movs	r0, #200	@ 0xc8
 8000cfe:	f000 fc1f 	bl	8001540 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000d02:	2029      	movs	r0, #41	@ 0x29
 8000d04:	f000 f81f 	bl	8000d46 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000d08:	202c      	movs	r0, #44	@ 0x2c
 8000d0a:	f000 f81c 	bl	8000d46 <ili9341_WriteReg>
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000d16:	f000 fb25 	bl	8001364 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000d1a:	2103      	movs	r1, #3
 8000d1c:	20d3      	movs	r0, #211	@ 0xd3
 8000d1e:	f000 f82c 	bl	8000d7a <ili9341_ReadData>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b29b      	uxth	r3, r3
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000d2e:	2029      	movs	r0, #41	@ 0x29
 8000d30:	f000 f809 	bl	8000d46 <ili9341_WriteReg>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8000d3c:	2028      	movs	r0, #40	@ 0x28
 8000d3e:	f000 f802 	bl	8000d46 <ili9341_WriteReg>
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 fba0 	bl	8001498 <LCD_IO_WriteReg>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fb71 	bl	8001454 <LCD_IO_WriteData>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	460a      	mov	r2, r1
 8000d84:	80fb      	strh	r3, [r7, #6]
 8000d86:	4613      	mov	r3, r2
 8000d88:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000d8a:	797a      	ldrb	r2, [r7, #5]
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fba3 	bl	80014dc <LCD_IO_ReadData>
 8000d96:	4603      	mov	r3, r0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8000da4:	23f0      	movs	r3, #240	@ 0xf0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8000db4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000dd0:	f000 fbc2 	bl	8001558 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000dd4:	88fb      	ldrh	r3, [r7, #6]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000dda:	f107 030f 	add.w	r3, r7, #15
 8000dde:	2201      	movs	r2, #1
 8000de0:	2120      	movs	r1, #32
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fc04 	bl	80015f0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	0a1b      	lsrs	r3, r3, #8
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000df2:	f107 030f 	add.w	r3, r7, #15
 8000df6:	2201      	movs	r2, #1
 8000df8:	2123      	movs	r1, #35	@ 0x23
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fbf8 	bl	80015f0 <GYRO_IO_Write>
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000e1c:	f000 fb9c 	bl	8001558 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8000e20:	1dfb      	adds	r3, r7, #7
 8000e22:	2201      	movs	r2, #1
 8000e24:	210f      	movs	r1, #15
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 fc14 	bl	8001654 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2124      	movs	r1, #36	@ 0x24
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fc06 	bl	8001654 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	2201      	movs	r2, #1
 8000e56:	2124      	movs	r1, #36	@ 0x24
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 fbc9 	bl	80015f0 <GYRO_IO_Write>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000e7a:	f107 030f 	add.w	r3, r7, #15
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2120      	movs	r1, #32
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fbb4 	bl	80015f0 <GYRO_IO_Write>
}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000ea2:	f107 030f 	add.w	r3, r7, #15
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2130      	movs	r1, #48	@ 0x30
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 fbd2 	bl	8001654 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000eb0:	f107 030e 	add.w	r3, r7, #14
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2122      	movs	r1, #34	@ 0x22
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fbcb 	bl	8001654 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	121b      	asrs	r3, r3, #8
 8000ece:	b25a      	sxtb	r2, r3
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8000edc:	7bbb      	ldrb	r3, [r7, #14]
 8000ede:	f023 0320 	bic.w	r3, r3, #32
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	7bbb      	ldrb	r3, [r7, #14]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000ef2:	f107 030f 	add.w	r3, r7, #15
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2130      	movs	r1, #48	@ 0x30
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fb78 	bl	80015f0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000f00:	f107 030e 	add.w	r3, r7, #14
 8000f04:	2201      	movs	r2, #1
 8000f06:	2122      	movs	r1, #34	@ 0x22
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 fb71 	bl	80015f0 <GYRO_IO_Write>
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b084      	sub	sp, #16
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000f20:	f107 030f 	add.w	r3, r7, #15
 8000f24:	2201      	movs	r2, #1
 8000f26:	2122      	movs	r1, #34	@ 0x22
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 fb93 	bl	8001654 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10a      	bne.n	8000f4a <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e00c      	b.n	8000f64 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d109      	bne.n	8000f64 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	f023 0308 	bic.w	r3, r3, #8
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000f64:	f107 030f 	add.w	r3, r7, #15
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2122      	movs	r1, #34	@ 0x22
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fb3f 	bl	80015f0 <GYRO_IO_Write>
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000f84:	f107 030f 	add.w	r3, r7, #15
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2122      	movs	r1, #34	@ 0x22
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fb61 	bl	8001654 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d107      	bne.n	8000fa8 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	e009      	b.n	8000fbc <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d106      	bne.n	8000fbc <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	f023 0308 	bic.w	r3, r3, #8
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000fbc:	f107 030f 	add.w	r3, r7, #15
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2122      	movs	r1, #34	@ 0x22
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fb13 	bl	80015f0 <GYRO_IO_Write>
}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000fdc:	f107 030f 	add.w	r3, r7, #15
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2121      	movs	r1, #33	@ 0x21
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fb35 	bl	8001654 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000ffe:	f107 030f 	add.w	r3, r7, #15
 8001002:	2201      	movs	r2, #1
 8001004:	2121      	movs	r1, #33	@ 0x21
 8001006:	4618      	mov	r0, r3
 8001008:	f000 faf2 	bl	80015f0 <GYRO_IO_Write>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800101e:	f107 030f 	add.w	r3, r7, #15
 8001022:	2201      	movs	r2, #1
 8001024:	2124      	movs	r1, #36	@ 0x24
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fb14 	bl	8001654 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	f023 0310 	bic.w	r3, r3, #16
 8001032:	b2db      	uxtb	r3, r3
 8001034:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	4313      	orrs	r3, r2
 800103c:	b2db      	uxtb	r3, r3
 800103e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001040:	f107 030f 	add.w	r3, r7, #15
 8001044:	2201      	movs	r2, #1
 8001046:	2124      	movs	r1, #36	@ 0x24
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fad1 	bl	80015f0 <GYRO_IO_Write>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	2300      	movs	r3, #0
 8001066:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001080:	f107 030f 	add.w	r3, r7, #15
 8001084:	2201      	movs	r2, #1
 8001086:	2123      	movs	r1, #35	@ 0x23
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fae3 	bl	8001654 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800108e:	f107 0318 	add.w	r3, r7, #24
 8001092:	2206      	movs	r2, #6
 8001094:	2128      	movs	r1, #40	@ 0x28
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fadc 	bl	8001654 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d121      	bne.n	80010ea <L3GD20_ReadXYZAngRate+0x92>
  {
    for(i=0; i<3; i++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
 80010aa:	e01a      	b.n	80010e2 <L3GD20_ReadXYZAngRate+0x8a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	3301      	adds	r3, #1
 80010b2:	3328      	adds	r3, #40	@ 0x28
 80010b4:	443b      	add	r3, r7
 80010b6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	6a3a      	ldr	r2, [r7, #32]
 80010c0:	0052      	lsls	r2, r2, #1
 80010c2:	3228      	adds	r2, #40	@ 0x28
 80010c4:	443a      	add	r2, r7
 80010c6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80010ca:	4413      	add	r3, r2
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	6a3b      	ldr	r3, [r7, #32]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	3328      	adds	r3, #40	@ 0x28
 80010d6:	443b      	add	r3, r7
 80010d8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80010dc:	6a3b      	ldr	r3, [r7, #32]
 80010de:	3301      	adds	r3, #1
 80010e0:	623b      	str	r3, [r7, #32]
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	dde1      	ble.n	80010ac <L3GD20_ReadXYZAngRate+0x54>
 80010e8:	e020      	b.n	800112c <L3GD20_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
 80010ee:	e01a      	b.n	8001126 <L3GD20_ReadXYZAngRate+0xce>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	3328      	adds	r3, #40	@ 0x28
 80010f6:	443b      	add	r3, r7
 80010f8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b29b      	uxth	r3, r3
 8001100:	6a3a      	ldr	r2, [r7, #32]
 8001102:	0052      	lsls	r2, r2, #1
 8001104:	3201      	adds	r2, #1
 8001106:	3228      	adds	r2, #40	@ 0x28
 8001108:	443a      	add	r2, r7
 800110a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800110e:	4413      	add	r3, r2
 8001110:	b29b      	uxth	r3, r3
 8001112:	b21a      	sxth	r2, r3
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	3328      	adds	r3, #40	@ 0x28
 800111a:	443b      	add	r3, r7
 800111c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	3301      	adds	r3, #1
 8001124:	623b      	str	r3, [r7, #32]
 8001126:	6a3b      	ldr	r3, [r7, #32]
 8001128:	2b02      	cmp	r3, #2
 800112a:	dde1      	ble.n	80010f0 <L3GD20_ReadXYZAngRate+0x98>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001132:	2b20      	cmp	r3, #32
 8001134:	d00c      	beq.n	8001150 <L3GD20_ReadXYZAngRate+0xf8>
 8001136:	2b20      	cmp	r3, #32
 8001138:	dc0d      	bgt.n	8001156 <L3GD20_ReadXYZAngRate+0xfe>
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <L3GD20_ReadXYZAngRate+0xec>
 800113e:	2b10      	cmp	r3, #16
 8001140:	d003      	beq.n	800114a <L3GD20_ReadXYZAngRate+0xf2>
 8001142:	e008      	b.n	8001156 <L3GD20_ReadXYZAngRate+0xfe>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001144:	4b15      	ldr	r3, [pc, #84]	@ (800119c <L3GD20_ReadXYZAngRate+0x144>)
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001148:	e005      	b.n	8001156 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <L3GD20_ReadXYZAngRate+0x148>)
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 800114e:	e002      	b.n	8001156 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <L3GD20_ReadXYZAngRate+0x14c>)
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001154:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
 800115a:	e016      	b.n	800118a <L3GD20_ReadXYZAngRate+0x132>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	3328      	adds	r3, #40	@ 0x28
 8001162:	443b      	add	r3, r7
 8001164:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800117c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001180:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	3301      	adds	r3, #1
 8001188:	623b      	str	r3, [r7, #32]
 800118a:	6a3b      	ldr	r3, [r7, #32]
 800118c:	2b02      	cmp	r3, #2
 800118e:	dde5      	ble.n	800115c <L3GD20_ReadXYZAngRate+0x104>
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	@ 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	410c0000 	.word	0x410c0000
 80011a0:	418c0000 	.word	0x418c0000
 80011a4:	428c0000 	.word	0x428c0000

080011a8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80011ac:	4819      	ldr	r0, [pc, #100]	@ (8001214 <SPIx_Init+0x6c>)
 80011ae:	f005 fbb3 	bl	8006918 <HAL_SPI_GetState>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d12b      	bne.n	8001210 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80011b8:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <SPIx_Init+0x6c>)
 80011ba:	4a17      	ldr	r2, [pc, #92]	@ (8001218 <SPIx_Init+0x70>)
 80011bc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <SPIx_Init+0x6c>)
 80011c0:	2218      	movs	r2, #24
 80011c2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80011c4:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <SPIx_Init+0x6c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <SPIx_Init+0x6c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <SPIx_Init+0x6c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <SPIx_Init+0x6c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <SPIx_Init+0x6c>)
 80011de:	2207      	movs	r2, #7
 80011e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <SPIx_Init+0x6c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <SPIx_Init+0x6c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <SPIx_Init+0x6c>)
 80011f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011f4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80011f6:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <SPIx_Init+0x6c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <SPIx_Init+0x6c>)
 80011fe:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001202:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001204:	4803      	ldr	r0, [pc, #12]	@ (8001214 <SPIx_Init+0x6c>)
 8001206:	f000 f873 	bl	80012f0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800120a:	4802      	ldr	r0, [pc, #8]	@ (8001214 <SPIx_Init+0x6c>)
 800120c:	f004 feb9 	bl	8005f82 <HAL_SPI_Init>
  }
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000278 	.word	0x20000278
 8001218:	40015000 	.word	0x40015000

0800121c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <SPIx_Read+0x38>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f107 0108 	add.w	r1, r7, #8
 8001236:	4808      	ldr	r0, [pc, #32]	@ (8001258 <SPIx_Read+0x3c>)
 8001238:	f005 f8ac 	bl	8006394 <HAL_SPI_Receive>
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001246:	f000 f847 	bl	80012d8 <SPIx_Error>
  }

  return readvalue;
 800124a:	68bb      	ldr	r3, [r7, #8]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000080 	.word	0x20000080
 8001258:	20000278 	.word	0x20000278

0800125c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <SPIx_Write+0x34>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	1db9      	adds	r1, r7, #6
 8001270:	2201      	movs	r2, #1
 8001272:	4808      	ldr	r0, [pc, #32]	@ (8001294 <SPIx_Write+0x38>)
 8001274:	f004 ff4a 	bl	800610c <HAL_SPI_Transmit>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001282:	f000 f829 	bl	80012d8 <SPIx_Error>
  }
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000080 	.word	0x20000080
 8001294:	20000278 	.word	0x20000278

08001298 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af02      	add	r7, sp, #8
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]

  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if (HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *) &Byte, (uint8_t *) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <SPIx_WriteRead+0x38>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f107 020f 	add.w	r2, r7, #15
 80012ae:	1df9      	adds	r1, r7, #7
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	4807      	ldr	r0, [pc, #28]	@ (80012d4 <SPIx_WriteRead+0x3c>)
 80012b6:	f005 f986 	bl	80065c6 <HAL_SPI_TransmitReceive>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 80012c0:	f000 f80a 	bl	80012d8 <SPIx_Error>
  }

  return receivedbyte;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000080 	.word	0x20000080
 80012d4:	20000278 	.word	0x20000278

080012d8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80012dc:	4803      	ldr	r0, [pc, #12]	@ (80012ec <SPIx_Error+0x14>)
 80012de:	f004 fed9 	bl	8006094 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80012e2:	f7ff ff61 	bl	80011a8 <SPIx_Init>
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000278 	.word	0x20000278

080012f0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	@ 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	4b17      	ldr	r3, [pc, #92]	@ (800135c <SPIx_MspInit+0x6c>)
 80012fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001300:	4a16      	ldr	r2, [pc, #88]	@ (800135c <SPIx_MspInit+0x6c>)
 8001302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001306:	6453      	str	r3, [r2, #68]	@ 0x44
 8001308:	4b14      	ldr	r3, [pc, #80]	@ (800135c <SPIx_MspInit+0x6c>)
 800130a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	4b10      	ldr	r3, [pc, #64]	@ (800135c <SPIx_MspInit+0x6c>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131c:	4a0f      	ldr	r2, [pc, #60]	@ (800135c <SPIx_MspInit+0x6c>)
 800131e:	f043 0320 	orr.w	r3, r3, #32
 8001322:	6313      	str	r3, [r2, #48]	@ 0x30
 8001324:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <SPIx_MspInit+0x6c>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001330:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800133a:	2302      	movs	r3, #2
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800133e:	2301      	movs	r3, #1
 8001340:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001342:	2305      	movs	r3, #5
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4804      	ldr	r0, [pc, #16]	@ (8001360 <SPIx_MspInit+0x70>)
 800134e:	f002 f85b 	bl	8003408 <HAL_GPIO_Init>
}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	@ 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40021400 	.word	0x40021400

08001364 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 800136a:	4b36      	ldr	r3, [pc, #216]	@ (8001444 <LCD_IO_Init+0xe0>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d164      	bne.n	800143c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001372:	4b34      	ldr	r3, [pc, #208]	@ (8001444 <LCD_IO_Init+0xe0>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	4b32      	ldr	r3, [pc, #200]	@ (8001448 <LCD_IO_Init+0xe4>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001380:	4a31      	ldr	r2, [pc, #196]	@ (8001448 <LCD_IO_Init+0xe4>)
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	6313      	str	r3, [r2, #48]	@ 0x30
 8001388:	4b2f      	ldr	r3, [pc, #188]	@ (8001448 <LCD_IO_Init+0xe4>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001394:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001398:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4619      	mov	r1, r3
 80013ac:	4827      	ldr	r0, [pc, #156]	@ (800144c <LCD_IO_Init+0xe8>)
 80013ae:	f002 f82b 	bl	8003408 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b24      	ldr	r3, [pc, #144]	@ (8001448 <LCD_IO_Init+0xe4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a23      	ldr	r2, [pc, #140]	@ (8001448 <LCD_IO_Init+0xe4>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b21      	ldr	r3, [pc, #132]	@ (8001448 <LCD_IO_Init+0xe4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80013ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	4819      	ldr	r0, [pc, #100]	@ (800144c <LCD_IO_Init+0xe8>)
 80013e8:	f002 f80e 	bl	8003408 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <LCD_IO_Init+0xe4>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f4:	4a14      	ldr	r2, [pc, #80]	@ (8001448 <LCD_IO_Init+0xe4>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <LCD_IO_Init+0xe4>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001408:	2304      	movs	r3, #4
 800140a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001414:	2302      	movs	r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4619      	mov	r1, r3
 800141e:	480c      	ldr	r0, [pc, #48]	@ (8001450 <LCD_IO_Init+0xec>)
 8001420:	f001 fff2 	bl	8003408 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001424:	2200      	movs	r2, #0
 8001426:	2104      	movs	r1, #4
 8001428:	4809      	ldr	r0, [pc, #36]	@ (8001450 <LCD_IO_Init+0xec>)
 800142a:	f002 f999 	bl	8003760 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800142e:	2201      	movs	r2, #1
 8001430:	2104      	movs	r1, #4
 8001432:	4807      	ldr	r0, [pc, #28]	@ (8001450 <LCD_IO_Init+0xec>)
 8001434:	f002 f994 	bl	8003760 <HAL_GPIO_WritePin>

    SPIx_Init();
 8001438:	f7ff feb6 	bl	80011a8 <SPIx_Init>
  }
}
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200002d0 	.word	0x200002d0
 8001448:	40023800 	.word	0x40023800
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40020800 	.word	0x40020800

08001454 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001464:	480a      	ldr	r0, [pc, #40]	@ (8001490 <LCD_IO_WriteData+0x3c>)
 8001466:	f002 f97b 	bl	8003760 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800146a:	2200      	movs	r2, #0
 800146c:	2104      	movs	r1, #4
 800146e:	4809      	ldr	r0, [pc, #36]	@ (8001494 <LCD_IO_WriteData+0x40>)
 8001470:	f002 f976 	bl	8003760 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fef0 	bl	800125c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800147c:	2201      	movs	r2, #1
 800147e:	2104      	movs	r1, #4
 8001480:	4804      	ldr	r0, [pc, #16]	@ (8001494 <LCD_IO_WriteData+0x40>)
 8001482:	f002 f96d 	bl	8003760 <HAL_GPIO_WritePin>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40020800 	.word	0x40020800

08001498 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014a8:	480a      	ldr	r0, [pc, #40]	@ (80014d4 <LCD_IO_WriteReg+0x3c>)
 80014aa:	f002 f959 	bl	8003760 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80014ae:	2200      	movs	r2, #0
 80014b0:	2104      	movs	r1, #4
 80014b2:	4809      	ldr	r0, [pc, #36]	@ (80014d8 <LCD_IO_WriteReg+0x40>)
 80014b4:	f002 f954 	bl	8003760 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fecd 	bl	800125c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80014c2:	2201      	movs	r2, #1
 80014c4:	2104      	movs	r1, #4
 80014c6:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <LCD_IO_WriteReg+0x40>)
 80014c8:	f002 f94a 	bl	8003760 <HAL_GPIO_WritePin>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	40020800 	.word	0x40020800

080014dc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	460a      	mov	r2, r1
 80014e6:	80fb      	strh	r3, [r7, #6]
 80014e8:	4613      	mov	r3, r2
 80014ea:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80014f0:	2200      	movs	r2, #0
 80014f2:	2104      	movs	r1, #4
 80014f4:	4810      	ldr	r0, [pc, #64]	@ (8001538 <LCD_IO_ReadData+0x5c>)
 80014f6:	f002 f933 	bl	8003760 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001500:	480e      	ldr	r0, [pc, #56]	@ (800153c <LCD_IO_ReadData+0x60>)
 8001502:	f002 f92d 	bl	8003760 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fea7 	bl	800125c <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 800150e:	797b      	ldrb	r3, [r7, #5]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fe83 	bl	800121c <SPIx_Read>
 8001516:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001518:	2201      	movs	r2, #1
 800151a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800151e:	4807      	ldr	r0, [pc, #28]	@ (800153c <LCD_IO_ReadData+0x60>)
 8001520:	f002 f91e 	bl	8003760 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001524:	2201      	movs	r2, #1
 8001526:	2104      	movs	r1, #4
 8001528:	4803      	ldr	r0, [pc, #12]	@ (8001538 <LCD_IO_ReadData+0x5c>)
 800152a:	f002 f919 	bl	8003760 <HAL_GPIO_WritePin>

  return readvalue;
 800152e:	68fb      	ldr	r3, [r7, #12]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40020800 	.word	0x40020800
 800153c:	40020c00 	.word	0x40020c00

08001540 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f001 f9d3 	bl	80028f4 <HAL_Delay>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b20      	ldr	r3, [pc, #128]	@ (80015e4 <GYRO_IO_Init+0x8c>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a1f      	ldr	r2, [pc, #124]	@ (80015e4 <GYRO_IO_Init+0x8c>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <GYRO_IO_Init+0x8c>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800157a:	2302      	movs	r3, #2
 800157c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001586:	2301      	movs	r3, #1
 8001588:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	4619      	mov	r1, r3
 8001590:	4815      	ldr	r0, [pc, #84]	@ (80015e8 <GYRO_IO_Init+0x90>)
 8001592:	f001 ff39 	bl	8003408 <HAL_GPIO_Init>

  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8001596:	2201      	movs	r2, #1
 8001598:	2102      	movs	r1, #2
 800159a:	4813      	ldr	r0, [pc, #76]	@ (80015e8 <GYRO_IO_Init+0x90>)
 800159c:	f002 f8e0 	bl	8003760 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <GYRO_IO_Init+0x8c>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a8:	4a0e      	ldr	r2, [pc, #56]	@ (80015e4 <GYRO_IO_Init+0x8c>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <GYRO_IO_Init+0x8c>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80015bc:	2306      	movs	r3, #6
 80015be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	4619      	mov	r1, r3
 80015d2:	4806      	ldr	r0, [pc, #24]	@ (80015ec <GYRO_IO_Init+0x94>)
 80015d4:	f001 ff18 	bl	8003408 <HAL_GPIO_Init>

  SPIx_Init();
 80015d8:	f7ff fde6 	bl	80011a8 <SPIx_Init>
}
 80015dc:	bf00      	nop
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020000 	.word	0x40020000

080015f0 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
 80015fc:	4613      	mov	r3, r2
 80015fe:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8001600:	883b      	ldrh	r3, [r7, #0]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d903      	bls.n	800160e <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800160c:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800160e:	2200      	movs	r2, #0
 8001610:	2102      	movs	r1, #2
 8001612:	480f      	ldr	r0, [pc, #60]	@ (8001650 <GYRO_IO_Write+0x60>)
 8001614:	f002 f8a4 	bl	8003760 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fe3c 	bl	8001298 <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8001620:	e00a      	b.n	8001638 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fe36 	bl	8001298 <SPIx_WriteRead>
    NumByteToWrite--;
 800162c:	883b      	ldrh	r3, [r7, #0]
 800162e:	3b01      	subs	r3, #1
 8001630:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3301      	adds	r3, #1
 8001636:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8001638:	883b      	ldrh	r3, [r7, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f1      	bne.n	8001622 <GYRO_IO_Write+0x32>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 800163e:	2201      	movs	r2, #1
 8001640:	2102      	movs	r1, #2
 8001642:	4803      	ldr	r0, [pc, #12]	@ (8001650 <GYRO_IO_Write+0x60>)
 8001644:	f002 f88c 	bl	8003760 <HAL_GPIO_WritePin>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40020800 	.word	0x40020800

08001654 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]
 8001660:	4613      	mov	r3, r2
 8001662:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8001664:	883b      	ldrh	r3, [r7, #0]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d904      	bls.n	8001674 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001670:	70fb      	strb	r3, [r7, #3]
 8001672:	e003      	b.n	800167c <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800167a:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800167c:	2200      	movs	r2, #0
 800167e:	2102      	movs	r1, #2
 8001680:	4810      	ldr	r0, [pc, #64]	@ (80016c4 <GYRO_IO_Read+0x70>)
 8001682:	f002 f86d 	bl	8003760 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fe05 	bl	8001298 <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 800168e:	e00c      	b.n	80016aa <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff fe01 	bl	8001298 <SPIx_WriteRead>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800169e:	883b      	ldrh	r3, [r7, #0]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3301      	adds	r3, #1
 80016a8:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 80016aa:	883b      	ldrh	r3, [r7, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1ef      	bne.n	8001690 <GYRO_IO_Read+0x3c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 80016b0:	2201      	movs	r2, #1
 80016b2:	2102      	movs	r1, #2
 80016b4:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <GYRO_IO_Read+0x70>)
 80016b6:	f002 f853 	bl	8003760 <HAL_GPIO_WritePin>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40020800 	.word	0x40020800

080016c8 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80016d2:	2300      	movs	r3, #0
 80016d4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0, 0};
 80016d6:	2300      	movs	r3, #0
 80016d8:	703b      	strb	r3, [r7, #0]
 80016da:	2300      	movs	r3, #0
 80016dc:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80016de:	4b2b      	ldr	r3, [pc, #172]	@ (800178c <BSP_GYRO_Init+0xc4>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	4798      	blx	r3
 80016e4:	4603      	mov	r3, r0
 80016e6:	2bd4      	cmp	r3, #212	@ 0xd4
 80016e8:	d005      	beq.n	80016f6 <BSP_GYRO_Init+0x2e>
 80016ea:	4b28      	ldr	r3, [pc, #160]	@ (800178c <BSP_GYRO_Init+0xc4>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	4798      	blx	r3
 80016f0:	4603      	mov	r3, r0
 80016f2:	2bd5      	cmp	r3, #213	@ 0xd5
 80016f4:	d144      	bne.n	8001780 <BSP_GYRO_Init+0xb8>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80016f6:	4b26      	ldr	r3, [pc, #152]	@ (8001790 <BSP_GYRO_Init+0xc8>)
 80016f8:	4a24      	ldr	r2, [pc, #144]	@ (800178c <BSP_GYRO_Init+0xc4>)
 80016fa:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 80016fc:	2308      	movs	r3, #8
 80016fe:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8001700:	2300      	movs	r3, #0
 8001702:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8001704:	2307      	movs	r3, #7
 8001706:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8001708:	2330      	movs	r3, #48	@ 0x30
 800170a:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 800170c:	2300      	movs	r3, #0
 800170e:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8001710:	2300      	movs	r3, #0
 8001712:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8001714:	2310      	movs	r3, #16
 8001716:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001718:	793a      	ldrb	r2, [r7, #4]
 800171a:	797b      	ldrb	r3, [r7, #5]
 800171c:	4313      	orrs	r3, r2
 800171e:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001720:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001722:	4313      	orrs	r3, r2
 8001724:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001726:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001728:	4313      	orrs	r3, r2
 800172a:	b2db      	uxtb	r3, r3
 800172c:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800172e:	7a3a      	ldrb	r2, [r7, #8]
 8001730:	7a7b      	ldrb	r3, [r7, #9]
 8001732:	4313      	orrs	r3, r2
 8001734:	b2da      	uxtb	r2, r3
                        Gyro_InitStructure.Full_Scale) << 8);
 8001736:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8001738:	4313      	orrs	r3, r2
 800173a:	b2db      	uxtb	r3, r3
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	b29a      	uxth	r2, r3
 8001740:	89bb      	ldrh	r3, [r7, #12]
 8001742:	4313      	orrs	r3, r2
 8001744:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8001746:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <BSP_GYRO_Init+0xc8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	89ba      	ldrh	r2, [r7, #12]
 800174e:	4610      	mov	r0, r2
 8001750:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8001752:	2300      	movs	r3, #0
 8001754:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8001756:	2300      	movs	r3, #0
 8001758:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 800175a:	783a      	ldrb	r2, [r7, #0]
                      Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800175c:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 800175e:	4313      	orrs	r3, r2
 8001760:	b2db      	uxtb	r3, r3
 8001762:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8001764:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <BSP_GYRO_Init+0xc8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176a:	89ba      	ldrh	r2, [r7, #12]
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	4610      	mov	r0, r2
 8001770:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8001772:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <BSP_GYRO_Init+0xc8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001778:	2010      	movs	r0, #16
 800177a:	4798      	blx	r3

    ret = GYRO_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000004c 	.word	0x2000004c
 8001790:	200002d4 	.word	0x200002d4

08001794 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <BSP_GYRO_GetXYZ+0x24>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d004      	beq.n	80017b0 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 80017a6:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <BSP_GYRO_GetXYZ+0x24>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	4798      	blx	r3
  }
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200002d4 	.word	0x200002d4

080017bc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 80017c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001878 <BSP_LCD_Init+0xbc>)
 80017c2:	4a2e      	ldr	r2, [pc, #184]	@ (800187c <BSP_LCD_Init+0xc0>)
 80017c4:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80017c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001878 <BSP_LCD_Init+0xbc>)
 80017c8:	2209      	movs	r2, #9
 80017ca:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80017cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001878 <BSP_LCD_Init+0xbc>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80017d2:	4b29      	ldr	r3, [pc, #164]	@ (8001878 <BSP_LCD_Init+0xbc>)
 80017d4:	221d      	movs	r2, #29
 80017d6:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80017d8:	4b27      	ldr	r3, [pc, #156]	@ (8001878 <BSP_LCD_Init+0xbc>)
 80017da:	2203      	movs	r2, #3
 80017dc:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 80017de:	4b26      	ldr	r3, [pc, #152]	@ (8001878 <BSP_LCD_Init+0xbc>)
 80017e0:	f240 120d 	movw	r2, #269	@ 0x10d
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 80017e6:	4b24      	ldr	r3, [pc, #144]	@ (8001878 <BSP_LCD_Init+0xbc>)
 80017e8:	f240 1243 	movw	r2, #323	@ 0x143
 80017ec:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 80017ee:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <BSP_LCD_Init+0xbc>)
 80017f0:	f240 1217 	movw	r2, #279	@ 0x117
 80017f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 80017f6:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <BSP_LCD_Init+0xbc>)
 80017f8:	f240 1247 	movw	r2, #327	@ 0x147
 80017fc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <BSP_LCD_Init+0xbc>)
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8001806:	4b1c      	ldr	r3, [pc, #112]	@ (8001878 <BSP_LCD_Init+0xbc>)
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 800180e:	4b1a      	ldr	r3, [pc, #104]	@ (8001878 <BSP_LCD_Init+0xbc>)
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001816:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <BSP_LCD_Init+0xc4>)
 8001818:	2208      	movs	r2, #8
 800181a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800181c:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <BSP_LCD_Init+0xc4>)
 800181e:	22c0      	movs	r2, #192	@ 0xc0
 8001820:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001822:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <BSP_LCD_Init+0xc4>)
 8001824:	2204      	movs	r2, #4
 8001826:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001828:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <BSP_LCD_Init+0xc4>)
 800182a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800182e:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001830:	4813      	ldr	r0, [pc, #76]	@ (8001880 <BSP_LCD_Init+0xc4>)
 8001832:	f004 f94b 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001836:	4b10      	ldr	r3, [pc, #64]	@ (8001878 <BSP_LCD_Init+0xbc>)
 8001838:	2200      	movs	r2, #0
 800183a:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800183c:	4b0e      	ldr	r3, [pc, #56]	@ (8001878 <BSP_LCD_Init+0xbc>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001842:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <BSP_LCD_Init+0xbc>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001848:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <BSP_LCD_Init+0xbc>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 800184e:	f000 fc27 	bl	80020a0 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8001852:	4809      	ldr	r0, [pc, #36]	@ (8001878 <BSP_LCD_Init+0xbc>)
 8001854:	f001 ff9e 	bl	8003794 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8001858:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <BSP_LCD_Init+0xc8>)
 800185a:	4a0b      	ldr	r2, [pc, #44]	@ (8001888 <BSP_LCD_Init+0xcc>)
 800185c:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 800185e:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <BSP_LCD_Init+0xc8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001866:	f000 fe09 	bl	800247c <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800186a:	4808      	ldr	r0, [pc, #32]	@ (800188c <BSP_LCD_Init+0xd0>)
 800186c:	f000 f8ce 	bl	8001a0c <BSP_LCD_SetFont>

  return LCD_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200002d8 	.word	0x200002d8
 800187c:	40016800 	.word	0x40016800
 8001880:	200003c0 	.word	0x200003c0
 8001884:	2000040c 	.word	0x2000040c
 8001888:	20000014 	.word	0x20000014
 800188c:	20000084 	.word	0x20000084

08001890 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001894:	4b03      	ldr	r3, [pc, #12]	@ (80018a4 <BSP_LCD_GetXSize+0x14>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189a:	4798      	blx	r3
 800189c:	4603      	mov	r3, r0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000040c 	.word	0x2000040c

080018a8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80018ac:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <BSP_LCD_GetYSize+0x14>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b2:	4798      	blx	r3
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000040c 	.word	0x2000040c

080018c0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b090      	sub	sp, #64	@ 0x40
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80018d0:	f7ff ffde 	bl	8001890 <BSP_LCD_GetXSize>
 80018d4:	4603      	mov	r3, r0
 80018d6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 80018dc:	f7ff ffe4 	bl	80018a8 <BSP_LCD_GetYSize>
 80018e0:	4603      	mov	r3, r0
 80018e2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 80018ec:	23ff      	movs	r3, #255	@ 0xff
 80018ee:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001906:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800190a:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800190c:	2307      	movs	r3, #7
 800190e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001910:	f7ff ffbe 	bl	8001890 <BSP_LCD_GetXSize>
 8001914:	4603      	mov	r3, r0
 8001916:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001918:	f7ff ffc6 	bl	80018a8 <BSP_LCD_GetYSize>
 800191c:	4603      	mov	r3, r0
 800191e:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8001920:	88fa      	ldrh	r2, [r7, #6]
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	4619      	mov	r1, r3
 8001928:	4814      	ldr	r0, [pc, #80]	@ (800197c <BSP_LCD_LayerDefaultInit+0xbc>)
 800192a:	f002 f80d 	bl	8003948 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800192e:	88fa      	ldrh	r2, [r7, #6]
 8001930:	4913      	ldr	r1, [pc, #76]	@ (8001980 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	3304      	adds	r3, #4
 800193e:	f04f 32ff 	mov.w	r2, #4294967295
 8001942:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001944:	88fa      	ldrh	r2, [r7, #6]
 8001946:	490e      	ldr	r1, [pc, #56]	@ (8001980 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	3308      	adds	r3, #8
 8001954:	4a0b      	ldr	r2, [pc, #44]	@ (8001984 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001956:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	4909      	ldr	r1, [pc, #36]	@ (8001980 <BSP_LCD_LayerDefaultInit+0xc0>)
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800196a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800196c:	4803      	ldr	r0, [pc, #12]	@ (800197c <BSP_LCD_LayerDefaultInit+0xbc>)
 800196e:	f002 f829 	bl	80039c4 <HAL_LTDC_EnableDither>
}
 8001972:	bf00      	nop
 8001974:	3740      	adds	r7, #64	@ 0x40
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200002d8 	.word	0x200002d8
 8001980:	200003f4 	.word	0x200003f4
 8001984:	20000084 	.word	0x20000084

08001988 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001990:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <BSP_LCD_SelectLayer+0x1c>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6013      	str	r3, [r2, #0]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	200003f0 	.word	0x200003f0

080019a8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80019b0:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <BSP_LCD_SetTextColor+0x28>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4907      	ldr	r1, [pc, #28]	@ (80019d4 <BSP_LCD_SetTextColor+0x2c>)
 80019b6:	4613      	mov	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	601a      	str	r2, [r3, #0]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	200003f0 	.word	0x200003f0
 80019d4:	200003f4 	.word	0x200003f4

080019d8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <BSP_LCD_SetBackColor+0x2c>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4908      	ldr	r1, [pc, #32]	@ (8001a08 <BSP_LCD_SetBackColor+0x30>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	3304      	adds	r3, #4
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	601a      	str	r2, [r3, #0]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	200003f0 	.word	0x200003f0
 8001a08:	200003f4 	.word	0x200003f4

08001a0c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <BSP_LCD_SetFont+0x2c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4908      	ldr	r1, [pc, #32]	@ (8001a3c <BSP_LCD_SetFont+0x30>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	3308      	adds	r3, #8
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	601a      	str	r2, [r3, #0]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	200003f0 	.word	0x200003f0
 8001a3c:	200003f4 	.word	0x200003f4

08001a40 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001a44:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <BSP_LCD_GetFont+0x24>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4907      	ldr	r1, [pc, #28]	@ (8001a68 <BSP_LCD_GetFont+0x28>)
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	3308      	adds	r3, #8
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	200003f0 	.word	0x200003f0
 8001a68:	200003f4 	.word	0x200003f4

08001a6c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8001a74:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <BSP_LCD_Clear+0x48>)
 8001a76:	681c      	ldr	r4, [r3, #0]
 8001a78:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <BSP_LCD_Clear+0x48>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab8 <BSP_LCD_Clear+0x4c>)
 8001a7e:	2134      	movs	r1, #52	@ 0x34
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	335c      	adds	r3, #92	@ 0x5c
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	461e      	mov	r6, r3
 8001a8c:	f7ff ff00 	bl	8001890 <BSP_LCD_GetXSize>
 8001a90:	4605      	mov	r5, r0
 8001a92:	f7ff ff09 	bl	80018a8 <BSP_LCD_GetYSize>
 8001a96:	4602      	mov	r2, r0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	462a      	mov	r2, r5
 8001aa4:	4631      	mov	r1, r6
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f000 fcb0 	bl	800240c <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab4:	200003f0 	.word	0x200003f0
 8001ab8:	200002d8 	.word	0x200002d8

08001abc <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	80bb      	strh	r3, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001ace:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <BSP_LCD_DisplayChar+0x80>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	491b      	ldr	r1, [pc, #108]	@ (8001b40 <BSP_LCD_DisplayChar+0x84>)
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	3308      	adds	r3, #8
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6819      	ldr	r1, [r3, #0]
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001aea:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <BSP_LCD_DisplayChar+0x80>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4c14      	ldr	r4, [pc, #80]	@ (8001b40 <BSP_LCD_DisplayChar+0x84>)
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4423      	add	r3, r4
 8001afa:	3308      	adds	r3, #8
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001b00:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001b04:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <BSP_LCD_DisplayChar+0x80>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4c0d      	ldr	r4, [pc, #52]	@ (8001b40 <BSP_LCD_DisplayChar+0x84>)
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4423      	add	r3, r4
 8001b14:	3308      	adds	r3, #8
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	889b      	ldrh	r3, [r3, #4]
 8001b1a:	3307      	adds	r3, #7
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	da00      	bge.n	8001b22 <BSP_LCD_DisplayChar+0x66>
 8001b20:	3307      	adds	r3, #7
 8001b22:	10db      	asrs	r3, r3, #3
 8001b24:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001b28:	18ca      	adds	r2, r1, r3
 8001b2a:	88b9      	ldrh	r1, [r7, #4]
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 fbb2 	bl	8002298 <DrawChar>
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd90      	pop	{r4, r7, pc}
 8001b3c:	200003f0 	.word	0x200003f0
 8001b40:	200003f4 	.word	0x200003f4

08001b44 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001b44:	b5b0      	push	{r4, r5, r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60ba      	str	r2, [r7, #8]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4603      	mov	r3, r0
 8001b50:	81fb      	strh	r3, [r7, #14]
 8001b52:	460b      	mov	r3, r1
 8001b54:	81bb      	strh	r3, [r7, #12]
 8001b56:	4613      	mov	r3, r2
 8001b58:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	83fb      	strh	r3, [r7, #30]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 8001b6e:	e002      	b.n	8001b76 <BSP_LCD_DisplayStringAt+0x32>
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	3301      	adds	r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	617a      	str	r2, [r7, #20]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f6      	bne.n	8001b70 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8001b82:	f7ff fe85 	bl	8001890 <BSP_LCD_GetXSize>
 8001b86:	4601      	mov	r1, r0
 8001b88:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb8 <BSP_LCD_DisplayStringAt+0x174>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	484b      	ldr	r0, [pc, #300]	@ (8001cbc <BSP_LCD_DisplayStringAt+0x178>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4403      	add	r3, r0
 8001b98:	3308      	adds	r3, #8
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	889b      	ldrh	r3, [r3, #4]
 8001b9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ba2:	613b      	str	r3, [r7, #16]

  switch (mode)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d01c      	beq.n	8001be4 <BSP_LCD_DisplayStringAt+0xa0>
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	dc33      	bgt.n	8001c16 <BSP_LCD_DisplayStringAt+0xd2>
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d002      	beq.n	8001bb8 <BSP_LCD_DisplayStringAt+0x74>
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d019      	beq.n	8001bea <BSP_LCD_DisplayStringAt+0xa6>
 8001bb6:	e02e      	b.n	8001c16 <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	1ad1      	subs	r1, r2, r3
 8001bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8001cb8 <BSP_LCD_DisplayStringAt+0x174>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	483e      	ldr	r0, [pc, #248]	@ (8001cbc <BSP_LCD_DisplayStringAt+0x178>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4403      	add	r3, r0
 8001bce:	3308      	adds	r3, #8
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	889b      	ldrh	r3, [r3, #4]
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	89fb      	ldrh	r3, [r7, #14]
 8001bde:	4413      	add	r3, r2
 8001be0:	83fb      	strh	r3, [r7, #30]
      break;
 8001be2:	e01b      	b.n	8001c1c <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8001be4:	89fb      	ldrh	r3, [r7, #14]
 8001be6:	83fb      	strh	r3, [r7, #30]
      break;
 8001be8:	e018      	b.n	8001c1c <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	b299      	uxth	r1, r3
 8001bf2:	4b31      	ldr	r3, [pc, #196]	@ (8001cb8 <BSP_LCD_DisplayStringAt+0x174>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4831      	ldr	r0, [pc, #196]	@ (8001cbc <BSP_LCD_DisplayStringAt+0x178>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4403      	add	r3, r0
 8001c02:	3308      	adds	r3, #8
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	889b      	ldrh	r3, [r3, #4]
 8001c08:	fb11 f303 	smulbb	r3, r1, r3
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	89fb      	ldrh	r3, [r7, #14]
 8001c10:	4413      	add	r3, r2
 8001c12:	83fb      	strh	r3, [r7, #30]
      break;
 8001c14:	e002      	b.n	8001c1c <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 8001c16:	89fb      	ldrh	r3, [r7, #14]
 8001c18:	83fb      	strh	r3, [r7, #30]
      break;
 8001c1a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001c1c:	e01a      	b.n	8001c54 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	781a      	ldrb	r2, [r3, #0]
 8001c22:	89b9      	ldrh	r1, [r7, #12]
 8001c24:	8bfb      	ldrh	r3, [r7, #30]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ff48 	bl	8001abc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001c2c:	4b22      	ldr	r3, [pc, #136]	@ (8001cb8 <BSP_LCD_DisplayStringAt+0x174>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4922      	ldr	r1, [pc, #136]	@ (8001cbc <BSP_LCD_DisplayStringAt+0x178>)
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3308      	adds	r3, #8
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	889a      	ldrh	r2, [r3, #4]
 8001c42:	8bfb      	ldrh	r3, [r7, #30]
 8001c44:	4413      	add	r3, r2
 8001c46:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	60bb      	str	r3, [r7, #8]
    i++;
 8001c4e:	8bbb      	ldrh	r3, [r7, #28]
 8001c50:	3301      	adds	r3, #1
 8001c52:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	b2dc      	uxtb	r4, r3
 8001c62:	f7ff fe15 	bl	8001890 <BSP_LCD_GetXSize>
 8001c66:	8bb9      	ldrh	r1, [r7, #28]
 8001c68:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <BSP_LCD_DisplayStringAt+0x174>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4d13      	ldr	r5, [pc, #76]	@ (8001cbc <BSP_LCD_DisplayStringAt+0x178>)
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	442b      	add	r3, r5
 8001c78:	3308      	adds	r3, #8
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	889b      	ldrh	r3, [r3, #4]
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	1ac3      	subs	r3, r0, r3
 8001c84:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 8001c86:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <BSP_LCD_DisplayStringAt+0x174>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	480c      	ldr	r0, [pc, #48]	@ (8001cbc <BSP_LCD_DisplayStringAt+0x178>)
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4403      	add	r3, r0
 8001c96:	3308      	adds	r3, #8
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001c9c:	4299      	cmp	r1, r3
 8001c9e:	bf2c      	ite	cs
 8001ca0:	2301      	movcs	r3, #1
 8001ca2:	2300      	movcc	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4023      	ands	r3, r4
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1b7      	bne.n	8001c1e <BSP_LCD_DisplayStringAt+0xda>
  }
}
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb8:	200003f0 	.word	0x200003f0
 8001cbc:	200003f4 	.word	0x200003f4

08001cc0 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001ccc:	f7ff feb8 	bl	8001a40 <BSP_LCD_GetFont>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	88db      	ldrh	r3, [r3, #6]
 8001cd4:	88fa      	ldrh	r2, [r7, #6]
 8001cd6:	fb12 f303 	smulbb	r3, r2, r3
 8001cda:	b299      	uxth	r1, r3
 8001cdc:	2303      	movs	r3, #3
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f7ff ff2f 	bl	8001b44 <BSP_LCD_DisplayStringAt>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	80bb      	strh	r3, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8001d06:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <BSP_LCD_DrawHLine+0x70>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a16      	ldr	r2, [pc, #88]	@ (8001d64 <BSP_LCD_DrawHLine+0x74>)
 8001d0c:	2134      	movs	r1, #52	@ 0x34
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	335c      	adds	r3, #92	@ 0x5c
 8001d16:	681c      	ldr	r4, [r3, #0]
 8001d18:	f7ff fdba 	bl	8001890 <BSP_LCD_GetXSize>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	88bb      	ldrh	r3, [r7, #4]
 8001d20:	fb03 f202 	mul.w	r2, r3, r2
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4423      	add	r3, r4
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <BSP_LCD_DrawHLine+0x70>)
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	68f9      	ldr	r1, [r7, #12]
 8001d34:	887c      	ldrh	r4, [r7, #2]
 8001d36:	4b0a      	ldr	r3, [pc, #40]	@ (8001d60 <BSP_LCD_DrawHLine+0x70>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4d0b      	ldr	r5, [pc, #44]	@ (8001d68 <BSP_LCD_DrawHLine+0x78>)
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	442b      	add	r3, r5
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4622      	mov	r2, r4
 8001d52:	f000 fb5b 	bl	800240c <FillBuffer>
}
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200003f0 	.word	0x200003f0
 8001d64:	200002d8 	.word	0x200002d8
 8001d68:	200003f4 	.word	0x200003f4

08001d6c <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	80fb      	strh	r3, [r7, #6]
 8001d76:	460b      	mov	r3, r1
 8001d78:	80bb      	strh	r3, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 8001d7e:	887b      	ldrh	r3, [r7, #2]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	f1c3 0303 	rsb	r3, r3, #3
 8001d86:	617b      	str	r3, [r7, #20]
  curx = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8001d8c:	887b      	ldrh	r3, [r7, #2]
 8001d8e:	60fb      	str	r3, [r7, #12]

  while (curx <= cury)
 8001d90:	e0c7      	b.n	8001f22 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	4413      	add	r3, r2
 8001d9a:	b298      	uxth	r0, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	88ba      	ldrh	r2, [r7, #4]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	b299      	uxth	r1, r3
 8001da6:	4b64      	ldr	r3, [pc, #400]	@ (8001f38 <BSP_LCD_DrawCircle+0x1cc>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4c64      	ldr	r4, [pc, #400]	@ (8001f3c <BSP_LCD_DrawCircle+0x1d0>)
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4423      	add	r3, r4
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	f000 fa47 	bl	800224c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	88fa      	ldrh	r2, [r7, #6]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	b298      	uxth	r0, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	88ba      	ldrh	r2, [r7, #4]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	b299      	uxth	r1, r3
 8001dd2:	4b59      	ldr	r3, [pc, #356]	@ (8001f38 <BSP_LCD_DrawCircle+0x1cc>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4c59      	ldr	r4, [pc, #356]	@ (8001f3c <BSP_LCD_DrawCircle+0x1d0>)
 8001dd8:	4613      	mov	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4423      	add	r3, r4
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	f000 fa31 	bl	800224c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	4413      	add	r3, r2
 8001df2:	b298      	uxth	r0, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	88ba      	ldrh	r2, [r7, #4]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	b299      	uxth	r1, r3
 8001dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8001f38 <BSP_LCD_DrawCircle+0x1cc>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4c4e      	ldr	r4, [pc, #312]	@ (8001f3c <BSP_LCD_DrawCircle+0x1d0>)
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4423      	add	r3, r4
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	f000 fa1b 	bl	800224c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	88fa      	ldrh	r2, [r7, #6]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	b298      	uxth	r0, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	88ba      	ldrh	r2, [r7, #4]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	b299      	uxth	r1, r3
 8001e2a:	4b43      	ldr	r3, [pc, #268]	@ (8001f38 <BSP_LCD_DrawCircle+0x1cc>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4c43      	ldr	r4, [pc, #268]	@ (8001f3c <BSP_LCD_DrawCircle+0x1d0>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4423      	add	r3, r4
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	f000 fa05 	bl	800224c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	4413      	add	r3, r2
 8001e4a:	b298      	uxth	r0, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	88bb      	ldrh	r3, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	b299      	uxth	r1, r3
 8001e56:	4b38      	ldr	r3, [pc, #224]	@ (8001f38 <BSP_LCD_DrawCircle+0x1cc>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	4c38      	ldr	r4, [pc, #224]	@ (8001f3c <BSP_LCD_DrawCircle+0x1d0>)
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4423      	add	r3, r4
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f000 f9ef 	bl	800224c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	88fa      	ldrh	r2, [r7, #6]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	b298      	uxth	r0, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	88bb      	ldrh	r3, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	b299      	uxth	r1, r3
 8001e82:	4b2d      	ldr	r3, [pc, #180]	@ (8001f38 <BSP_LCD_DrawCircle+0x1cc>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4c2d      	ldr	r4, [pc, #180]	@ (8001f3c <BSP_LCD_DrawCircle+0x1d0>)
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4423      	add	r3, r4
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	f000 f9d9 	bl	800224c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b298      	uxth	r0, r3
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	88bb      	ldrh	r3, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	b299      	uxth	r1, r3
 8001eae:	4b22      	ldr	r3, [pc, #136]	@ (8001f38 <BSP_LCD_DrawCircle+0x1cc>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4c22      	ldr	r4, [pc, #136]	@ (8001f3c <BSP_LCD_DrawCircle+0x1d0>)
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4423      	add	r3, r4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f000 f9c3 	bl	800224c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	88fa      	ldrh	r2, [r7, #6]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	b298      	uxth	r0, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	88bb      	ldrh	r3, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b299      	uxth	r1, r3
 8001eda:	4b17      	ldr	r3, [pc, #92]	@ (8001f38 <BSP_LCD_DrawCircle+0x1cc>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4c17      	ldr	r4, [pc, #92]	@ (8001f3c <BSP_LCD_DrawCircle+0x1d0>)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4423      	add	r3, r4
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	f000 f9ad 	bl	800224c <BSP_LCD_DrawPixel>

    if (d < 0)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da06      	bge.n	8001f06 <BSP_LCD_DrawCircle+0x19a>
    {
      d += (curx << 2) + 6;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	009a      	lsls	r2, r3, #2
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	4413      	add	r3, r2
 8001f00:	3306      	adds	r3, #6
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	e00a      	b.n	8001f1c <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	009a      	lsls	r2, r3, #2
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	4413      	add	r3, r2
 8001f12:	330a      	adds	r3, #10
 8001f14:	617b      	str	r3, [r7, #20]
      cury--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	f67f af33 	bls.w	8001d92 <BSP_LCD_DrawCircle+0x26>
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	371c      	adds	r7, #28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd90      	pop	{r4, r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200003f0 	.word	0x200003f0
 8001f3c:	200003f4 	.word	0x200003f4

08001f40 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	80fb      	strh	r3, [r7, #6]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	80bb      	strh	r3, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	f1c3 0303 	rsb	r3, r3, #3
 8001f5a:	617b      	str	r3, [r7, #20]

  curx = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001f64:	4b44      	ldr	r3, [pc, #272]	@ (8002078 <BSP_LCD_FillCircle+0x138>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4944      	ldr	r1, [pc, #272]	@ (800207c <BSP_LCD_FillCircle+0x13c>)
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fd16 	bl	80019a8 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8001f7c:	e061      	b.n	8002042 <BSP_LCD_FillCircle+0x102>
  {
    if (cury > 0)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d021      	beq.n	8001fc8 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2 * cury);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	88fa      	ldrh	r2, [r7, #6]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	b298      	uxth	r0, r3
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	88bb      	ldrh	r3, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	b299      	uxth	r1, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f7ff fea5 	bl	8001cf0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2 * cury);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	88fa      	ldrh	r2, [r7, #6]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	b298      	uxth	r0, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	88ba      	ldrh	r2, [r7, #4]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	b299      	uxth	r1, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f7ff fe94 	bl	8001cf0 <BSP_LCD_DrawHLine>
    }

    if (curx > 0)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d021      	beq.n	8002012 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2 * curx);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	88fa      	ldrh	r2, [r7, #6]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	b298      	uxth	r0, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	88ba      	ldrh	r2, [r7, #4]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	b299      	uxth	r1, r3
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	f7ff fe80 	bl	8001cf0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2 * curx);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	88fa      	ldrh	r2, [r7, #6]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	b298      	uxth	r0, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	88bb      	ldrh	r3, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	b299      	uxth	r1, r3
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	b29b      	uxth	r3, r3
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	f7ff fe6f 	bl	8001cf0 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2b00      	cmp	r3, #0
 8002016:	da06      	bge.n	8002026 <BSP_LCD_FillCircle+0xe6>
    {
      d += (curx << 2) + 6;
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	009a      	lsls	r2, r3, #2
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	4413      	add	r3, r2
 8002020:	3306      	adds	r3, #6
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	e00a      	b.n	800203c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	009a      	lsls	r2, r3, #2
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	4413      	add	r3, r2
 8002032:	330a      	adds	r3, #10
 8002034:	617b      	str	r3, [r7, #20]
      cury--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	3b01      	subs	r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	3301      	adds	r3, #1
 8002040:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	429a      	cmp	r2, r3
 8002048:	d999      	bls.n	8001f7e <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800204a:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <BSP_LCD_FillCircle+0x138>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	490b      	ldr	r1, [pc, #44]	@ (800207c <BSP_LCD_FillCircle+0x13c>)
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fca3 	bl	80019a8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	88b9      	ldrh	r1, [r7, #4]
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fe7f 	bl	8001d6c <BSP_LCD_DrawCircle>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200003f0 	.word	0x200003f0
 800207c:	200003f4 	.word	0x200003f4

08002080 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 8002084:	4b05      	ldr	r3, [pc, #20]	@ (800209c <BSP_LCD_DisplayOn+0x1c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800208e:	4b03      	ldr	r3, [pc, #12]	@ (800209c <BSP_LCD_DisplayOn+0x1c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4798      	blx	r3
  }
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000040c 	.word	0x2000040c

080020a0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08e      	sub	sp, #56	@ 0x38
 80020a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
 80020aa:	4b61      	ldr	r3, [pc, #388]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	4a60      	ldr	r2, [pc, #384]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 80020b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80020b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020b6:	4b5e      	ldr	r3, [pc, #376]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020be:	623b      	str	r3, [r7, #32]
 80020c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	4a59      	ldr	r2, [pc, #356]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 80020cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d2:	4b57      	ldr	r3, [pc, #348]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	4b53      	ldr	r3, [pc, #332]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	4a52      	ldr	r2, [pc, #328]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ee:	4b50      	ldr	r3, [pc, #320]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	4a4b      	ldr	r2, [pc, #300]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	6313      	str	r3, [r2, #48]	@ 0x30
 800210a:	4b49      	ldr	r3, [pc, #292]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	4b45      	ldr	r3, [pc, #276]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	4a44      	ldr	r2, [pc, #272]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	6313      	str	r3, [r2, #48]	@ 0x30
 8002126:	4b42      	ldr	r3, [pc, #264]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b3e      	ldr	r3, [pc, #248]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	4a3d      	ldr	r2, [pc, #244]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 800213c:	f043 0308 	orr.w	r3, r3, #8
 8002140:	6313      	str	r3, [r2, #48]	@ 0x30
 8002142:	4b3b      	ldr	r3, [pc, #236]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	4b37      	ldr	r3, [pc, #220]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	4a36      	ldr	r2, [pc, #216]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 8002158:	f043 0320 	orr.w	r3, r3, #32
 800215c:	6313      	str	r3, [r2, #48]	@ 0x30
 800215e:	4b34      	ldr	r3, [pc, #208]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	4b30      	ldr	r3, [pc, #192]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	4a2f      	ldr	r2, [pc, #188]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 8002174:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002178:	6313      	str	r3, [r2, #48]	@ 0x30
 800217a:	4b2d      	ldr	r3, [pc, #180]	@ (8002230 <BSP_LCD_MspInit+0x190>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002186:	f641 0358 	movw	r3, #6232	@ 0x1858
 800218a:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800218c:	2302      	movs	r3, #2
 800218e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002194:	2302      	movs	r3, #2
 8002196:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8002198:	230e      	movs	r3, #14
 800219a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800219c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021a0:	4619      	mov	r1, r3
 80021a2:	4824      	ldr	r0, [pc, #144]	@ (8002234 <BSP_LCD_MspInit+0x194>)
 80021a4:	f001 f930 	bl	8003408 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80021a8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80021ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021b2:	4619      	mov	r1, r3
 80021b4:	4820      	ldr	r0, [pc, #128]	@ (8002238 <BSP_LCD_MspInit+0x198>)
 80021b6:	f001 f927 	bl	8003408 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80021ba:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80021c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021c4:	4619      	mov	r1, r3
 80021c6:	481d      	ldr	r0, [pc, #116]	@ (800223c <BSP_LCD_MspInit+0x19c>)
 80021c8:	f001 f91e 	bl	8003408 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80021cc:	2348      	movs	r3, #72	@ 0x48
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80021d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021d4:	4619      	mov	r1, r3
 80021d6:	481a      	ldr	r0, [pc, #104]	@ (8002240 <BSP_LCD_MspInit+0x1a0>)
 80021d8:	f001 f916 	bl	8003408 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80021dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80021e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021e6:	4619      	mov	r1, r3
 80021e8:	4816      	ldr	r0, [pc, #88]	@ (8002244 <BSP_LCD_MspInit+0x1a4>)
 80021ea:	f001 f90d 	bl	8003408 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80021ee:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80021f2:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80021f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021f8:	4619      	mov	r1, r3
 80021fa:	4813      	ldr	r0, [pc, #76]	@ (8002248 <BSP_LCD_MspInit+0x1a8>)
 80021fc:	f001 f904 	bl	8003408 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002200:	2303      	movs	r3, #3
 8002202:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8002204:	2309      	movs	r3, #9
 8002206:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002208:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800220c:	4619      	mov	r1, r3
 800220e:	480a      	ldr	r0, [pc, #40]	@ (8002238 <BSP_LCD_MspInit+0x198>)
 8002210:	f001 f8fa 	bl	8003408 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002214:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002218:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800221a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800221e:	4619      	mov	r1, r3
 8002220:	4809      	ldr	r0, [pc, #36]	@ (8002248 <BSP_LCD_MspInit+0x1a8>)
 8002222:	f001 f8f1 	bl	8003408 <HAL_GPIO_Init>
}
 8002226:	bf00      	nop
 8002228:	3738      	adds	r7, #56	@ 0x38
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
 8002234:	40020000 	.word	0x40020000
 8002238:	40020400 	.word	0x40020400
 800223c:	40020800 	.word	0x40020800
 8002240:	40020c00 	.word	0x40020c00
 8002244:	40021400 	.word	0x40021400
 8002248:	40021800 	.word	0x40021800

0800224c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800224c:	b5b0      	push	{r4, r5, r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	603a      	str	r2, [r7, #0]
 8002256:	80fb      	strh	r3, [r7, #6]
 8002258:	460b      	mov	r3, r1
 800225a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800225c:	4b0c      	ldr	r3, [pc, #48]	@ (8002290 <BSP_LCD_DrawPixel+0x44>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0c      	ldr	r2, [pc, #48]	@ (8002294 <BSP_LCD_DrawPixel+0x48>)
 8002262:	2134      	movs	r1, #52	@ 0x34
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	335c      	adds	r3, #92	@ 0x5c
 800226c:	681c      	ldr	r4, [r3, #0]
 800226e:	88bd      	ldrh	r5, [r7, #4]
 8002270:	f7ff fb0e 	bl	8001890 <BSP_LCD_GetXSize>
 8002274:	4603      	mov	r3, r0
 8002276:	fb03 f205 	mul.w	r2, r3, r5
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4423      	add	r3, r4
 8002282:	461a      	mov	r2, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bdb0      	pop	{r4, r5, r7, pc}
 8002290:	200003f0 	.word	0x200003f0
 8002294:	200002d8 	.word	0x200002d8

08002298 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	603a      	str	r2, [r7, #0]
 80022a2:	80fb      	strh	r3, [r7, #6]
 80022a4:	460b      	mov	r3, r1
 80022a6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	2300      	movs	r3, #0
 80022ae:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80022b4:	4b53      	ldr	r3, [pc, #332]	@ (8002404 <DrawChar+0x16c>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4953      	ldr	r1, [pc, #332]	@ (8002408 <DrawChar+0x170>)
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	3308      	adds	r3, #8
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	88db      	ldrh	r3, [r3, #6]
 80022ca:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80022cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002404 <DrawChar+0x16c>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	494d      	ldr	r1, [pc, #308]	@ (8002408 <DrawChar+0x170>)
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	3308      	adds	r3, #8
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	889b      	ldrh	r3, [r3, #4]
 80022e2:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 80022e4:	8a3b      	ldrh	r3, [r7, #16]
 80022e6:	3307      	adds	r3, #7
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	da00      	bge.n	80022ee <DrawChar+0x56>
 80022ec:	3307      	adds	r3, #7
 80022ee:	10db      	asrs	r3, r3, #3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	8a3b      	ldrh	r3, [r7, #16]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e076      	b.n	80023f2 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8002304:	8a3b      	ldrh	r3, [r7, #16]
 8002306:	3307      	adds	r3, #7
 8002308:	2b00      	cmp	r3, #0
 800230a:	da00      	bge.n	800230e <DrawChar+0x76>
 800230c:	3307      	adds	r3, #7
 800230e:	10db      	asrs	r3, r3, #3
 8002310:	461a      	mov	r2, r3
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	4413      	add	r3, r2
 800231c:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 800231e:	8a3b      	ldrh	r3, [r7, #16]
 8002320:	3307      	adds	r3, #7
 8002322:	2b00      	cmp	r3, #0
 8002324:	da00      	bge.n	8002328 <DrawChar+0x90>
 8002326:	3307      	adds	r3, #7
 8002328:	10db      	asrs	r3, r3, #3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d002      	beq.n	8002334 <DrawChar+0x9c>
 800232e:	2b02      	cmp	r3, #2
 8002330:	d004      	beq.n	800233c <DrawChar+0xa4>
 8002332:	e00c      	b.n	800234e <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	617b      	str	r3, [r7, #20]
        break;
 800233a:	e016      	b.n	800236a <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	3201      	adds	r2, #1
 8002346:	7812      	ldrb	r2, [r2, #0]
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]
        break;
 800234c:	e00d      	b.n	800236a <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	041a      	lsls	r2, r3, #16
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	3301      	adds	r3, #1
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	4313      	orrs	r3, r2
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	3202      	adds	r2, #2
 8002362:	7812      	ldrb	r2, [r2, #0]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
        break;
 8002368:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	e036      	b.n	80023de <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 8002370:	8a3a      	ldrh	r2, [r7, #16]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	1ad2      	subs	r2, r2, r3
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	4413      	add	r3, r2
 800237a:	3b01      	subs	r3, #1
 800237c:	2201      	movs	r2, #1
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	461a      	mov	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	4013      	ands	r3, r2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d012      	beq.n	80023b2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	b29a      	uxth	r2, r3
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	4413      	add	r3, r2
 8002394:	b298      	uxth	r0, r3
 8002396:	4b1b      	ldr	r3, [pc, #108]	@ (8002404 <DrawChar+0x16c>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	491b      	ldr	r1, [pc, #108]	@ (8002408 <DrawChar+0x170>)
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	88bb      	ldrh	r3, [r7, #4]
 80023aa:	4619      	mov	r1, r3
 80023ac:	f7ff ff4e 	bl	800224c <BSP_LCD_DrawPixel>
 80023b0:	e012      	b.n	80023d8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	4413      	add	r3, r2
 80023ba:	b298      	uxth	r0, r3
 80023bc:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <DrawChar+0x16c>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4911      	ldr	r1, [pc, #68]	@ (8002408 <DrawChar+0x170>)
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	3304      	adds	r3, #4
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	88bb      	ldrh	r3, [r7, #4]
 80023d2:	4619      	mov	r1, r3
 80023d4:	f7ff ff3a 	bl	800224c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	3301      	adds	r3, #1
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	8a3b      	ldrh	r3, [r7, #16]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d3c4      	bcc.n	8002370 <DrawChar+0xd8>
      }
    }
    Ypos++;
 80023e6:	88bb      	ldrh	r3, [r7, #4]
 80023e8:	3301      	adds	r3, #1
 80023ea:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	3301      	adds	r3, #1
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	8a7b      	ldrh	r3, [r7, #18]
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d384      	bcc.n	8002304 <DrawChar+0x6c>
  }
}
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	3720      	adds	r7, #32
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200003f0 	.word	0x200003f0
 8002408:	200003f4 	.word	0x200003f4

0800240c <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800241a:	4b16      	ldr	r3, [pc, #88]	@ (8002474 <FillBuffer+0x68>)
 800241c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002420:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002422:	4b14      	ldr	r3, [pc, #80]	@ (8002474 <FillBuffer+0x68>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8002428:	4a12      	ldr	r2, [pc, #72]	@ (8002474 <FillBuffer+0x68>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 800242e:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <FillBuffer+0x68>)
 8002430:	4a11      	ldr	r2, [pc, #68]	@ (8002478 <FillBuffer+0x6c>)
 8002432:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8002434:	480f      	ldr	r0, [pc, #60]	@ (8002474 <FillBuffer+0x68>)
 8002436:	f000 fd51 	bl	8002edc <HAL_DMA2D_Init>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d115      	bne.n	800246c <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8002440:	68f9      	ldr	r1, [r7, #12]
 8002442:	480c      	ldr	r0, [pc, #48]	@ (8002474 <FillBuffer+0x68>)
 8002444:	f000 feb2 	bl	80031ac <HAL_DMA2D_ConfigLayer>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10e      	bne.n	800246c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69f9      	ldr	r1, [r7, #28]
 8002458:	4806      	ldr	r0, [pc, #24]	@ (8002474 <FillBuffer+0x68>)
 800245a:	f000 fd92 	bl	8002f82 <HAL_DMA2D_Start>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d103      	bne.n	800246c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002464:	210a      	movs	r1, #10
 8002466:	4803      	ldr	r0, [pc, #12]	@ (8002474 <FillBuffer+0x68>)
 8002468:	f000 fdb6 	bl	8002fd8 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 800246c:	bf00      	nop
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000380 	.word	0x20000380
 8002478:	4002b000 	.word	0x4002b000

0800247c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002480:	4b29      	ldr	r3, [pc, #164]	@ (8002528 <BSP_SDRAM_Init+0xac>)
 8002482:	4a2a      	ldr	r2, [pc, #168]	@ (800252c <BSP_SDRAM_Init+0xb0>)
 8002484:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002486:	4b2a      	ldr	r3, [pc, #168]	@ (8002530 <BSP_SDRAM_Init+0xb4>)
 8002488:	2202      	movs	r2, #2
 800248a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800248c:	4b28      	ldr	r3, [pc, #160]	@ (8002530 <BSP_SDRAM_Init+0xb4>)
 800248e:	2207      	movs	r2, #7
 8002490:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002492:	4b27      	ldr	r3, [pc, #156]	@ (8002530 <BSP_SDRAM_Init+0xb4>)
 8002494:	2204      	movs	r2, #4
 8002496:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002498:	4b25      	ldr	r3, [pc, #148]	@ (8002530 <BSP_SDRAM_Init+0xb4>)
 800249a:	2207      	movs	r2, #7
 800249c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800249e:	4b24      	ldr	r3, [pc, #144]	@ (8002530 <BSP_SDRAM_Init+0xb4>)
 80024a0:	2202      	movs	r2, #2
 80024a2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80024a4:	4b22      	ldr	r3, [pc, #136]	@ (8002530 <BSP_SDRAM_Init+0xb4>)
 80024a6:	2202      	movs	r2, #2
 80024a8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80024aa:	4b21      	ldr	r3, [pc, #132]	@ (8002530 <BSP_SDRAM_Init+0xb4>)
 80024ac:	2202      	movs	r2, #2
 80024ae:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80024b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002528 <BSP_SDRAM_Init+0xac>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80024b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002528 <BSP_SDRAM_Init+0xac>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80024bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <BSP_SDRAM_Init+0xac>)
 80024be:	2204      	movs	r2, #4
 80024c0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80024c2:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <BSP_SDRAM_Init+0xac>)
 80024c4:	2210      	movs	r2, #16
 80024c6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80024c8:	4b17      	ldr	r3, [pc, #92]	@ (8002528 <BSP_SDRAM_Init+0xac>)
 80024ca:	2240      	movs	r2, #64	@ 0x40
 80024cc:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80024ce:	4b16      	ldr	r3, [pc, #88]	@ (8002528 <BSP_SDRAM_Init+0xac>)
 80024d0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80024d4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80024d6:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <BSP_SDRAM_Init+0xac>)
 80024d8:	2200      	movs	r2, #0
 80024da:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80024dc:	4b12      	ldr	r3, [pc, #72]	@ (8002528 <BSP_SDRAM_Init+0xac>)
 80024de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024e2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80024e4:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <BSP_SDRAM_Init+0xac>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80024ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002528 <BSP_SDRAM_Init+0xac>)
 80024ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80024f2:	2100      	movs	r1, #0
 80024f4:	480c      	ldr	r0, [pc, #48]	@ (8002528 <BSP_SDRAM_Init+0xac>)
 80024f6:	f000 f87f 	bl	80025f8 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80024fa:	490d      	ldr	r1, [pc, #52]	@ (8002530 <BSP_SDRAM_Init+0xb4>)
 80024fc:	480a      	ldr	r0, [pc, #40]	@ (8002528 <BSP_SDRAM_Init+0xac>)
 80024fe:	f003 fca5 	bl	8005e4c <HAL_SDRAM_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002508:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <BSP_SDRAM_Init+0xb8>)
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
 800250e:	e002      	b.n	8002516 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002510:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <BSP_SDRAM_Init+0xb8>)
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002516:	f240 506a 	movw	r0, #1386	@ 0x56a
 800251a:	f000 f80d 	bl	8002538 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 800251e:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <BSP_SDRAM_Init+0xb8>)
 8002520:	781b      	ldrb	r3, [r3, #0]
}
 8002522:	4618      	mov	r0, r3
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000410 	.word	0x20000410
 800252c:	a0000140 	.word	0xa0000140
 8002530:	20000444 	.word	0x20000444
 8002534:	2000008c 	.word	0x2000008c

08002538 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002544:	4b2a      	ldr	r3, [pc, #168]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800254a:	4b29      	ldr	r3, [pc, #164]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800254c:	2208      	movs	r2, #8
 800254e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002550:	4b27      	ldr	r3, [pc, #156]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002552:	2201      	movs	r2, #1
 8002554:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002556:	4b26      	ldr	r3, [pc, #152]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002558:	2200      	movs	r2, #0
 800255a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800255c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002560:	4923      	ldr	r1, [pc, #140]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002562:	4824      	ldr	r0, [pc, #144]	@ (80025f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002564:	f003 fcb0 	bl	8005ec8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002568:	2001      	movs	r0, #1
 800256a:	f000 f9c3 	bl	80028f4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800256e:	4b20      	ldr	r3, [pc, #128]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002570:	2202      	movs	r2, #2
 8002572:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002574:	4b1e      	ldr	r3, [pc, #120]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002576:	2208      	movs	r2, #8
 8002578:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800257a:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800257c:	2201      	movs	r2, #1
 800257e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002580:	4b1b      	ldr	r3, [pc, #108]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002582:	2200      	movs	r2, #0
 8002584:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002586:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800258a:	4919      	ldr	r1, [pc, #100]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800258c:	4819      	ldr	r0, [pc, #100]	@ (80025f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800258e:	f003 fc9b 	bl	8005ec8 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002592:	4b17      	ldr	r3, [pc, #92]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002594:	2203      	movs	r2, #3
 8002596:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002598:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800259a:	2208      	movs	r2, #8
 800259c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800259e:	4b14      	ldr	r3, [pc, #80]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025a0:	2204      	movs	r2, #4
 80025a2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80025a4:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80025aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025ae:	4910      	ldr	r1, [pc, #64]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025b0:	4810      	ldr	r0, [pc, #64]	@ (80025f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80025b2:	f003 fc89 	bl	8005ec8 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80025b6:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80025ba:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80025bc:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025be:	2204      	movs	r2, #4
 80025c0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80025c2:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025c4:	2208      	movs	r2, #8
 80025c6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80025c8:	4b09      	ldr	r3, [pc, #36]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4a07      	ldr	r2, [pc, #28]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025d2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80025d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025d8:	4905      	ldr	r1, [pc, #20]	@ (80025f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025da:	4806      	ldr	r0, [pc, #24]	@ (80025f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80025dc:	f003 fc74 	bl	8005ec8 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4804      	ldr	r0, [pc, #16]	@ (80025f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80025e4:	f003 fca5 	bl	8005f32 <HAL_SDRAM_ProgramRefreshRate>
}
 80025e8:	bf00      	nop
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000460 	.word	0x20000460
 80025f4:	20000410 	.word	0x20000410

080025f8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b090      	sub	sp, #64	@ 0x40
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80ec 	beq.w	80027e2 <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800260e:	4b77      	ldr	r3, [pc, #476]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 8002610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002612:	4a76      	ldr	r2, [pc, #472]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6393      	str	r3, [r2, #56]	@ 0x38
 800261a:	4b74      	ldr	r3, [pc, #464]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 800261c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002624:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	@ 0x24
 800262a:	4b70      	ldr	r3, [pc, #448]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	4a6f      	ldr	r2, [pc, #444]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 8002630:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002634:	6313      	str	r3, [r2, #48]	@ 0x30
 8002636:	4b6d      	ldr	r3, [pc, #436]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
 8002646:	4b69      	ldr	r3, [pc, #420]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	4a68      	ldr	r2, [pc, #416]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	6313      	str	r3, [r2, #48]	@ 0x30
 8002652:	4b66      	ldr	r3, [pc, #408]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	623b      	str	r3, [r7, #32]
 800265c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	4b62      	ldr	r3, [pc, #392]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	4a61      	ldr	r2, [pc, #388]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	6313      	str	r3, [r2, #48]	@ 0x30
 800266e:	4b5f      	ldr	r3, [pc, #380]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	4b5b      	ldr	r3, [pc, #364]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	4a5a      	ldr	r2, [pc, #360]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 8002684:	f043 0308 	orr.w	r3, r3, #8
 8002688:	6313      	str	r3, [r2, #48]	@ 0x30
 800268a:	4b58      	ldr	r3, [pc, #352]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	4b54      	ldr	r3, [pc, #336]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	4a53      	ldr	r2, [pc, #332]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 80026a0:	f043 0310 	orr.w	r3, r3, #16
 80026a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a6:	4b51      	ldr	r3, [pc, #324]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	4b4d      	ldr	r3, [pc, #308]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	4a4c      	ldr	r2, [pc, #304]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 80026bc:	f043 0320 	orr.w	r3, r3, #32
 80026c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c2:	4b4a      	ldr	r3, [pc, #296]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	4b46      	ldr	r3, [pc, #280]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	4a45      	ldr	r2, [pc, #276]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 80026d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026de:	4b43      	ldr	r3, [pc, #268]	@ (80027ec <BSP_SDRAM_MspInit+0x1f4>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80026ee:	2302      	movs	r3, #2
 80026f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80026f6:	230c      	movs	r3, #12
 80026f8:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80026fa:	2360      	movs	r3, #96	@ 0x60
 80026fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80026fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002702:	4619      	mov	r1, r3
 8002704:	483a      	ldr	r0, [pc, #232]	@ (80027f0 <BSP_SDRAM_MspInit+0x1f8>)
 8002706:	f000 fe7f 	bl	8003408 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 800270a:	2301      	movs	r3, #1
 800270c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800270e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002712:	4619      	mov	r1, r3
 8002714:	4837      	ldr	r0, [pc, #220]	@ (80027f4 <BSP_SDRAM_MspInit+0x1fc>)
 8002716:	f000 fe77 	bl	8003408 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800271a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800271e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002720:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002724:	4619      	mov	r1, r3
 8002726:	4834      	ldr	r0, [pc, #208]	@ (80027f8 <BSP_SDRAM_MspInit+0x200>)
 8002728:	f000 fe6e 	bl	8003408 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800272c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002730:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002732:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002736:	4619      	mov	r1, r3
 8002738:	4830      	ldr	r0, [pc, #192]	@ (80027fc <BSP_SDRAM_MspInit+0x204>)
 800273a:	f000 fe65 	bl	8003408 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 800273e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002742:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002744:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002748:	4619      	mov	r1, r3
 800274a:	482d      	ldr	r0, [pc, #180]	@ (8002800 <BSP_SDRAM_MspInit+0x208>)
 800274c:	f000 fe5c 	bl	8003408 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002750:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002754:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002756:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800275a:	4619      	mov	r1, r3
 800275c:	4829      	ldr	r0, [pc, #164]	@ (8002804 <BSP_SDRAM_MspInit+0x20c>)
 800275e:	f000 fe53 	bl	8003408 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002762:	4b29      	ldr	r3, [pc, #164]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 8002764:	2200      	movs	r2, #0
 8002766:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002768:	4b27      	ldr	r3, [pc, #156]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 800276a:	2280      	movs	r2, #128	@ 0x80
 800276c:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800276e:	4b26      	ldr	r3, [pc, #152]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 8002770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002774:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002776:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 8002778:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800277c:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800277e:	4b22      	ldr	r3, [pc, #136]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 8002780:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002784:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002786:	4b20      	ldr	r3, [pc, #128]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 8002788:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800278c:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 800278e:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 8002790:	2200      	movs	r2, #0
 8002792:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002794:	4b1c      	ldr	r3, [pc, #112]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 8002796:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800279a:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800279c:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 800279e:	2200      	movs	r2, #0
 80027a0:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80027a2:	4b19      	ldr	r3, [pc, #100]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 80027a4:	2203      	movs	r2, #3
 80027a6:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80027a8:	4b17      	ldr	r3, [pc, #92]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80027ae:	4b16      	ldr	r3, [pc, #88]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80027b4:	4b14      	ldr	r3, [pc, #80]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 80027b6:	4a15      	ldr	r2, [pc, #84]	@ (800280c <BSP_SDRAM_MspInit+0x214>)
 80027b8:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a12      	ldr	r2, [pc, #72]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 80027be:	631a      	str	r2, [r3, #48]	@ 0x30
 80027c0:	4a11      	ldr	r2, [pc, #68]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 80027c6:	4810      	ldr	r0, [pc, #64]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 80027c8:	f000 fa78 	bl	8002cbc <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 80027cc:	480e      	ldr	r0, [pc, #56]	@ (8002808 <BSP_SDRAM_MspInit+0x210>)
 80027ce:	f000 f9c7 	bl	8002b60 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	210f      	movs	r1, #15
 80027d6:	2038      	movs	r0, #56	@ 0x38
 80027d8:	f000 f98b 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80027dc:	2038      	movs	r0, #56	@ 0x38
 80027de:	f000 f9a4 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80027e2:	bf00      	nop
 80027e4:	3740      	adds	r7, #64	@ 0x40
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40020400 	.word	0x40020400
 80027f4:	40020800 	.word	0x40020800
 80027f8:	40020c00 	.word	0x40020c00
 80027fc:	40021000 	.word	0x40021000
 8002800:	40021400 	.word	0x40021400
 8002804:	40021800 	.word	0x40021800
 8002808:	20000470 	.word	0x20000470
 800280c:	40026410 	.word	0x40026410

08002810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002814:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <HAL_Init+0x40>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0d      	ldr	r2, [pc, #52]	@ (8002850 <HAL_Init+0x40>)
 800281a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800281e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002820:	4b0b      	ldr	r3, [pc, #44]	@ (8002850 <HAL_Init+0x40>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0a      	ldr	r2, [pc, #40]	@ (8002850 <HAL_Init+0x40>)
 8002826:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800282a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800282c:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <HAL_Init+0x40>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a07      	ldr	r2, [pc, #28]	@ (8002850 <HAL_Init+0x40>)
 8002832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002838:	2003      	movs	r0, #3
 800283a:	f000 f94f 	bl	8002adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800283e:	200f      	movs	r0, #15
 8002840:	f000 f808 	bl	8002854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002844:	f7fe f848 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023c00 	.word	0x40023c00

08002854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800285c:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <HAL_InitTick+0x54>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <HAL_InitTick+0x58>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	4619      	mov	r1, r3
 8002866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800286a:	fbb3 f3f1 	udiv	r3, r3, r1
 800286e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f967 	bl	8002b46 <HAL_SYSTICK_Config>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e00e      	b.n	80028a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b0f      	cmp	r3, #15
 8002886:	d80a      	bhi.n	800289e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002888:	2200      	movs	r2, #0
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	f000 f92f 	bl	8002af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002894:	4a06      	ldr	r2, [pc, #24]	@ (80028b0 <HAL_InitTick+0x5c>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e000      	b.n	80028a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000010 	.word	0x20000010
 80028ac:	20000094 	.word	0x20000094
 80028b0:	20000090 	.word	0x20000090

080028b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028b8:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_IncTick+0x20>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <HAL_IncTick+0x24>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	4a04      	ldr	r2, [pc, #16]	@ (80028d8 <HAL_IncTick+0x24>)
 80028c6:	6013      	str	r3, [r2, #0]
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000094 	.word	0x20000094
 80028d8:	200004d0 	.word	0x200004d0

080028dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return uwTick;
 80028e0:	4b03      	ldr	r3, [pc, #12]	@ (80028f0 <HAL_GetTick+0x14>)
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	200004d0 	.word	0x200004d0

080028f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028fc:	f7ff ffee 	bl	80028dc <HAL_GetTick>
 8002900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d005      	beq.n	800291a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800290e:	4b0a      	ldr	r3, [pc, #40]	@ (8002938 <HAL_Delay+0x44>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800291a:	bf00      	nop
 800291c:	f7ff ffde 	bl	80028dc <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	429a      	cmp	r2, r3
 800292a:	d8f7      	bhi.n	800291c <HAL_Delay+0x28>
  {
  }
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000094 	.word	0x20000094

0800293c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002958:	4013      	ands	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800296c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296e:	4a04      	ldr	r2, [pc, #16]	@ (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	60d3      	str	r3, [r2, #12]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002988:	4b04      	ldr	r3, [pc, #16]	@ (800299c <__NVIC_GetPriorityGrouping+0x18>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	0a1b      	lsrs	r3, r3, #8
 800298e:	f003 0307 	and.w	r3, r3, #7
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	db0b      	blt.n	80029ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	4907      	ldr	r1, [pc, #28]	@ (80029d8 <__NVIC_EnableIRQ+0x38>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2001      	movs	r0, #1
 80029c2:	fa00 f202 	lsl.w	r2, r0, r2
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000e100 	.word	0xe000e100

080029dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	db0a      	blt.n	8002a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	490c      	ldr	r1, [pc, #48]	@ (8002a28 <__NVIC_SetPriority+0x4c>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	440b      	add	r3, r1
 8002a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a04:	e00a      	b.n	8002a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4908      	ldr	r1, [pc, #32]	@ (8002a2c <__NVIC_SetPriority+0x50>)
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	3b04      	subs	r3, #4
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	440b      	add	r3, r1
 8002a1a:	761a      	strb	r2, [r3, #24]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000e100 	.word	0xe000e100
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	@ 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f1c3 0307 	rsb	r3, r3, #7
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	bf28      	it	cs
 8002a4e:	2304      	movcs	r3, #4
 8002a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d902      	bls.n	8002a60 <NVIC_EncodePriority+0x30>
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3b03      	subs	r3, #3
 8002a5e:	e000      	b.n	8002a62 <NVIC_EncodePriority+0x32>
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	401a      	ands	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a78:	f04f 31ff 	mov.w	r1, #4294967295
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43d9      	mvns	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a88:	4313      	orrs	r3, r2
         );
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3724      	adds	r7, #36	@ 0x24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aa8:	d301      	bcc.n	8002aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e00f      	b.n	8002ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aae:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad8 <SysTick_Config+0x40>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ab6:	210f      	movs	r1, #15
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8002abc:	f7ff ff8e 	bl	80029dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <SysTick_Config+0x40>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac6:	4b04      	ldr	r3, [pc, #16]	@ (8002ad8 <SysTick_Config+0x40>)
 8002ac8:	2207      	movs	r2, #7
 8002aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	e000e010 	.word	0xe000e010

08002adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ff29 	bl	800293c <__NVIC_SetPriorityGrouping>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b086      	sub	sp, #24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b04:	f7ff ff3e 	bl	8002984 <__NVIC_GetPriorityGrouping>
 8002b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	6978      	ldr	r0, [r7, #20]
 8002b10:	f7ff ff8e 	bl	8002a30 <NVIC_EncodePriority>
 8002b14:	4602      	mov	r2, r0
 8002b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff5d 	bl	80029dc <__NVIC_SetPriority>
}
 8002b22:	bf00      	nop
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4603      	mov	r3, r0
 8002b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff31 	bl	80029a0 <__NVIC_EnableIRQ>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ffa2 	bl	8002a98 <SysTick_Config>
 8002b54:	4603      	mov	r3, r0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b6c:	f7ff feb6 	bl	80028dc <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e099      	b.n	8002cb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b9c:	e00f      	b.n	8002bbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b9e:	f7ff fe9d 	bl	80028dc <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	d908      	bls.n	8002bbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e078      	b.n	8002cb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1e8      	bne.n	8002b9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4b38      	ldr	r3, [pc, #224]	@ (8002cb8 <HAL_DMA_Init+0x158>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d107      	bne.n	8002c28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c20:	4313      	orrs	r3, r2
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f023 0307 	bic.w	r3, r3, #7
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d117      	bne.n	8002c82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00e      	beq.n	8002c82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f8bd 	bl	8002de4 <DMA_CheckFifoParam>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2240      	movs	r2, #64	@ 0x40
 8002c74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e016      	b.n	8002cb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f874 	bl	8002d78 <DMA_CalcBaseAndBitshift>
 8002c90:	4603      	mov	r3, r0
 8002c92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c98:	223f      	movs	r2, #63	@ 0x3f
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	f010803f 	.word	0xf010803f

08002cbc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e050      	b.n	8002d70 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d101      	bne.n	8002cde <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e048      	b.n	8002d70 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2200      	movs	r2, #0
 8002d14:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2221      	movs	r2, #33	@ 0x21
 8002d1c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f82a 	bl	8002d78 <DMA_CalcBaseAndBitshift>
 8002d24:	4603      	mov	r3, r0
 8002d26:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d50:	223f      	movs	r2, #63	@ 0x3f
 8002d52:	409a      	lsls	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	3b10      	subs	r3, #16
 8002d88:	4a14      	ldr	r2, [pc, #80]	@ (8002ddc <DMA_CalcBaseAndBitshift+0x64>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d92:	4a13      	ldr	r2, [pc, #76]	@ (8002de0 <DMA_CalcBaseAndBitshift+0x68>)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d909      	bls.n	8002dba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dae:	f023 0303 	bic.w	r3, r3, #3
 8002db2:	1d1a      	adds	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002db8:	e007      	b.n	8002dca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	aaaaaaab 	.word	0xaaaaaaab
 8002de0:	0800d2f8 	.word	0x0800d2f8

08002de4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d11f      	bne.n	8002e3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d856      	bhi.n	8002eb2 <DMA_CheckFifoParam+0xce>
 8002e04:	a201      	add	r2, pc, #4	@ (adr r2, 8002e0c <DMA_CheckFifoParam+0x28>)
 8002e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0a:	bf00      	nop
 8002e0c:	08002e1d 	.word	0x08002e1d
 8002e10:	08002e2f 	.word	0x08002e2f
 8002e14:	08002e1d 	.word	0x08002e1d
 8002e18:	08002eb3 	.word	0x08002eb3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d046      	beq.n	8002eb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2c:	e043      	b.n	8002eb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e36:	d140      	bne.n	8002eba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e3c:	e03d      	b.n	8002eba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e46:	d121      	bne.n	8002e8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d837      	bhi.n	8002ebe <DMA_CheckFifoParam+0xda>
 8002e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e54 <DMA_CheckFifoParam+0x70>)
 8002e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e54:	08002e65 	.word	0x08002e65
 8002e58:	08002e6b 	.word	0x08002e6b
 8002e5c:	08002e65 	.word	0x08002e65
 8002e60:	08002e7d 	.word	0x08002e7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
      break;
 8002e68:	e030      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d025      	beq.n	8002ec2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7a:	e022      	b.n	8002ec2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e80:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e84:	d11f      	bne.n	8002ec6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e8a:	e01c      	b.n	8002ec6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d903      	bls.n	8002e9a <DMA_CheckFifoParam+0xb6>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d003      	beq.n	8002ea0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e98:	e018      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9e:	e015      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00e      	beq.n	8002eca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb0:	e00b      	b.n	8002eca <DMA_CheckFifoParam+0xe6>
      break;
 8002eb2:	bf00      	nop
 8002eb4:	e00a      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;
 8002eb6:	bf00      	nop
 8002eb8:	e008      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e006      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e004      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;
 8002ec2:	bf00      	nop
 8002ec4:	e002      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;   
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <DMA_CheckFifoParam+0xe8>
      break;
 8002eca:	bf00      	nop
    }
  } 
  
  return status; 
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop

08002edc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e03b      	b.n	8002f66 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f833 	bl	8002f6e <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f2c:	f023 0107 	bic.w	r1, r3, #7
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f46:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68d1      	ldr	r1, [r2, #12]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	430b      	orrs	r3, r1
 8002f54:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af02      	add	r7, sp, #8
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_DMA2D_Start+0x1c>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e018      	b.n	8002fd0 <HAL_DMA2D_Start+0x4e>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f989 	bl	80032d0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d056      	beq.n	80030a2 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ff4:	f7ff fc72 	bl	80028dc <HAL_GetTick>
 8002ff8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002ffa:	e04b      	b.n	8003094 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800300a:	2b00      	cmp	r3, #0
 800300c:	d023      	beq.n	8003056 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301c:	f043 0202 	orr.w	r2, r3, #2
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003032:	f043 0201 	orr.w	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2221      	movs	r2, #33	@ 0x21
 8003040:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2204      	movs	r2, #4
 8003046:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e0a5      	b.n	80031a2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d01a      	beq.n	8003094 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800305e:	f7ff fc3d 	bl	80028dc <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d302      	bcc.n	8003074 <HAL_DMA2D_PollForTransfer+0x9c>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10f      	bne.n	8003094 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003078:	f043 0220 	orr.w	r2, r3, #32
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2203      	movs	r2, #3
 8003084:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e086      	b.n	80031a2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0ac      	beq.n	8002ffc <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d061      	beq.n	8003188 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80030c4:	f7ff fc0a 	bl	80028dc <HAL_GetTick>
 80030c8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80030ca:	e056      	b.n	800317a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d02e      	beq.n	800313c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ec:	f043 0204 	orr.w	r2, r3, #4
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003102:	f043 0202 	orr.w	r2, r3, #2
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2229      	movs	r2, #41	@ 0x29
 8003126:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2204      	movs	r2, #4
 800312c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e032      	b.n	80031a2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d01a      	beq.n	800317a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003144:	f7ff fbca 	bl	80028dc <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d302      	bcc.n	800315a <HAL_DMA2D_PollForTransfer+0x182>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315e:	f043 0220 	orr.w	r2, r3, #32
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2203      	movs	r2, #3
 800316a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e013      	b.n	80031a2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0a1      	beq.n	80030cc <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2212      	movs	r2, #18
 800318e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_DMA2D_ConfigLayer+0x20>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e079      	b.n	80032c0 <HAL_DMA2D_ConfigLayer+0x114>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	3318      	adds	r3, #24
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	041b      	lsls	r3, r3, #16
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80031f6:	4b35      	ldr	r3, [pc, #212]	@ (80032cc <HAL_DMA2D_ConfigLayer+0x120>)
 80031f8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b0a      	cmp	r3, #10
 8003200:	d003      	beq.n	800320a <HAL_DMA2D_ConfigLayer+0x5e>
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b09      	cmp	r3, #9
 8003208:	d107      	bne.n	800321a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	4313      	orrs	r3, r2
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	e005      	b.n	8003226 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	061b      	lsls	r3, r3, #24
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d120      	bne.n	800326e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	43db      	mvns	r3, r3
 8003236:	ea02 0103 	and.w	r1, r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	430a      	orrs	r2, r1
 8003242:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b0a      	cmp	r3, #10
 8003254:	d003      	beq.n	800325e <HAL_DMA2D_ConfigLayer+0xb2>
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b09      	cmp	r3, #9
 800325c:	d127      	bne.n	80032ae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800326a:	629a      	str	r2, [r3, #40]	@ 0x28
 800326c:	e01f      	b.n	80032ae <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	43db      	mvns	r3, r3
 8003278:	ea02 0103 	and.w	r1, r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	430a      	orrs	r2, r1
 8003284:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b0a      	cmp	r3, #10
 8003296:	d003      	beq.n	80032a0 <HAL_DMA2D_ConfigLayer+0xf4>
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b09      	cmp	r3, #9
 800329e:	d106      	bne.n	80032ae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80032ac:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	371c      	adds	r7, #28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	ff03000f 	.word	0xff03000f

080032d0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b08b      	sub	sp, #44	@ 0x2c
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e4:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	041a      	lsls	r2, r3, #16
 80032ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ee:	431a      	orrs	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003308:	d174      	bne.n	80033f4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003310:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003318:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003320:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d108      	bne.n	8003342 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	431a      	orrs	r2, r3
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	4313      	orrs	r3, r2
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003340:	e053      	b.n	80033ea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d106      	bne.n	8003358 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	4313      	orrs	r3, r2
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	627b      	str	r3, [r7, #36]	@ 0x24
 8003356:	e048      	b.n	80033ea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d111      	bne.n	8003384 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	0cdb      	lsrs	r3, r3, #19
 8003364:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	0a9b      	lsrs	r3, r3, #10
 800336a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	08db      	lsrs	r3, r3, #3
 8003370:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	02db      	lsls	r3, r3, #11
 800337a:	4313      	orrs	r3, r2
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24
 8003382:	e032      	b.n	80033ea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d117      	bne.n	80033bc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	0fdb      	lsrs	r3, r3, #31
 8003390:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	0cdb      	lsrs	r3, r3, #19
 8003396:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	0adb      	lsrs	r3, r3, #11
 800339c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	08db      	lsrs	r3, r3, #3
 80033a2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	029b      	lsls	r3, r3, #10
 80033ac:	431a      	orrs	r2, r3
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	03db      	lsls	r3, r3, #15
 80033b2:	4313      	orrs	r3, r2
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ba:	e016      	b.n	80033ea <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	0f1b      	lsrs	r3, r3, #28
 80033c0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	0d1b      	lsrs	r3, r3, #20
 80033c6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	0b1b      	lsrs	r3, r3, #12
 80033cc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	011a      	lsls	r2, r3, #4
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	431a      	orrs	r2, r3
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	031b      	lsls	r3, r3, #12
 80033e2:	4313      	orrs	r3, r2
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f0:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80033f2:	e003      	b.n	80033fc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	60da      	str	r2, [r3, #12]
}
 80033fc:	bf00      	nop
 80033fe:	372c      	adds	r7, #44	@ 0x2c
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	@ 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	e177      	b.n	8003714 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003424:	2201      	movs	r2, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	429a      	cmp	r2, r3
 800343e:	f040 8166 	bne.w	800370e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d005      	beq.n	800345a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003456:	2b02      	cmp	r3, #2
 8003458:	d130      	bne.n	80034bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2203      	movs	r2, #3
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003490:	2201      	movs	r2, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 0201 	and.w	r2, r3, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d017      	beq.n	80034f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	2203      	movs	r2, #3
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d123      	bne.n	800354c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	08da      	lsrs	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3208      	adds	r2, #8
 800350c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	220f      	movs	r2, #15
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	08da      	lsrs	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3208      	adds	r2, #8
 8003546:	69b9      	ldr	r1, [r7, #24]
 8003548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	2203      	movs	r2, #3
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0203 	and.w	r2, r3, #3
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80c0 	beq.w	800370e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b66      	ldr	r3, [pc, #408]	@ (800372c <HAL_GPIO_Init+0x324>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	4a65      	ldr	r2, [pc, #404]	@ (800372c <HAL_GPIO_Init+0x324>)
 8003598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800359c:	6453      	str	r3, [r2, #68]	@ 0x44
 800359e:	4b63      	ldr	r3, [pc, #396]	@ (800372c <HAL_GPIO_Init+0x324>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035aa:	4a61      	ldr	r2, [pc, #388]	@ (8003730 <HAL_GPIO_Init+0x328>)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	3302      	adds	r3, #2
 80035b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	220f      	movs	r2, #15
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a58      	ldr	r2, [pc, #352]	@ (8003734 <HAL_GPIO_Init+0x32c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d037      	beq.n	8003646 <HAL_GPIO_Init+0x23e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a57      	ldr	r2, [pc, #348]	@ (8003738 <HAL_GPIO_Init+0x330>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d031      	beq.n	8003642 <HAL_GPIO_Init+0x23a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a56      	ldr	r2, [pc, #344]	@ (800373c <HAL_GPIO_Init+0x334>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d02b      	beq.n	800363e <HAL_GPIO_Init+0x236>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a55      	ldr	r2, [pc, #340]	@ (8003740 <HAL_GPIO_Init+0x338>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d025      	beq.n	800363a <HAL_GPIO_Init+0x232>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a54      	ldr	r2, [pc, #336]	@ (8003744 <HAL_GPIO_Init+0x33c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d01f      	beq.n	8003636 <HAL_GPIO_Init+0x22e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a53      	ldr	r2, [pc, #332]	@ (8003748 <HAL_GPIO_Init+0x340>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d019      	beq.n	8003632 <HAL_GPIO_Init+0x22a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a52      	ldr	r2, [pc, #328]	@ (800374c <HAL_GPIO_Init+0x344>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <HAL_GPIO_Init+0x226>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a51      	ldr	r2, [pc, #324]	@ (8003750 <HAL_GPIO_Init+0x348>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00d      	beq.n	800362a <HAL_GPIO_Init+0x222>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a50      	ldr	r2, [pc, #320]	@ (8003754 <HAL_GPIO_Init+0x34c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <HAL_GPIO_Init+0x21e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a4f      	ldr	r2, [pc, #316]	@ (8003758 <HAL_GPIO_Init+0x350>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_GPIO_Init+0x21a>
 800361e:	2309      	movs	r3, #9
 8003620:	e012      	b.n	8003648 <HAL_GPIO_Init+0x240>
 8003622:	230a      	movs	r3, #10
 8003624:	e010      	b.n	8003648 <HAL_GPIO_Init+0x240>
 8003626:	2308      	movs	r3, #8
 8003628:	e00e      	b.n	8003648 <HAL_GPIO_Init+0x240>
 800362a:	2307      	movs	r3, #7
 800362c:	e00c      	b.n	8003648 <HAL_GPIO_Init+0x240>
 800362e:	2306      	movs	r3, #6
 8003630:	e00a      	b.n	8003648 <HAL_GPIO_Init+0x240>
 8003632:	2305      	movs	r3, #5
 8003634:	e008      	b.n	8003648 <HAL_GPIO_Init+0x240>
 8003636:	2304      	movs	r3, #4
 8003638:	e006      	b.n	8003648 <HAL_GPIO_Init+0x240>
 800363a:	2303      	movs	r3, #3
 800363c:	e004      	b.n	8003648 <HAL_GPIO_Init+0x240>
 800363e:	2302      	movs	r3, #2
 8003640:	e002      	b.n	8003648 <HAL_GPIO_Init+0x240>
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <HAL_GPIO_Init+0x240>
 8003646:	2300      	movs	r3, #0
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	f002 0203 	and.w	r2, r2, #3
 800364e:	0092      	lsls	r2, r2, #2
 8003650:	4093      	lsls	r3, r2
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4313      	orrs	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003658:	4935      	ldr	r1, [pc, #212]	@ (8003730 <HAL_GPIO_Init+0x328>)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	089b      	lsrs	r3, r3, #2
 800365e:	3302      	adds	r3, #2
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003666:	4b3d      	ldr	r3, [pc, #244]	@ (800375c <HAL_GPIO_Init+0x354>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800368a:	4a34      	ldr	r2, [pc, #208]	@ (800375c <HAL_GPIO_Init+0x354>)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003690:	4b32      	ldr	r3, [pc, #200]	@ (800375c <HAL_GPIO_Init+0x354>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036b4:	4a29      	ldr	r2, [pc, #164]	@ (800375c <HAL_GPIO_Init+0x354>)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036ba:	4b28      	ldr	r3, [pc, #160]	@ (800375c <HAL_GPIO_Init+0x354>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036de:	4a1f      	ldr	r2, [pc, #124]	@ (800375c <HAL_GPIO_Init+0x354>)
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036e4:	4b1d      	ldr	r3, [pc, #116]	@ (800375c <HAL_GPIO_Init+0x354>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4013      	ands	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003708:	4a14      	ldr	r2, [pc, #80]	@ (800375c <HAL_GPIO_Init+0x354>)
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3301      	adds	r3, #1
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	2b0f      	cmp	r3, #15
 8003718:	f67f ae84 	bls.w	8003424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	3724      	adds	r7, #36	@ 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800
 8003730:	40013800 	.word	0x40013800
 8003734:	40020000 	.word	0x40020000
 8003738:	40020400 	.word	0x40020400
 800373c:	40020800 	.word	0x40020800
 8003740:	40020c00 	.word	0x40020c00
 8003744:	40021000 	.word	0x40021000
 8003748:	40021400 	.word	0x40021400
 800374c:	40021800 	.word	0x40021800
 8003750:	40021c00 	.word	0x40021c00
 8003754:	40022000 	.word	0x40022000
 8003758:	40022400 	.word	0x40022400
 800375c:	40013c00 	.word	0x40013c00

08003760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
 800376c:	4613      	mov	r3, r2
 800376e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003770:	787b      	ldrb	r3, [r7, #1]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003776:	887a      	ldrh	r2, [r7, #2]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800377c:	e003      	b.n	8003786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800377e:	887b      	ldrh	r3, [r7, #2]
 8003780:	041a      	lsls	r2, r3, #16
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	619a      	str	r2, [r3, #24]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e0bf      	b.n	8003926 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8ba 	bl	8003934 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80037d6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6999      	ldr	r1, [r3, #24]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037ec:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6899      	ldr	r1, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4b4a      	ldr	r3, [pc, #296]	@ (8003930 <HAL_LTDC_Init+0x19c>)
 8003808:	400b      	ands	r3, r1
 800380a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	041b      	lsls	r3, r3, #16
 8003812:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6899      	ldr	r1, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68d9      	ldr	r1, [r3, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b3e      	ldr	r3, [pc, #248]	@ (8003930 <HAL_LTDC_Init+0x19c>)
 8003836:	400b      	ands	r3, r1
 8003838:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	041b      	lsls	r3, r3, #16
 8003840:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68d9      	ldr	r1, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1a      	ldr	r2, [r3, #32]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6919      	ldr	r1, [r3, #16]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4b33      	ldr	r3, [pc, #204]	@ (8003930 <HAL_LTDC_Init+0x19c>)
 8003864:	400b      	ands	r3, r1
 8003866:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	041b      	lsls	r3, r3, #16
 800386e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6919      	ldr	r1, [r3, #16]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6959      	ldr	r1, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4b27      	ldr	r3, [pc, #156]	@ (8003930 <HAL_LTDC_Init+0x19c>)
 8003892:	400b      	ands	r3, r1
 8003894:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389a:	041b      	lsls	r3, r3, #16
 800389c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6959      	ldr	r1, [r3, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80038c4:	041b      	lsls	r3, r3, #16
 80038c6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80038d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0206 	orr.w	r2, r2, #6
 8003902:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	f000f800 	.word	0xf000f800

08003934 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003948:	b5b0      	push	{r4, r5, r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_LTDC_ConfigLayer+0x1a>
 800395e:	2302      	movs	r3, #2
 8003960:	e02c      	b.n	80039bc <HAL_LTDC_ConfigLayer+0x74>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2134      	movs	r1, #52	@ 0x34
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4614      	mov	r4, r2
 8003986:	461d      	mov	r5, r3
 8003988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800398a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800398c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800398e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003994:	682b      	ldr	r3, [r5, #0]
 8003996:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f83b 	bl	8003a18 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2201      	movs	r2, #1
 80039a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bdb0      	pop	{r4, r5, r7, pc}

080039c4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_LTDC_EnableDither+0x16>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e016      	b.n	8003a08 <HAL_LTDC_EnableDither+0x44>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80039ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <HAL_LTDC_EnableDither+0x50>)
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	4a09      	ldr	r2, [pc, #36]	@ (8003a14 <HAL_LTDC_EnableDither+0x50>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	40016800 	.word	0x40016800

08003a18 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	@ 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	0c1b      	lsrs	r3, r3, #16
 8003a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a34:	4413      	add	r3, r2
 8003a36:	041b      	lsls	r3, r3, #16
 8003a38:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	01db      	lsls	r3, r3, #7
 8003a44:	4413      	add	r3, r2
 8003a46:	3384      	adds	r3, #132	@ 0x84
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	6812      	ldr	r2, [r2, #0]
 8003a4e:	4611      	mov	r1, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	01d2      	lsls	r2, r2, #7
 8003a54:	440a      	add	r2, r1
 8003a56:	3284      	adds	r2, #132	@ 0x84
 8003a58:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003a5c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a6e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a70:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4619      	mov	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	01db      	lsls	r3, r3, #7
 8003a7c:	440b      	add	r3, r1
 8003a7e:	3384      	adds	r3, #132	@ 0x84
 8003a80:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a86:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a96:	4413      	add	r3, r2
 8003a98:	041b      	lsls	r3, r3, #16
 8003a9a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	01db      	lsls	r3, r3, #7
 8003aa6:	4413      	add	r3, r2
 8003aa8:	3384      	adds	r3, #132	@ 0x84
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	01d2      	lsls	r2, r2, #7
 8003ab6:	440a      	add	r2, r1
 8003ab8:	3284      	adds	r2, #132	@ 0x84
 8003aba:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003abe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ace:	4413      	add	r3, r2
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	01db      	lsls	r3, r3, #7
 8003adc:	440b      	add	r3, r1
 8003ade:	3384      	adds	r3, #132	@ 0x84
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	01db      	lsls	r3, r3, #7
 8003af2:	4413      	add	r3, r2
 8003af4:	3384      	adds	r3, #132	@ 0x84
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	4611      	mov	r1, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	01d2      	lsls	r2, r2, #7
 8003b02:	440a      	add	r2, r1
 8003b04:	3284      	adds	r2, #132	@ 0x84
 8003b06:	f023 0307 	bic.w	r3, r3, #7
 8003b0a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	01db      	lsls	r3, r3, #7
 8003b16:	4413      	add	r3, r2
 8003b18:	3384      	adds	r3, #132	@ 0x84
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003b32:	041b      	lsls	r3, r3, #16
 8003b34:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	061b      	lsls	r3, r3, #24
 8003b3c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	01db      	lsls	r3, r3, #7
 8003b48:	4413      	add	r3, r2
 8003b4a:	3384      	adds	r3, #132	@ 0x84
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	01db      	lsls	r3, r3, #7
 8003b58:	4413      	add	r3, r2
 8003b5a:	3384      	adds	r3, #132	@ 0x84
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	2300      	movs	r3, #0
 8003b60:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b68:	461a      	mov	r2, r3
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4619      	mov	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	01db      	lsls	r3, r3, #7
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3384      	adds	r3, #132	@ 0x84
 8003b80:	4619      	mov	r1, r3
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	01db      	lsls	r3, r3, #7
 8003b92:	4413      	add	r3, r2
 8003b94:	3384      	adds	r3, #132	@ 0x84
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	01d2      	lsls	r2, r2, #7
 8003ba2:	440a      	add	r2, r1
 8003ba4:	3284      	adds	r2, #132	@ 0x84
 8003ba6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003baa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	01db      	lsls	r3, r3, #7
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3384      	adds	r3, #132	@ 0x84
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	01db      	lsls	r3, r3, #7
 8003bcc:	4413      	add	r3, r2
 8003bce:	3384      	adds	r3, #132	@ 0x84
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	01d2      	lsls	r2, r2, #7
 8003bdc:	440a      	add	r2, r1
 8003bde:	3284      	adds	r2, #132	@ 0x84
 8003be0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003be4:	f023 0307 	bic.w	r3, r3, #7
 8003be8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	69da      	ldr	r2, [r3, #28]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	68f9      	ldr	r1, [r7, #12]
 8003bf4:	6809      	ldr	r1, [r1, #0]
 8003bf6:	4608      	mov	r0, r1
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	01c9      	lsls	r1, r1, #7
 8003bfc:	4401      	add	r1, r0
 8003bfe:	3184      	adds	r1, #132	@ 0x84
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	01db      	lsls	r3, r3, #7
 8003c0e:	4413      	add	r3, r2
 8003c10:	3384      	adds	r3, #132	@ 0x84
 8003c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	01db      	lsls	r3, r3, #7
 8003c1e:	4413      	add	r3, r2
 8003c20:	3384      	adds	r3, #132	@ 0x84
 8003c22:	461a      	mov	r2, r3
 8003c24:	2300      	movs	r3, #0
 8003c26:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	01db      	lsls	r3, r3, #7
 8003c32:	4413      	add	r3, r2
 8003c34:	3384      	adds	r3, #132	@ 0x84
 8003c36:	461a      	mov	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d102      	bne.n	8003c4c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003c46:	2304      	movs	r3, #4
 8003c48:	61fb      	str	r3, [r7, #28]
 8003c4a:	e01b      	b.n	8003c84 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d102      	bne.n	8003c5a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003c54:	2303      	movs	r3, #3
 8003c56:	61fb      	str	r3, [r7, #28]
 8003c58:	e014      	b.n	8003c84 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d00b      	beq.n	8003c7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d007      	beq.n	8003c7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d003      	beq.n	8003c7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c76:	2b07      	cmp	r3, #7
 8003c78:	d102      	bne.n	8003c80 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	e001      	b.n	8003c84 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003c80:	2301      	movs	r3, #1
 8003c82:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	01db      	lsls	r3, r3, #7
 8003c8e:	4413      	add	r3, r2
 8003c90:	3384      	adds	r3, #132	@ 0x84
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	4611      	mov	r1, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	01d2      	lsls	r2, r2, #7
 8003c9e:	440a      	add	r2, r1
 8003ca0:	3284      	adds	r2, #132	@ 0x84
 8003ca2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	fb02 f303 	mul.w	r3, r2, r3
 8003cb2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	1acb      	subs	r3, r1, r3
 8003cbe:	69f9      	ldr	r1, [r7, #28]
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003cc6:	68f9      	ldr	r1, [r7, #12]
 8003cc8:	6809      	ldr	r1, [r1, #0]
 8003cca:	4608      	mov	r0, r1
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	01c9      	lsls	r1, r1, #7
 8003cd0:	4401      	add	r1, r0
 8003cd2:	3184      	adds	r1, #132	@ 0x84
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	01db      	lsls	r3, r3, #7
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3384      	adds	r3, #132	@ 0x84
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	4611      	mov	r1, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	01d2      	lsls	r2, r2, #7
 8003cf2:	440a      	add	r2, r1
 8003cf4:	3284      	adds	r2, #132	@ 0x84
 8003cf6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003cfa:	f023 0307 	bic.w	r3, r3, #7
 8003cfe:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	01db      	lsls	r3, r3, #7
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3384      	adds	r3, #132	@ 0x84
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d14:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	01db      	lsls	r3, r3, #7
 8003d20:	4413      	add	r3, r2
 8003d22:	3384      	adds	r3, #132	@ 0x84
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	6812      	ldr	r2, [r2, #0]
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	01d2      	lsls	r2, r2, #7
 8003d30:	440a      	add	r2, r1
 8003d32:	3284      	adds	r2, #132	@ 0x84
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6013      	str	r3, [r2, #0]
}
 8003d3a:	bf00      	nop
 8003d3c:	3724      	adds	r7, #36	@ 0x24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b086      	sub	sp, #24
 8003d4a:	af02      	add	r7, sp, #8
 8003d4c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e101      	b.n	8003f5c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f006 fd5a 	bl	800a82c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d86:	d102      	bne.n	8003d8e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f003 f941 	bl	800701a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7c1a      	ldrb	r2, [r3, #16]
 8003da0:	f88d 2000 	strb.w	r2, [sp]
 8003da4:	3304      	adds	r3, #4
 8003da6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003da8:	f003 f820 	bl	8006dec <USB_CoreInit>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d005      	beq.n	8003dbe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e0ce      	b.n	8003f5c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f003 f939 	bl	800703c <USB_SetCurrentMode>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0bf      	b.n	8003f5c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	73fb      	strb	r3, [r7, #15]
 8003de0:	e04a      	b.n	8003e78 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003de2:	7bfa      	ldrb	r2, [r7, #15]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	3315      	adds	r3, #21
 8003df2:	2201      	movs	r2, #1
 8003df4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003df6:	7bfa      	ldrb	r2, [r7, #15]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	3314      	adds	r3, #20
 8003e06:	7bfa      	ldrb	r2, [r7, #15]
 8003e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e0a:	7bfa      	ldrb	r2, [r7, #15]
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	b298      	uxth	r0, r3
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	332e      	adds	r3, #46	@ 0x2e
 8003e1e:	4602      	mov	r2, r0
 8003e20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e22:	7bfa      	ldrb	r2, [r7, #15]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	3318      	adds	r3, #24
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e36:	7bfa      	ldrb	r2, [r7, #15]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	331c      	adds	r3, #28
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e4a:	7bfa      	ldrb	r2, [r7, #15]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	3320      	adds	r3, #32
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e5e:	7bfa      	ldrb	r2, [r7, #15]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	3324      	adds	r3, #36	@ 0x24
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	3301      	adds	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	791b      	ldrb	r3, [r3, #4]
 8003e7c:	7bfa      	ldrb	r2, [r7, #15]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d3af      	bcc.n	8003de2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]
 8003e86:	e044      	b.n	8003f12 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e88:	7bfa      	ldrb	r2, [r7, #15]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003eb0:	7bfa      	ldrb	r2, [r7, #15]
 8003eb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003eb4:	7bfa      	ldrb	r2, [r7, #15]
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003eca:	7bfa      	ldrb	r2, [r7, #15]
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ef6:	7bfa      	ldrb	r2, [r7, #15]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	73fb      	strb	r3, [r7, #15]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	791b      	ldrb	r3, [r3, #4]
 8003f16:	7bfa      	ldrb	r2, [r7, #15]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d3b5      	bcc.n	8003e88 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6818      	ldr	r0, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	7c1a      	ldrb	r2, [r3, #16]
 8003f24:	f88d 2000 	strb.w	r2, [sp]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f2c:	f003 f8d2 	bl	80070d4 <USB_DevInit>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e00c      	b.n	8003f5c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f004 f91c 	bl	8008192 <USB_DevDisconnect>

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_PCD_Start+0x1c>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e022      	b.n	8003fc6 <HAL_PCD_Start+0x62>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d105      	bne.n	8003fa8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f003 f823 	bl	8006ff8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f004 f8ca 	bl	8008150 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003fce:	b590      	push	{r4, r7, lr}
 8003fd0:	b08d      	sub	sp, #52	@ 0x34
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f004 f988 	bl	80082fa <USB_GetMode>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f040 848c 	bne.w	800490a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f004 f8ec 	bl	80081d4 <USB_ReadInterrupts>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 8482 	beq.w	8004908 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f004 f8d9 	bl	80081d4 <USB_ReadInterrupts>
 8004022:	4603      	mov	r3, r0
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b02      	cmp	r3, #2
 800402a:	d107      	bne.n	800403c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f002 0202 	and.w	r2, r2, #2
 800403a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f004 f8c7 	bl	80081d4 <USB_ReadInterrupts>
 8004046:	4603      	mov	r3, r0
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b10      	cmp	r3, #16
 800404e:	d161      	bne.n	8004114 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0210 	bic.w	r2, r2, #16
 800405e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	f003 020f 	and.w	r2, r3, #15
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	4413      	add	r3, r2
 800407c:	3304      	adds	r3, #4
 800407e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	0c5b      	lsrs	r3, r3, #17
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	2b02      	cmp	r3, #2
 800408a:	d124      	bne.n	80040d6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d035      	beq.n	8004104 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	091b      	lsrs	r3, r3, #4
 80040a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	6a38      	ldr	r0, [r7, #32]
 80040ac:	f003 fefe 	bl	8007eac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040bc:	441a      	add	r2, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040ce:	441a      	add	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	615a      	str	r2, [r3, #20]
 80040d4:	e016      	b.n	8004104 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	0c5b      	lsrs	r3, r3, #17
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	2b06      	cmp	r3, #6
 80040e0:	d110      	bne.n	8004104 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040e8:	2208      	movs	r2, #8
 80040ea:	4619      	mov	r1, r3
 80040ec:	6a38      	ldr	r0, [r7, #32]
 80040ee:	f003 fedd 	bl	8007eac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	091b      	lsrs	r3, r3, #4
 80040fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040fe:	441a      	add	r2, r3
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0210 	orr.w	r2, r2, #16
 8004112:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f004 f85b 	bl	80081d4 <USB_ReadInterrupts>
 800411e:	4603      	mov	r3, r0
 8004120:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004124:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004128:	f040 80a7 	bne.w	800427a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f004 f860 	bl	80081fa <USB_ReadDevAllOutEpInterrupt>
 800413a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800413c:	e099      	b.n	8004272 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800413e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 808e 	beq.w	8004266 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f004 f884 	bl	8008262 <USB_ReadDevOutEPInterrupt>
 800415a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00c      	beq.n	8004180 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004172:	461a      	mov	r2, r3
 8004174:	2301      	movs	r3, #1
 8004176:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004178:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fea4 	bl	8004ec8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00c      	beq.n	80041a4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004196:	461a      	mov	r2, r3
 8004198:	2308      	movs	r3, #8
 800419a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800419c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 ff7a 	bl	8005098 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d008      	beq.n	80041c0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ba:	461a      	mov	r2, r3
 80041bc:	2310      	movs	r3, #16
 80041be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d030      	beq.n	800422c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d2:	2b80      	cmp	r3, #128	@ 0x80
 80041d4:	d109      	bne.n	80041ea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041e8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80041ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4413      	add	r3, r2
 80041fc:	3304      	adds	r3, #4
 80041fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	78db      	ldrb	r3, [r3, #3]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d108      	bne.n	800421a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2200      	movs	r2, #0
 800420c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	b2db      	uxtb	r3, r3
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f006 fc0b 	bl	800aa30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004226:	461a      	mov	r2, r3
 8004228:	2302      	movs	r3, #2
 800422a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d008      	beq.n	8004248 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004242:	461a      	mov	r2, r3
 8004244:	2320      	movs	r3, #32
 8004246:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800425e:	461a      	mov	r2, r3
 8004260:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004264:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	3301      	adds	r3, #1
 800426a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800426c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426e:	085b      	lsrs	r3, r3, #1
 8004270:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004274:	2b00      	cmp	r3, #0
 8004276:	f47f af62 	bne.w	800413e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f003 ffa8 	bl	80081d4 <USB_ReadInterrupts>
 8004284:	4603      	mov	r3, r0
 8004286:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800428a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800428e:	f040 80db 	bne.w	8004448 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f003 ffc9 	bl	800822e <USB_ReadDevAllInEpInterrupt>
 800429c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80042a2:	e0cd      	b.n	8004440 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80042a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80c2 	beq.w	8004434 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	4611      	mov	r1, r2
 80042ba:	4618      	mov	r0, r3
 80042bc:	f003 ffef 	bl	800829e <USB_ReadDevInEPInterrupt>
 80042c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d057      	beq.n	800437c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	2201      	movs	r2, #1
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69f9      	ldr	r1, [r7, #28]
 80042e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042ec:	4013      	ands	r3, r2
 80042ee:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80042f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042fc:	461a      	mov	r2, r3
 80042fe:	2301      	movs	r3, #1
 8004300:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	799b      	ldrb	r3, [r3, #6]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d132      	bne.n	8004370 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	3320      	adds	r3, #32
 800431a:	6819      	ldr	r1, [r3, #0]
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004320:	4613      	mov	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4413      	add	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4403      	add	r3, r0
 800432a:	331c      	adds	r3, #28
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4419      	add	r1, r3
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004334:	4613      	mov	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4403      	add	r3, r0
 800433e:	3320      	adds	r3, #32
 8004340:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	d113      	bne.n	8004370 <HAL_PCD_IRQHandler+0x3a2>
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800434c:	4613      	mov	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	3324      	adds	r3, #36	@ 0x24
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d108      	bne.n	8004370 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004368:	461a      	mov	r2, r3
 800436a:	2101      	movs	r1, #1
 800436c:	f003 fff6 	bl	800835c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	b2db      	uxtb	r3, r3
 8004374:	4619      	mov	r1, r3
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f006 fad5 	bl	800a926 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004392:	461a      	mov	r2, r3
 8004394:	2308      	movs	r3, #8
 8004396:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d008      	beq.n	80043b4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ae:	461a      	mov	r2, r3
 80043b0:	2310      	movs	r3, #16
 80043b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d008      	beq.n	80043d0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ca:	461a      	mov	r2, r3
 80043cc:	2340      	movs	r3, #64	@ 0x40
 80043ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d023      	beq.n	8004422 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80043da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043dc:	6a38      	ldr	r0, [r7, #32]
 80043de:	f002 ffdd 	bl	800739c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80043e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e4:	4613      	mov	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	3310      	adds	r3, #16
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	4413      	add	r3, r2
 80043f2:	3304      	adds	r3, #4
 80043f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	78db      	ldrb	r3, [r3, #3]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d108      	bne.n	8004410 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2200      	movs	r2, #0
 8004402:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	b2db      	uxtb	r3, r3
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f006 fb22 	bl	800aa54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800441c:	461a      	mov	r2, r3
 800441e:	2302      	movs	r3, #2
 8004420:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800442c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fcbd 	bl	8004dae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	3301      	adds	r3, #1
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800443a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443c:	085b      	lsrs	r3, r3, #1
 800443e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004442:	2b00      	cmp	r3, #0
 8004444:	f47f af2e 	bne.w	80042a4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f003 fec1 	bl	80081d4 <USB_ReadInterrupts>
 8004452:	4603      	mov	r3, r0
 8004454:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004458:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800445c:	d122      	bne.n	80044a4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800446c:	f023 0301 	bic.w	r3, r3, #1
 8004470:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004478:	2b01      	cmp	r3, #1
 800447a:	d108      	bne.n	800448e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004484:	2100      	movs	r1, #0
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fea4 	bl	80051d4 <HAL_PCDEx_LPM_Callback>
 800448c:	e002      	b.n	8004494 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f006 fac0 	bl	800aa14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80044a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f003 fe93 	bl	80081d4 <USB_ReadInterrupts>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044b8:	d112      	bne.n	80044e0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d102      	bne.n	80044d0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f006 fa7c 	bl	800a9c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695a      	ldr	r2, [r3, #20]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80044de:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f003 fe75 	bl	80081d4 <USB_ReadInterrupts>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f4:	f040 80b7 	bne.w	8004666 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004506:	f023 0301 	bic.w	r3, r3, #1
 800450a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2110      	movs	r1, #16
 8004512:	4618      	mov	r0, r3
 8004514:	f002 ff42 	bl	800739c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004518:	2300      	movs	r3, #0
 800451a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800451c:	e046      	b.n	80045ac <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800451e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800452a:	461a      	mov	r2, r3
 800452c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004530:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004542:	0151      	lsls	r1, r2, #5
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	440a      	add	r2, r1
 8004548:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800454c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004550:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800455e:	461a      	mov	r2, r3
 8004560:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004564:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004576:	0151      	lsls	r1, r2, #5
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	440a      	add	r2, r1
 800457c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004580:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004584:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004596:	0151      	lsls	r1, r2, #5
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	440a      	add	r2, r1
 800459c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80045a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a8:	3301      	adds	r3, #1
 80045aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	791b      	ldrb	r3, [r3, #4]
 80045b0:	461a      	mov	r2, r3
 80045b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d3b2      	bcc.n	800451e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045c6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80045ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	7bdb      	ldrb	r3, [r3, #15]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d016      	beq.n	8004602 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045e4:	f043 030b 	orr.w	r3, r3, #11
 80045e8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f4:	69fa      	ldr	r2, [r7, #28]
 80045f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045fa:	f043 030b 	orr.w	r3, r3, #11
 80045fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8004600:	e015      	b.n	800462e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004610:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004614:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004618:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004628:	f043 030b 	orr.w	r3, r3, #11
 800462c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800463c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004640:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004650:	461a      	mov	r2, r3
 8004652:	f003 fe83 	bl	800835c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695a      	ldr	r2, [r3, #20]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004664:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f003 fdb2 	bl	80081d4 <USB_ReadInterrupts>
 8004670:	4603      	mov	r3, r0
 8004672:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800467a:	d123      	bne.n	80046c4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f003 fe48 	bl	8008316 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f002 feff 	bl	800748e <USB_GetDevSpeed>
 8004690:	4603      	mov	r3, r0
 8004692:	461a      	mov	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681c      	ldr	r4, [r3, #0]
 800469c:	f001 fa0a 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 80046a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046a6:	461a      	mov	r2, r3
 80046a8:	4620      	mov	r0, r4
 80046aa:	f002 fc03 	bl	8006eb4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f006 f961 	bl	800a976 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80046c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f003 fd83 	bl	80081d4 <USB_ReadInterrupts>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f003 0308 	and.w	r3, r3, #8
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d10a      	bne.n	80046ee <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f006 f93e 	bl	800a95a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695a      	ldr	r2, [r3, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f002 0208 	and.w	r2, r2, #8
 80046ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f003 fd6e 	bl	80081d4 <USB_ReadInterrupts>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fe:	2b80      	cmp	r3, #128	@ 0x80
 8004700:	d123      	bne.n	800474a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800470e:	2301      	movs	r3, #1
 8004710:	627b      	str	r3, [r7, #36]	@ 0x24
 8004712:	e014      	b.n	800473e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004718:	4613      	mov	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d105      	bne.n	8004738 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800472c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472e:	b2db      	uxtb	r3, r3
 8004730:	4619      	mov	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fb0a 	bl	8004d4c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473a:	3301      	adds	r3, #1
 800473c:	627b      	str	r3, [r7, #36]	@ 0x24
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	791b      	ldrb	r3, [r3, #4]
 8004742:	461a      	mov	r2, r3
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	4293      	cmp	r3, r2
 8004748:	d3e4      	bcc.n	8004714 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f003 fd40 	bl	80081d4 <USB_ReadInterrupts>
 8004754:	4603      	mov	r3, r0
 8004756:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800475a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800475e:	d13c      	bne.n	80047da <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004760:	2301      	movs	r3, #1
 8004762:	627b      	str	r3, [r7, #36]	@ 0x24
 8004764:	e02b      	b.n	80047be <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800477a:	4613      	mov	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	3318      	adds	r3, #24
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d115      	bne.n	80047b8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800478c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800478e:	2b00      	cmp	r3, #0
 8004790:	da12      	bge.n	80047b8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004796:	4613      	mov	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	440b      	add	r3, r1
 80047a0:	3317      	adds	r3, #23
 80047a2:	2201      	movs	r2, #1
 80047a4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 faca 	bl	8004d4c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ba:	3301      	adds	r3, #1
 80047bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	791b      	ldrb	r3, [r3, #4]
 80047c2:	461a      	mov	r2, r3
 80047c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d3cd      	bcc.n	8004766 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695a      	ldr	r2, [r3, #20]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80047d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f003 fcf8 	bl	80081d4 <USB_ReadInterrupts>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047ee:	d156      	bne.n	800489e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047f0:	2301      	movs	r3, #1
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f4:	e045      	b.n	8004882 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800480a:	4613      	mov	r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d12e      	bne.n	800487c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800481e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004820:	2b00      	cmp	r3, #0
 8004822:	da2b      	bge.n	800487c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004830:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004834:	429a      	cmp	r2, r3
 8004836:	d121      	bne.n	800487c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800483c:	4613      	mov	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10a      	bne.n	800487c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004874:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004878:	6053      	str	r3, [r2, #4]
            break;
 800487a:	e008      	b.n	800488e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	3301      	adds	r3, #1
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	791b      	ldrb	r3, [r3, #4]
 8004886:	461a      	mov	r2, r3
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	4293      	cmp	r3, r2
 800488c:	d3b3      	bcc.n	80047f6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695a      	ldr	r2, [r3, #20]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800489c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f003 fc96 	bl	80081d4 <USB_ReadInterrupts>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b2:	d10a      	bne.n	80048ca <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f006 f8df 	bl	800aa78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80048c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f003 fc80 	bl	80081d4 <USB_ReadInterrupts>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d115      	bne.n	800490a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f006 f8cf 	bl	800aa94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6859      	ldr	r1, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	430a      	orrs	r2, r1
 8004904:	605a      	str	r2, [r3, #4]
 8004906:	e000      	b.n	800490a <HAL_PCD_IRQHandler+0x93c>
      return;
 8004908:	bf00      	nop
    }
  }
}
 800490a:	3734      	adds	r7, #52	@ 0x34
 800490c:	46bd      	mov	sp, r7
 800490e:	bd90      	pop	{r4, r7, pc}

08004910 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_PCD_SetAddress+0x1a>
 8004926:	2302      	movs	r3, #2
 8004928:	e012      	b.n	8004950 <HAL_PCD_SetAddress+0x40>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	78fa      	ldrb	r2, [r7, #3]
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f003 fbdf 	bl	8008104 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	4608      	mov	r0, r1
 8004962:	4611      	mov	r1, r2
 8004964:	461a      	mov	r2, r3
 8004966:	4603      	mov	r3, r0
 8004968:	70fb      	strb	r3, [r7, #3]
 800496a:	460b      	mov	r3, r1
 800496c:	803b      	strh	r3, [r7, #0]
 800496e:	4613      	mov	r3, r2
 8004970:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004976:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800497a:	2b00      	cmp	r3, #0
 800497c:	da0f      	bge.n	800499e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	f003 020f 	and.w	r2, r3, #15
 8004984:	4613      	mov	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	4413      	add	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	3310      	adds	r3, #16
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4413      	add	r3, r2
 8004992:	3304      	adds	r3, #4
 8004994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	705a      	strb	r2, [r3, #1]
 800499c:	e00f      	b.n	80049be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	f003 020f 	and.w	r2, r3, #15
 80049a4:	4613      	mov	r3, r2
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	4413      	add	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	4413      	add	r3, r2
 80049b4:	3304      	adds	r3, #4
 80049b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80049ca:	883b      	ldrh	r3, [r7, #0]
 80049cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	78ba      	ldrb	r2, [r7, #2]
 80049d8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	785b      	ldrb	r3, [r3, #1]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d004      	beq.n	80049ec <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049ec:	78bb      	ldrb	r3, [r7, #2]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d102      	bne.n	80049f8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_PCD_EP_Open+0xae>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e00e      	b.n	8004a24 <HAL_PCD_EP_Open+0xcc>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68f9      	ldr	r1, [r7, #12]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f002 fd5f 	bl	80074d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004a22:	7afb      	ldrb	r3, [r7, #11]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	da0f      	bge.n	8004a60 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a40:	78fb      	ldrb	r3, [r7, #3]
 8004a42:	f003 020f 	and.w	r2, r3, #15
 8004a46:	4613      	mov	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	3310      	adds	r3, #16
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	4413      	add	r3, r2
 8004a54:	3304      	adds	r3, #4
 8004a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	705a      	strb	r2, [r3, #1]
 8004a5e:	e00f      	b.n	8004a80 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	f003 020f 	and.w	r2, r3, #15
 8004a66:	4613      	mov	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	4413      	add	r3, r2
 8004a76:	3304      	adds	r3, #4
 8004a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_PCD_EP_Close+0x6e>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e00e      	b.n	8004ab8 <HAL_PCD_EP_Close+0x8c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68f9      	ldr	r1, [r7, #12]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f002 fd9d 	bl	80075e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	460b      	mov	r3, r1
 8004ace:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ad0:	7afb      	ldrb	r3, [r7, #11]
 8004ad2:	f003 020f 	and.w	r2, r3, #15
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2200      	movs	r2, #0
 8004afa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2200      	movs	r2, #0
 8004b00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b02:	7afb      	ldrb	r3, [r7, #11]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	799b      	ldrb	r3, [r3, #6]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d102      	bne.n	8004b1c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	799b      	ldrb	r3, [r3, #6]
 8004b24:	461a      	mov	r2, r3
 8004b26:	6979      	ldr	r1, [r7, #20]
 8004b28:	f002 fe3a 	bl	80077a0 <USB_EPStartXfer>

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	f003 020f 	and.w	r2, r3, #15
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004b58:	681b      	ldr	r3, [r3, #0]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b086      	sub	sp, #24
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
 8004b72:	460b      	mov	r3, r1
 8004b74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b76:	7afb      	ldrb	r3, [r7, #11]
 8004b78:	f003 020f 	and.w	r2, r3, #15
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4413      	add	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	3310      	adds	r3, #16
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	4413      	add	r3, r2
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ba6:	7afb      	ldrb	r3, [r7, #11]
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	799b      	ldrb	r3, [r3, #6]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d102      	bne.n	8004bc0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6818      	ldr	r0, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	799b      	ldrb	r3, [r3, #6]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	6979      	ldr	r1, [r7, #20]
 8004bcc:	f002 fde8 	bl	80077a0 <USB_EPStartXfer>

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	460b      	mov	r3, r1
 8004be4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	f003 030f 	and.w	r3, r3, #15
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	7912      	ldrb	r2, [r2, #4]
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e04f      	b.n	8004c98 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	da0f      	bge.n	8004c20 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	f003 020f 	and.w	r2, r3, #15
 8004c06:	4613      	mov	r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	3310      	adds	r3, #16
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	4413      	add	r3, r2
 8004c14:	3304      	adds	r3, #4
 8004c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	705a      	strb	r2, [r3, #1]
 8004c1e:	e00d      	b.n	8004c3c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c20:	78fa      	ldrb	r2, [r7, #3]
 8004c22:	4613      	mov	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	4413      	add	r3, r2
 8004c32:	3304      	adds	r3, #4
 8004c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_PCD_EP_SetStall+0x82>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e01d      	b.n	8004c98 <HAL_PCD_EP_SetStall+0xbe>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68f9      	ldr	r1, [r7, #12]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f003 f976 	bl	8007f5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	7999      	ldrb	r1, [r3, #6]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f003 fb67 	bl	800835c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	7912      	ldrb	r2, [r2, #4]
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e042      	b.n	8004d44 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	da0f      	bge.n	8004ce6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cc6:	78fb      	ldrb	r3, [r7, #3]
 8004cc8:	f003 020f 	and.w	r2, r3, #15
 8004ccc:	4613      	mov	r3, r2
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	3310      	adds	r3, #16
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	4413      	add	r3, r2
 8004cda:	3304      	adds	r3, #4
 8004cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	705a      	strb	r2, [r3, #1]
 8004ce4:	e00f      	b.n	8004d06 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ce6:	78fb      	ldrb	r3, [r7, #3]
 8004ce8:	f003 020f 	and.w	r2, r3, #15
 8004cec:	4613      	mov	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_PCD_EP_ClrStall+0x86>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e00e      	b.n	8004d44 <HAL_PCD_EP_ClrStall+0xa4>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68f9      	ldr	r1, [r7, #12]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f003 f97f 	bl	8008038 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	da0c      	bge.n	8004d7a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	f003 020f 	and.w	r2, r3, #15
 8004d66:	4613      	mov	r3, r2
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	3310      	adds	r3, #16
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	4413      	add	r3, r2
 8004d74:	3304      	adds	r3, #4
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	e00c      	b.n	8004d94 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	f003 020f 	and.w	r2, r3, #15
 8004d80:	4613      	mov	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	4413      	add	r3, r2
 8004d90:	3304      	adds	r3, #4
 8004d92:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f002 ff9e 	bl	8007cdc <USB_EPStopXfer>
 8004da0:	4603      	mov	r3, r0
 8004da2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004da4:	7afb      	ldrb	r3, [r7, #11]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b08a      	sub	sp, #40	@ 0x28
 8004db2:	af02      	add	r7, sp, #8
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	3310      	adds	r3, #16
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d901      	bls.n	8004de6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e06b      	b.n	8004ebe <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d902      	bls.n	8004e02 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	3303      	adds	r3, #3
 8004e06:	089b      	lsrs	r3, r3, #2
 8004e08:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e0a:	e02a      	b.n	8004e62 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	69fa      	ldr	r2, [r7, #28]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d902      	bls.n	8004e28 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	3303      	adds	r3, #3
 8004e2c:	089b      	lsrs	r3, r3, #2
 8004e2e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68d9      	ldr	r1, [r3, #12]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	4603      	mov	r3, r0
 8004e44:	6978      	ldr	r0, [r7, #20]
 8004e46:	f002 fff3 	bl	8007e30 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	441a      	add	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	441a      	add	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d809      	bhi.n	8004e8c <PCD_WriteEmptyTxFifo+0xde>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	695a      	ldr	r2, [r3, #20]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d203      	bcs.n	8004e8c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1bf      	bne.n	8004e0c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d811      	bhi.n	8004ebc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	6939      	ldr	r1, [r7, #16]
 8004eb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004eb8:	4013      	ands	r3, r2
 8004eba:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3720      	adds	r7, #32
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	333c      	adds	r3, #60	@ 0x3c
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	799b      	ldrb	r3, [r3, #6]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d17b      	bne.n	8004ff6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d015      	beq.n	8004f34 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4a61      	ldr	r2, [pc, #388]	@ (8005090 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	f240 80b9 	bls.w	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80b3 	beq.w	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f30:	6093      	str	r3, [r2, #8]
 8004f32:	e0a7      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d009      	beq.n	8004f52 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	6093      	str	r3, [r2, #8]
 8004f50:	e098      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f040 8093 	bne.w	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	4a4b      	ldr	r2, [pc, #300]	@ (8005090 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d90f      	bls.n	8004f86 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f82:	6093      	str	r3, [r2, #8]
 8004f84:	e07e      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	4413      	add	r3, r2
 8004f98:	3304      	adds	r3, #4
 8004f9a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a1a      	ldr	r2, [r3, #32]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	0159      	lsls	r1, r3, #5
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	440b      	add	r3, r1
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb2:	1ad2      	subs	r2, r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d114      	bne.n	8004fe8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	f003 f9c2 	bl	800835c <USB_EP0_OutStart>
 8004fd8:	e006      	b.n	8004fe8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	441a      	add	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f005 fc7e 	bl	800a8f0 <HAL_PCD_DataOutStageCallback>
 8004ff4:	e046      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	4a26      	ldr	r2, [pc, #152]	@ (8005094 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d124      	bne.n	8005048 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005014:	461a      	mov	r2, r3
 8005016:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800501a:	6093      	str	r3, [r2, #8]
 800501c:	e032      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005034:	461a      	mov	r2, r3
 8005036:	2320      	movs	r3, #32
 8005038:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f005 fc55 	bl	800a8f0 <HAL_PCD_DataOutStageCallback>
 8005046:	e01d      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d114      	bne.n	8005078 <PCD_EP_OutXfrComplete_int+0x1b0>
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	4613      	mov	r3, r2
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d108      	bne.n	8005078 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005070:	461a      	mov	r2, r3
 8005072:	2100      	movs	r1, #0
 8005074:	f003 f972 	bl	800835c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f005 fc36 	bl	800a8f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	4f54300a 	.word	0x4f54300a
 8005094:	4f54310a 	.word	0x4f54310a

08005098 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	333c      	adds	r3, #60	@ 0x3c
 80050b0:	3304      	adds	r3, #4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4a15      	ldr	r2, [pc, #84]	@ (8005120 <PCD_EP_OutSetupPacket_int+0x88>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d90e      	bls.n	80050ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d009      	beq.n	80050ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e4:	461a      	mov	r2, r3
 80050e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f005 fbed 	bl	800a8cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005120 <PCD_EP_OutSetupPacket_int+0x88>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d90c      	bls.n	8005114 <PCD_EP_OutSetupPacket_int+0x7c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	799b      	ldrb	r3, [r3, #6]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d108      	bne.n	8005114 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800510c:	461a      	mov	r2, r3
 800510e:	2101      	movs	r1, #1
 8005110:	f003 f924 	bl	800835c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	4f54300a 	.word	0x4f54300a

08005124 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	70fb      	strb	r3, [r7, #3]
 8005130:	4613      	mov	r3, r2
 8005132:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d107      	bne.n	8005152 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005142:	883b      	ldrh	r3, [r7, #0]
 8005144:	0419      	lsls	r1, r3, #16
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	430a      	orrs	r2, r1
 800514e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005150:	e028      	b.n	80051a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005158:	0c1b      	lsrs	r3, r3, #16
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	4413      	add	r3, r2
 800515e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005160:	2300      	movs	r3, #0
 8005162:	73fb      	strb	r3, [r7, #15]
 8005164:	e00d      	b.n	8005182 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	3340      	adds	r3, #64	@ 0x40
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	0c1b      	lsrs	r3, r3, #16
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	4413      	add	r3, r2
 800517a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	3301      	adds	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
 8005182:	7bfa      	ldrb	r2, [r7, #15]
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	3b01      	subs	r3, #1
 8005188:	429a      	cmp	r2, r3
 800518a:	d3ec      	bcc.n	8005166 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800518c:	883b      	ldrh	r3, [r7, #0]
 800518e:	0418      	lsls	r0, r3, #16
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6819      	ldr	r1, [r3, #0]
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	3b01      	subs	r3, #1
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	4302      	orrs	r2, r0
 800519c:	3340      	adds	r3, #64	@ 0x40
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	460b      	mov	r3, r1
 80051bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	887a      	ldrh	r2, [r7, #2]
 80051c4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e267      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d075      	beq.n	80052f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800520a:	4b88      	ldr	r3, [pc, #544]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	2b04      	cmp	r3, #4
 8005214:	d00c      	beq.n	8005230 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005216:	4b85      	ldr	r3, [pc, #532]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800521e:	2b08      	cmp	r3, #8
 8005220:	d112      	bne.n	8005248 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005222:	4b82      	ldr	r3, [pc, #520]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800522a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800522e:	d10b      	bne.n	8005248 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005230:	4b7e      	ldr	r3, [pc, #504]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d05b      	beq.n	80052f4 <HAL_RCC_OscConfig+0x108>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d157      	bne.n	80052f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e242      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005250:	d106      	bne.n	8005260 <HAL_RCC_OscConfig+0x74>
 8005252:	4b76      	ldr	r3, [pc, #472]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a75      	ldr	r2, [pc, #468]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	e01d      	b.n	800529c <HAL_RCC_OscConfig+0xb0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005268:	d10c      	bne.n	8005284 <HAL_RCC_OscConfig+0x98>
 800526a:	4b70      	ldr	r3, [pc, #448]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a6f      	ldr	r2, [pc, #444]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	4b6d      	ldr	r3, [pc, #436]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a6c      	ldr	r2, [pc, #432]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 800527c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	e00b      	b.n	800529c <HAL_RCC_OscConfig+0xb0>
 8005284:	4b69      	ldr	r3, [pc, #420]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a68      	ldr	r2, [pc, #416]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 800528a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	4b66      	ldr	r3, [pc, #408]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a65      	ldr	r2, [pc, #404]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800529a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d013      	beq.n	80052cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a4:	f7fd fb1a 	bl	80028dc <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052ac:	f7fd fb16 	bl	80028dc <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b64      	cmp	r3, #100	@ 0x64
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e207      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052be:	4b5b      	ldr	r3, [pc, #364]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0f0      	beq.n	80052ac <HAL_RCC_OscConfig+0xc0>
 80052ca:	e014      	b.n	80052f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052cc:	f7fd fb06 	bl	80028dc <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d4:	f7fd fb02 	bl	80028dc <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b64      	cmp	r3, #100	@ 0x64
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e1f3      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052e6:	4b51      	ldr	r3, [pc, #324]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0xe8>
 80052f2:	e000      	b.n	80052f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d063      	beq.n	80053ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005302:	4b4a      	ldr	r3, [pc, #296]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 030c 	and.w	r3, r3, #12
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00b      	beq.n	8005326 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800530e:	4b47      	ldr	r3, [pc, #284]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005316:	2b08      	cmp	r3, #8
 8005318:	d11c      	bne.n	8005354 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800531a:	4b44      	ldr	r3, [pc, #272]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d116      	bne.n	8005354 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005326:	4b41      	ldr	r3, [pc, #260]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <HAL_RCC_OscConfig+0x152>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d001      	beq.n	800533e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e1c7      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800533e:	4b3b      	ldr	r3, [pc, #236]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	4937      	ldr	r1, [pc, #220]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 800534e:	4313      	orrs	r3, r2
 8005350:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005352:	e03a      	b.n	80053ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d020      	beq.n	800539e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800535c:	4b34      	ldr	r3, [pc, #208]	@ (8005430 <HAL_RCC_OscConfig+0x244>)
 800535e:	2201      	movs	r2, #1
 8005360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005362:	f7fd fabb 	bl	80028dc <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800536a:	f7fd fab7 	bl	80028dc <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e1a8      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800537c:	4b2b      	ldr	r3, [pc, #172]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005388:	4b28      	ldr	r3, [pc, #160]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	4925      	ldr	r1, [pc, #148]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005398:	4313      	orrs	r3, r2
 800539a:	600b      	str	r3, [r1, #0]
 800539c:	e015      	b.n	80053ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800539e:	4b24      	ldr	r3, [pc, #144]	@ (8005430 <HAL_RCC_OscConfig+0x244>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a4:	f7fd fa9a 	bl	80028dc <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ac:	f7fd fa96 	bl	80028dc <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e187      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053be:	4b1b      	ldr	r3, [pc, #108]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d036      	beq.n	8005444 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d016      	beq.n	800540c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053de:	4b15      	ldr	r3, [pc, #84]	@ (8005434 <HAL_RCC_OscConfig+0x248>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e4:	f7fd fa7a 	bl	80028dc <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ec:	f7fd fa76 	bl	80028dc <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e167      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053fe:	4b0b      	ldr	r3, [pc, #44]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <HAL_RCC_OscConfig+0x200>
 800540a:	e01b      	b.n	8005444 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800540c:	4b09      	ldr	r3, [pc, #36]	@ (8005434 <HAL_RCC_OscConfig+0x248>)
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005412:	f7fd fa63 	bl	80028dc <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005418:	e00e      	b.n	8005438 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800541a:	f7fd fa5f 	bl	80028dc <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d907      	bls.n	8005438 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e150      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
 800542c:	40023800 	.word	0x40023800
 8005430:	42470000 	.word	0x42470000
 8005434:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005438:	4b88      	ldr	r3, [pc, #544]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 800543a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1ea      	bne.n	800541a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 8097 	beq.w	8005580 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005452:	2300      	movs	r3, #0
 8005454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005456:	4b81      	ldr	r3, [pc, #516]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10f      	bne.n	8005482 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005462:	2300      	movs	r3, #0
 8005464:	60bb      	str	r3, [r7, #8]
 8005466:	4b7d      	ldr	r3, [pc, #500]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546a:	4a7c      	ldr	r2, [pc, #496]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 800546c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005470:	6413      	str	r3, [r2, #64]	@ 0x40
 8005472:	4b7a      	ldr	r3, [pc, #488]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800547a:	60bb      	str	r3, [r7, #8]
 800547c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800547e:	2301      	movs	r3, #1
 8005480:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005482:	4b77      	ldr	r3, [pc, #476]	@ (8005660 <HAL_RCC_OscConfig+0x474>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d118      	bne.n	80054c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800548e:	4b74      	ldr	r3, [pc, #464]	@ (8005660 <HAL_RCC_OscConfig+0x474>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a73      	ldr	r2, [pc, #460]	@ (8005660 <HAL_RCC_OscConfig+0x474>)
 8005494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800549a:	f7fd fa1f 	bl	80028dc <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a2:	f7fd fa1b 	bl	80028dc <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e10c      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b4:	4b6a      	ldr	r3, [pc, #424]	@ (8005660 <HAL_RCC_OscConfig+0x474>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d106      	bne.n	80054d6 <HAL_RCC_OscConfig+0x2ea>
 80054c8:	4b64      	ldr	r3, [pc, #400]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80054ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054cc:	4a63      	ldr	r2, [pc, #396]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80054d4:	e01c      	b.n	8005510 <HAL_RCC_OscConfig+0x324>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b05      	cmp	r3, #5
 80054dc:	d10c      	bne.n	80054f8 <HAL_RCC_OscConfig+0x30c>
 80054de:	4b5f      	ldr	r3, [pc, #380]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80054e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054e2:	4a5e      	ldr	r2, [pc, #376]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80054e4:	f043 0304 	orr.w	r3, r3, #4
 80054e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80054ea:	4b5c      	ldr	r3, [pc, #368]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80054ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ee:	4a5b      	ldr	r2, [pc, #364]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80054f0:	f043 0301 	orr.w	r3, r3, #1
 80054f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80054f6:	e00b      	b.n	8005510 <HAL_RCC_OscConfig+0x324>
 80054f8:	4b58      	ldr	r3, [pc, #352]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80054fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054fc:	4a57      	ldr	r2, [pc, #348]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80054fe:	f023 0301 	bic.w	r3, r3, #1
 8005502:	6713      	str	r3, [r2, #112]	@ 0x70
 8005504:	4b55      	ldr	r3, [pc, #340]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005508:	4a54      	ldr	r2, [pc, #336]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 800550a:	f023 0304 	bic.w	r3, r3, #4
 800550e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d015      	beq.n	8005544 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fd f9e0 	bl	80028dc <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800551e:	e00a      	b.n	8005536 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005520:	f7fd f9dc 	bl	80028dc <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e0cb      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005536:	4b49      	ldr	r3, [pc, #292]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0ee      	beq.n	8005520 <HAL_RCC_OscConfig+0x334>
 8005542:	e014      	b.n	800556e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005544:	f7fd f9ca 	bl	80028dc <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800554a:	e00a      	b.n	8005562 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554c:	f7fd f9c6 	bl	80028dc <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e0b5      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005562:	4b3e      	ldr	r3, [pc, #248]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1ee      	bne.n	800554c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d105      	bne.n	8005580 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005574:	4b39      	ldr	r3, [pc, #228]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005578:	4a38      	ldr	r2, [pc, #224]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 800557a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800557e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 80a1 	beq.w	80056cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800558a:	4b34      	ldr	r3, [pc, #208]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 030c 	and.w	r3, r3, #12
 8005592:	2b08      	cmp	r3, #8
 8005594:	d05c      	beq.n	8005650 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d141      	bne.n	8005622 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800559e:	4b31      	ldr	r3, [pc, #196]	@ (8005664 <HAL_RCC_OscConfig+0x478>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a4:	f7fd f99a 	bl	80028dc <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ac:	f7fd f996 	bl	80028dc <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e087      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055be:	4b27      	ldr	r3, [pc, #156]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69da      	ldr	r2, [r3, #28]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d8:	019b      	lsls	r3, r3, #6
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	085b      	lsrs	r3, r3, #1
 80055e2:	3b01      	subs	r3, #1
 80055e4:	041b      	lsls	r3, r3, #16
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	061b      	lsls	r3, r3, #24
 80055ee:	491b      	ldr	r1, [pc, #108]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005664 <HAL_RCC_OscConfig+0x478>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055fa:	f7fd f96f 	bl	80028dc <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005602:	f7fd f96b 	bl	80028dc <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e05c      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005614:	4b11      	ldr	r3, [pc, #68]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0f0      	beq.n	8005602 <HAL_RCC_OscConfig+0x416>
 8005620:	e054      	b.n	80056cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005622:	4b10      	ldr	r3, [pc, #64]	@ (8005664 <HAL_RCC_OscConfig+0x478>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005628:	f7fd f958 	bl	80028dc <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005630:	f7fd f954 	bl	80028dc <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e045      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005642:	4b06      	ldr	r3, [pc, #24]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x444>
 800564e:	e03d      	b.n	80056cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d107      	bne.n	8005668 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e038      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
 800565c:	40023800 	.word	0x40023800
 8005660:	40007000 	.word	0x40007000
 8005664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005668:	4b1b      	ldr	r3, [pc, #108]	@ (80056d8 <HAL_RCC_OscConfig+0x4ec>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d028      	beq.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005680:	429a      	cmp	r2, r3
 8005682:	d121      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568e:	429a      	cmp	r2, r3
 8005690:	d11a      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005698:	4013      	ands	r3, r2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800569e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d111      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ae:	085b      	lsrs	r3, r3, #1
 80056b0:	3b01      	subs	r3, #1
 80056b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d107      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d001      	beq.n	80056cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e000      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40023800 	.word	0x40023800

080056dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0cc      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056f0:	4b68      	ldr	r3, [pc, #416]	@ (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 030f 	and.w	r3, r3, #15
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d90c      	bls.n	8005718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fe:	4b65      	ldr	r3, [pc, #404]	@ (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005706:	4b63      	ldr	r3, [pc, #396]	@ (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d001      	beq.n	8005718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e0b8      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d020      	beq.n	8005766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005730:	4b59      	ldr	r3, [pc, #356]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	4a58      	ldr	r2, [pc, #352]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800573a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005748:	4b53      	ldr	r3, [pc, #332]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	4a52      	ldr	r2, [pc, #328]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005754:	4b50      	ldr	r3, [pc, #320]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	494d      	ldr	r1, [pc, #308]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	4313      	orrs	r3, r2
 8005764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d044      	beq.n	80057fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d107      	bne.n	800578a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577a:	4b47      	ldr	r3, [pc, #284]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d119      	bne.n	80057ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e07f      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d003      	beq.n	800579a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005796:	2b03      	cmp	r3, #3
 8005798:	d107      	bne.n	80057aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800579a:	4b3f      	ldr	r3, [pc, #252]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d109      	bne.n	80057ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e06f      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e067      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057ba:	4b37      	ldr	r3, [pc, #220]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f023 0203 	bic.w	r2, r3, #3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	4934      	ldr	r1, [pc, #208]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057cc:	f7fd f886 	bl	80028dc <HAL_GetTick>
 80057d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057d2:	e00a      	b.n	80057ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057d4:	f7fd f882 	bl	80028dc <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e04f      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 020c 	and.w	r2, r3, #12
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d1eb      	bne.n	80057d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057fc:	4b25      	ldr	r3, [pc, #148]	@ (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d20c      	bcs.n	8005824 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800580a:	4b22      	ldr	r3, [pc, #136]	@ (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005812:	4b20      	ldr	r3, [pc, #128]	@ (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	429a      	cmp	r2, r3
 800581e:	d001      	beq.n	8005824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e032      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005830:	4b19      	ldr	r3, [pc, #100]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	4916      	ldr	r1, [pc, #88]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	4313      	orrs	r3, r2
 8005840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800584e:	4b12      	ldr	r3, [pc, #72]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	490e      	ldr	r1, [pc, #56]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	4313      	orrs	r3, r2
 8005860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005862:	f000 f821 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8005866:	4602      	mov	r2, r0
 8005868:	4b0b      	ldr	r3, [pc, #44]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	490a      	ldr	r1, [pc, #40]	@ (800589c <HAL_RCC_ClockConfig+0x1c0>)
 8005874:	5ccb      	ldrb	r3, [r1, r3]
 8005876:	fa22 f303 	lsr.w	r3, r2, r3
 800587a:	4a09      	ldr	r2, [pc, #36]	@ (80058a0 <HAL_RCC_ClockConfig+0x1c4>)
 800587c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800587e:	4b09      	ldr	r3, [pc, #36]	@ (80058a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f7fc ffe6 	bl	8002854 <HAL_InitTick>

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	40023c00 	.word	0x40023c00
 8005898:	40023800 	.word	0x40023800
 800589c:	0800b830 	.word	0x0800b830
 80058a0:	20000010 	.word	0x20000010
 80058a4:	20000090 	.word	0x20000090

080058a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058ac:	b094      	sub	sp, #80	@ 0x50
 80058ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058c0:	4b79      	ldr	r3, [pc, #484]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 030c 	and.w	r3, r3, #12
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d00d      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x40>
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	f200 80e1 	bhi.w	8005a94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_RCC_GetSysClockFreq+0x34>
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d003      	beq.n	80058e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80058da:	e0db      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058dc:	4b73      	ldr	r3, [pc, #460]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x204>)
 80058de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058e0:	e0db      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058e2:	4b73      	ldr	r3, [pc, #460]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0x208>)
 80058e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058e6:	e0d8      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058e8:	4b6f      	ldr	r3, [pc, #444]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058f2:	4b6d      	ldr	r3, [pc, #436]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d063      	beq.n	80059c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058fe:	4b6a      	ldr	r3, [pc, #424]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	099b      	lsrs	r3, r3, #6
 8005904:	2200      	movs	r2, #0
 8005906:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005908:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800590a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005910:	633b      	str	r3, [r7, #48]	@ 0x30
 8005912:	2300      	movs	r3, #0
 8005914:	637b      	str	r3, [r7, #52]	@ 0x34
 8005916:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800591a:	4622      	mov	r2, r4
 800591c:	462b      	mov	r3, r5
 800591e:	f04f 0000 	mov.w	r0, #0
 8005922:	f04f 0100 	mov.w	r1, #0
 8005926:	0159      	lsls	r1, r3, #5
 8005928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800592c:	0150      	lsls	r0, r2, #5
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4621      	mov	r1, r4
 8005934:	1a51      	subs	r1, r2, r1
 8005936:	6139      	str	r1, [r7, #16]
 8005938:	4629      	mov	r1, r5
 800593a:	eb63 0301 	sbc.w	r3, r3, r1
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800594c:	4659      	mov	r1, fp
 800594e:	018b      	lsls	r3, r1, #6
 8005950:	4651      	mov	r1, sl
 8005952:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005956:	4651      	mov	r1, sl
 8005958:	018a      	lsls	r2, r1, #6
 800595a:	4651      	mov	r1, sl
 800595c:	ebb2 0801 	subs.w	r8, r2, r1
 8005960:	4659      	mov	r1, fp
 8005962:	eb63 0901 	sbc.w	r9, r3, r1
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800597a:	4690      	mov	r8, r2
 800597c:	4699      	mov	r9, r3
 800597e:	4623      	mov	r3, r4
 8005980:	eb18 0303 	adds.w	r3, r8, r3
 8005984:	60bb      	str	r3, [r7, #8]
 8005986:	462b      	mov	r3, r5
 8005988:	eb49 0303 	adc.w	r3, r9, r3
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	f04f 0200 	mov.w	r2, #0
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800599a:	4629      	mov	r1, r5
 800599c:	024b      	lsls	r3, r1, #9
 800599e:	4621      	mov	r1, r4
 80059a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059a4:	4621      	mov	r1, r4
 80059a6:	024a      	lsls	r2, r1, #9
 80059a8:	4610      	mov	r0, r2
 80059aa:	4619      	mov	r1, r3
 80059ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059ae:	2200      	movs	r2, #0
 80059b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059b8:	f7fa fc6a 	bl	8000290 <__aeabi_uldivmod>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4613      	mov	r3, r2
 80059c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c4:	e058      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059c6:	4b38      	ldr	r3, [pc, #224]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	099b      	lsrs	r3, r3, #6
 80059cc:	2200      	movs	r2, #0
 80059ce:	4618      	mov	r0, r3
 80059d0:	4611      	mov	r1, r2
 80059d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059d6:	623b      	str	r3, [r7, #32]
 80059d8:	2300      	movs	r3, #0
 80059da:	627b      	str	r3, [r7, #36]	@ 0x24
 80059dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059e0:	4642      	mov	r2, r8
 80059e2:	464b      	mov	r3, r9
 80059e4:	f04f 0000 	mov.w	r0, #0
 80059e8:	f04f 0100 	mov.w	r1, #0
 80059ec:	0159      	lsls	r1, r3, #5
 80059ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059f2:	0150      	lsls	r0, r2, #5
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	4641      	mov	r1, r8
 80059fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80059fe:	4649      	mov	r1, r9
 8005a00:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a18:	ebb2 040a 	subs.w	r4, r2, sl
 8005a1c:	eb63 050b 	sbc.w	r5, r3, fp
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	00eb      	lsls	r3, r5, #3
 8005a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a2e:	00e2      	lsls	r2, r4, #3
 8005a30:	4614      	mov	r4, r2
 8005a32:	461d      	mov	r5, r3
 8005a34:	4643      	mov	r3, r8
 8005a36:	18e3      	adds	r3, r4, r3
 8005a38:	603b      	str	r3, [r7, #0]
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	eb45 0303 	adc.w	r3, r5, r3
 8005a40:	607b      	str	r3, [r7, #4]
 8005a42:	f04f 0200 	mov.w	r2, #0
 8005a46:	f04f 0300 	mov.w	r3, #0
 8005a4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a4e:	4629      	mov	r1, r5
 8005a50:	028b      	lsls	r3, r1, #10
 8005a52:	4621      	mov	r1, r4
 8005a54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a58:	4621      	mov	r1, r4
 8005a5a:	028a      	lsls	r2, r1, #10
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a62:	2200      	movs	r2, #0
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	61fa      	str	r2, [r7, #28]
 8005a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a6c:	f7fa fc10 	bl	8000290 <__aeabi_uldivmod>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4613      	mov	r3, r2
 8005a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a78:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	0c1b      	lsrs	r3, r3, #16
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	3301      	adds	r3, #1
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005a88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a92:	e002      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a94:	4b05      	ldr	r3, [pc, #20]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x204>)
 8005a96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3750      	adds	r7, #80	@ 0x50
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	00f42400 	.word	0x00f42400
 8005ab0:	007a1200 	.word	0x007a1200

08005ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ab8:	4b03      	ldr	r3, [pc, #12]	@ (8005ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aba:	681b      	ldr	r3, [r3, #0]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	20000010 	.word	0x20000010

08005acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10b      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d075      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b00:	4b91      	ldr	r3, [pc, #580]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b06:	f7fc fee9 	bl	80028dc <HAL_GetTick>
 8005b0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b0c:	e008      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b0e:	f7fc fee5 	bl	80028dc <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e189      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b20:	4b8a      	ldr	r3, [pc, #552]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1f0      	bne.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d009      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	019a      	lsls	r2, r3, #6
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	071b      	lsls	r3, r3, #28
 8005b44:	4981      	ldr	r1, [pc, #516]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01f      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b58:	4b7c      	ldr	r3, [pc, #496]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b5e:	0f1b      	lsrs	r3, r3, #28
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	019a      	lsls	r2, r3, #6
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	061b      	lsls	r3, r3, #24
 8005b72:	431a      	orrs	r2, r3
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	071b      	lsls	r3, r3, #28
 8005b78:	4974      	ldr	r1, [pc, #464]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b80:	4b72      	ldr	r3, [pc, #456]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b86:	f023 021f 	bic.w	r2, r3, #31
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	496e      	ldr	r1, [pc, #440]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00d      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	019a      	lsls	r2, r3, #6
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	061b      	lsls	r3, r3, #24
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	071b      	lsls	r3, r3, #28
 8005bb8:	4964      	ldr	r1, [pc, #400]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bc0:	4b61      	ldr	r3, [pc, #388]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bc6:	f7fc fe89 	bl	80028dc <HAL_GetTick>
 8005bca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bce:	f7fc fe85 	bl	80028dc <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e129      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005be0:	4b5a      	ldr	r3, [pc, #360]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0f0      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d105      	bne.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d079      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c04:	4b52      	ldr	r3, [pc, #328]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c0a:	f7fc fe67 	bl	80028dc <HAL_GetTick>
 8005c0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c10:	e008      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c12:	f7fc fe63 	bl	80028dc <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e107      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c24:	4b49      	ldr	r3, [pc, #292]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c30:	d0ef      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d020      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c3e:	4b43      	ldr	r3, [pc, #268]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c44:	0f1b      	lsrs	r3, r3, #28
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	019a      	lsls	r2, r3, #6
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	061b      	lsls	r3, r3, #24
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	071b      	lsls	r3, r3, #28
 8005c5e:	493b      	ldr	r1, [pc, #236]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c66:	4b39      	ldr	r3, [pc, #228]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c6c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	4934      	ldr	r1, [pc, #208]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01e      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c92:	0e1b      	lsrs	r3, r3, #24
 8005c94:	f003 030f 	and.w	r3, r3, #15
 8005c98:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	019a      	lsls	r2, r3, #6
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	061b      	lsls	r3, r3, #24
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	071b      	lsls	r3, r3, #28
 8005cac:	4927      	ldr	r1, [pc, #156]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005cb4:	4b25      	ldr	r3, [pc, #148]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc2:	4922      	ldr	r1, [pc, #136]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005cca:	4b21      	ldr	r3, [pc, #132]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cd0:	f7fc fe04 	bl	80028dc <HAL_GetTick>
 8005cd4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cd8:	f7fc fe00 	bl	80028dc <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e0a4      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cea:	4b18      	ldr	r3, [pc, #96]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cf6:	d1ef      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 808b 	beq.w	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	4b10      	ldr	r3, [pc, #64]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d16:	4b0d      	ldr	r3, [pc, #52]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d22:	4b0c      	ldr	r3, [pc, #48]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a0b      	ldr	r2, [pc, #44]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d2e:	f7fc fdd5 	bl	80028dc <HAL_GetTick>
 8005d32:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d34:	e010      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d36:	f7fc fdd1 	bl	80028dc <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d909      	bls.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e075      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005d48:	42470068 	.word	0x42470068
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	42470070 	.word	0x42470070
 8005d54:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d58:	4b38      	ldr	r3, [pc, #224]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0e8      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d64:	4b36      	ldr	r3, [pc, #216]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d6c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d02f      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d028      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d82:	4b2f      	ldr	r3, [pc, #188]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d8e:	2201      	movs	r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d92:	4b2c      	ldr	r3, [pc, #176]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d98:	4a29      	ldr	r2, [pc, #164]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d9e:	4b28      	ldr	r3, [pc, #160]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d114      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005daa:	f7fc fd97 	bl	80028dc <HAL_GetTick>
 8005dae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db0:	e00a      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db2:	f7fc fd93 	bl	80028dc <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e035      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0ee      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ddc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005de0:	d10d      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005de2:	4b17      	ldr	r3, [pc, #92]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005df6:	4912      	ldr	r1, [pc, #72]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	608b      	str	r3, [r1, #8]
 8005dfc:	e005      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005dfe:	4b10      	ldr	r3, [pc, #64]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	4a0f      	ldr	r2, [pc, #60]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e04:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e08:	6093      	str	r3, [r2, #8]
 8005e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e16:	490a      	ldr	r1, [pc, #40]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0310 	and.w	r3, r3, #16
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005e2e:	4b06      	ldr	r3, [pc, #24]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005e30:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	40007000 	.word	0x40007000
 8005e40:	40023800 	.word	0x40023800
 8005e44:	42470e40 	.word	0x42470e40
 8005e48:	424711e0 	.word	0x424711e0

08005e4c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e025      	b.n	8005eac <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d106      	bne.n	8005e7a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f81d 	bl	8005eb4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	f000 fe93 	bl	8006bb8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	f000 fee8 	bl	8006c72 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005eda:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005edc:	7dfb      	ldrb	r3, [r7, #23]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d101      	bne.n	8005ee6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	e021      	b.n	8005f2a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d002      	beq.n	8005ef2 <HAL_SDRAM_SendCommand+0x2a>
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
 8005eee:	2b05      	cmp	r3, #5
 8005ef0:	d118      	bne.n	8005f24 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	68b9      	ldr	r1, [r7, #8]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 ff1e 	bl	8006d44 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d104      	bne.n	8005f1a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2205      	movs	r2, #5
 8005f14:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005f18:	e006      	b.n	8005f28 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005f22:	e001      	b.n	8005f28 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d101      	bne.n	8005f4c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e016      	b.n	8005f7a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d10f      	bne.n	8005f78 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 ff29 	bl	8006dbe <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	e000      	b.n	8005f7a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e07b      	b.n	800608c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d108      	bne.n	8005fae <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fa4:	d009      	beq.n	8005fba <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	61da      	str	r2, [r3, #28]
 8005fac:	e005      	b.n	8005fba <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d106      	bne.n	8005fda <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f885 	bl	80060e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2202      	movs	r2, #2
 8005fde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ff0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	431a      	orrs	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800603e:	ea42 0103 	orr.w	r1, r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006046:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	0c1b      	lsrs	r3, r3, #16
 8006058:	f003 0104 	and.w	r1, r3, #4
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006060:	f003 0210 	and.w	r2, r3, #16
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69da      	ldr	r2, [r3, #28]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800607a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e01a      	b.n	80060dc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2202      	movs	r2, #2
 80060aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f81a 	bl	80060f8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	4613      	mov	r3, r2
 800611a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800611c:	f7fc fbde 	bl	80028dc <HAL_GetTick>
 8006120:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b01      	cmp	r3, #1
 8006130:	d001      	beq.n	8006136 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006132:	2302      	movs	r3, #2
 8006134:	e12a      	b.n	800638c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <HAL_SPI_Transmit+0x36>
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e122      	b.n	800638c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_SPI_Transmit+0x48>
 8006150:	2302      	movs	r3, #2
 8006152:	e11b      	b.n	800638c <HAL_SPI_Transmit+0x280>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2203      	movs	r2, #3
 8006160:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	88fa      	ldrh	r2, [r7, #6]
 8006174:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	88fa      	ldrh	r2, [r7, #6]
 800617a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061a2:	d10f      	bne.n	80061c4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ce:	2b40      	cmp	r3, #64	@ 0x40
 80061d0:	d007      	beq.n	80061e2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061ea:	d152      	bne.n	8006292 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_SPI_Transmit+0xee>
 80061f4:	8b7b      	ldrh	r3, [r7, #26]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d145      	bne.n	8006286 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fe:	881a      	ldrh	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800620a:	1c9a      	adds	r2, r3, #2
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006214:	b29b      	uxth	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	b29a      	uxth	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800621e:	e032      	b.n	8006286 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b02      	cmp	r3, #2
 800622c:	d112      	bne.n	8006254 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006232:	881a      	ldrh	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623e:	1c9a      	adds	r2, r3, #2
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006252:	e018      	b.n	8006286 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006254:	f7fc fb42 	bl	80028dc <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d803      	bhi.n	800626c <HAL_SPI_Transmit+0x160>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626a:	d102      	bne.n	8006272 <HAL_SPI_Transmit+0x166>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d109      	bne.n	8006286 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e082      	b.n	800638c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1c7      	bne.n	8006220 <HAL_SPI_Transmit+0x114>
 8006290:	e053      	b.n	800633a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <HAL_SPI_Transmit+0x194>
 800629a:	8b7b      	ldrh	r3, [r7, #26]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d147      	bne.n	8006330 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	330c      	adds	r3, #12
 80062aa:	7812      	ldrb	r2, [r2, #0]
 80062ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062bc:	b29b      	uxth	r3, r3
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062c6:	e033      	b.n	8006330 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d113      	bne.n	80062fe <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	330c      	adds	r3, #12
 80062e0:	7812      	ldrb	r2, [r2, #0]
 80062e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80062fc:	e018      	b.n	8006330 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062fe:	f7fc faed 	bl	80028dc <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d803      	bhi.n	8006316 <HAL_SPI_Transmit+0x20a>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d102      	bne.n	800631c <HAL_SPI_Transmit+0x210>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d109      	bne.n	8006330 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e02d      	b.n	800638c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006334:	b29b      	uxth	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1c6      	bne.n	80062c8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fbe6 	bl	8006b10 <SPI_EndRxTxTransaction>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2220      	movs	r2, #32
 800634e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10a      	bne.n	800636e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800638a:	2300      	movs	r3, #0
  }
}
 800638c:	4618      	mov	r0, r3
 800638e:	3720      	adds	r7, #32
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	4613      	mov	r3, r2
 80063a2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d001      	beq.n	80063b4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80063b0:	2302      	movs	r3, #2
 80063b2:	e104      	b.n	80065be <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063bc:	d112      	bne.n	80063e4 <HAL_SPI_Receive+0x50>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10e      	bne.n	80063e4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2204      	movs	r2, #4
 80063ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80063ce:	88fa      	ldrh	r2, [r7, #6]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	4613      	mov	r3, r2
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 f8f3 	bl	80065c6 <HAL_SPI_TransmitReceive>
 80063e0:	4603      	mov	r3, r0
 80063e2:	e0ec      	b.n	80065be <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063e4:	f7fc fa7a 	bl	80028dc <HAL_GetTick>
 80063e8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <HAL_SPI_Receive+0x62>
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e0e1      	b.n	80065be <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_SPI_Receive+0x74>
 8006404:	2302      	movs	r3, #2
 8006406:	e0da      	b.n	80065be <HAL_SPI_Receive+0x22a>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2204      	movs	r2, #4
 8006414:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	88fa      	ldrh	r2, [r7, #6]
 8006428:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	88fa      	ldrh	r2, [r7, #6]
 800642e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006456:	d10f      	bne.n	8006478 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006466:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006476:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006482:	2b40      	cmp	r3, #64	@ 0x40
 8006484:	d007      	beq.n	8006496 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006494:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d170      	bne.n	8006580 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800649e:	e035      	b.n	800650c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d115      	bne.n	80064da <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f103 020c 	add.w	r2, r3, #12
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ba:	7812      	ldrb	r2, [r2, #0]
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064d8:	e018      	b.n	800650c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064da:	f7fc f9ff 	bl	80028dc <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d803      	bhi.n	80064f2 <HAL_SPI_Receive+0x15e>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f0:	d102      	bne.n	80064f8 <HAL_SPI_Receive+0x164>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d109      	bne.n	800650c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e058      	b.n	80065be <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1c4      	bne.n	80064a0 <HAL_SPI_Receive+0x10c>
 8006516:	e038      	b.n	800658a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b01      	cmp	r3, #1
 8006524:	d113      	bne.n	800654e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006530:	b292      	uxth	r2, r2
 8006532:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006538:	1c9a      	adds	r2, r3, #2
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006542:	b29b      	uxth	r3, r3
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800654c:	e018      	b.n	8006580 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800654e:	f7fc f9c5 	bl	80028dc <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d803      	bhi.n	8006566 <HAL_SPI_Receive+0x1d2>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006564:	d102      	bne.n	800656c <HAL_SPI_Receive+0x1d8>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d109      	bne.n	8006580 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e01e      	b.n	80065be <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006584:	b29b      	uxth	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1c6      	bne.n	8006518 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f000 fa58 	bl	8006a44 <SPI_EndRxTransaction>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2220      	movs	r2, #32
 800659e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80065bc:	2300      	movs	r3, #0
  }
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b08a      	sub	sp, #40	@ 0x28
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	607a      	str	r2, [r7, #4]
 80065d2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065d4:	2301      	movs	r3, #1
 80065d6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065d8:	f7fc f980 	bl	80028dc <HAL_GetTick>
 80065dc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065e4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80065ec:	887b      	ldrh	r3, [r7, #2]
 80065ee:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065f0:	7ffb      	ldrb	r3, [r7, #31]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d00c      	beq.n	8006610 <HAL_SPI_TransmitReceive+0x4a>
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065fc:	d106      	bne.n	800660c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d102      	bne.n	800660c <HAL_SPI_TransmitReceive+0x46>
 8006606:	7ffb      	ldrb	r3, [r7, #31]
 8006608:	2b04      	cmp	r3, #4
 800660a:	d001      	beq.n	8006610 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800660c:	2302      	movs	r3, #2
 800660e:	e17f      	b.n	8006910 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <HAL_SPI_TransmitReceive+0x5c>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <HAL_SPI_TransmitReceive+0x5c>
 800661c:	887b      	ldrh	r3, [r7, #2]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e174      	b.n	8006910 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_SPI_TransmitReceive+0x6e>
 8006630:	2302      	movs	r3, #2
 8006632:	e16d      	b.n	8006910 <HAL_SPI_TransmitReceive+0x34a>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b04      	cmp	r3, #4
 8006646:	d003      	beq.n	8006650 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2205      	movs	r2, #5
 800664c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	887a      	ldrh	r2, [r7, #2]
 8006660:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	887a      	ldrh	r2, [r7, #2]
 8006666:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	887a      	ldrh	r2, [r7, #2]
 8006672:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	887a      	ldrh	r2, [r7, #2]
 8006678:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006690:	2b40      	cmp	r3, #64	@ 0x40
 8006692:	d007      	beq.n	80066a4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ac:	d17e      	bne.n	80067ac <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <HAL_SPI_TransmitReceive+0xf6>
 80066b6:	8afb      	ldrh	r3, [r7, #22]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d16c      	bne.n	8006796 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c0:	881a      	ldrh	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066cc:	1c9a      	adds	r2, r3, #2
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	3b01      	subs	r3, #1
 80066da:	b29a      	uxth	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066e0:	e059      	b.n	8006796 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d11b      	bne.n	8006728 <HAL_SPI_TransmitReceive+0x162>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d016      	beq.n	8006728 <HAL_SPI_TransmitReceive+0x162>
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d113      	bne.n	8006728 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006704:	881a      	ldrh	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006710:	1c9a      	adds	r2, r3, #2
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800671a:	b29b      	uxth	r3, r3
 800671c:	3b01      	subs	r3, #1
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b01      	cmp	r3, #1
 8006734:	d119      	bne.n	800676a <HAL_SPI_TransmitReceive+0x1a4>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d014      	beq.n	800676a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674a:	b292      	uxth	r2, r2
 800674c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006752:	1c9a      	adds	r2, r3, #2
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006766:	2301      	movs	r3, #1
 8006768:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800676a:	f7fc f8b7 	bl	80028dc <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006776:	429a      	cmp	r2, r3
 8006778:	d80d      	bhi.n	8006796 <HAL_SPI_TransmitReceive+0x1d0>
 800677a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006780:	d009      	beq.n	8006796 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e0bc      	b.n	8006910 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800679a:	b29b      	uxth	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1a0      	bne.n	80066e2 <HAL_SPI_TransmitReceive+0x11c>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d19b      	bne.n	80066e2 <HAL_SPI_TransmitReceive+0x11c>
 80067aa:	e082      	b.n	80068b2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <HAL_SPI_TransmitReceive+0x1f4>
 80067b4:	8afb      	ldrh	r3, [r7, #22]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d171      	bne.n	800689e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	330c      	adds	r3, #12
 80067c4:	7812      	ldrb	r2, [r2, #0]
 80067c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067e0:	e05d      	b.n	800689e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d11c      	bne.n	800682a <HAL_SPI_TransmitReceive+0x264>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d017      	beq.n	800682a <HAL_SPI_TransmitReceive+0x264>
 80067fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d114      	bne.n	800682a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	330c      	adds	r3, #12
 800680a:	7812      	ldrb	r2, [r2, #0]
 800680c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800681c:	b29b      	uxth	r3, r3
 800681e:	3b01      	subs	r3, #1
 8006820:	b29a      	uxth	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b01      	cmp	r3, #1
 8006836:	d119      	bne.n	800686c <HAL_SPI_TransmitReceive+0x2a6>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d014      	beq.n	800686c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68da      	ldr	r2, [r3, #12]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684c:	b2d2      	uxtb	r2, r2
 800684e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006868:	2301      	movs	r3, #1
 800686a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800686c:	f7fc f836 	bl	80028dc <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006878:	429a      	cmp	r2, r3
 800687a:	d803      	bhi.n	8006884 <HAL_SPI_TransmitReceive+0x2be>
 800687c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006882:	d102      	bne.n	800688a <HAL_SPI_TransmitReceive+0x2c4>
 8006884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006886:	2b00      	cmp	r3, #0
 8006888:	d109      	bne.n	800689e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e038      	b.n	8006910 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d19c      	bne.n	80067e2 <HAL_SPI_TransmitReceive+0x21c>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d197      	bne.n	80067e2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068b2:	6a3a      	ldr	r2, [r7, #32]
 80068b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f92a 	bl	8006b10 <SPI_EndRxTxTransaction>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d008      	beq.n	80068d4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2220      	movs	r2, #32
 80068c6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e01d      	b.n	8006910 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10a      	bne.n	80068f2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068dc:	2300      	movs	r3, #0
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	613b      	str	r3, [r7, #16]
 80068f0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e000      	b.n	8006910 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800690e:	2300      	movs	r3, #0
  }
}
 8006910:	4618      	mov	r0, r3
 8006912:	3728      	adds	r7, #40	@ 0x28
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006926:	b2db      	uxtb	r3, r3
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	4613      	mov	r3, r2
 8006942:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006944:	f7fb ffca 	bl	80028dc <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694c:	1a9b      	subs	r3, r3, r2
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	4413      	add	r3, r2
 8006952:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006954:	f7fb ffc2 	bl	80028dc <HAL_GetTick>
 8006958:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800695a:	4b39      	ldr	r3, [pc, #228]	@ (8006a40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	015b      	lsls	r3, r3, #5
 8006960:	0d1b      	lsrs	r3, r3, #20
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	fb02 f303 	mul.w	r3, r2, r3
 8006968:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800696a:	e054      	b.n	8006a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006972:	d050      	beq.n	8006a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006974:	f7fb ffb2 	bl	80028dc <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	429a      	cmp	r2, r3
 8006982:	d902      	bls.n	800698a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d13d      	bne.n	8006a06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006998:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069a2:	d111      	bne.n	80069c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ac:	d004      	beq.n	80069b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069b6:	d107      	bne.n	80069c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069d0:	d10f      	bne.n	80069f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e017      	b.n	8006a36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	bf0c      	ite	eq
 8006a26:	2301      	moveq	r3, #1
 8006a28:	2300      	movne	r3, #0
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d19b      	bne.n	800696c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3720      	adds	r7, #32
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20000010 	.word	0x20000010

08006a44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a58:	d111      	bne.n	8006a7e <SPI_EndRxTransaction+0x3a>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a62:	d004      	beq.n	8006a6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a6c:	d107      	bne.n	8006a7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a7c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a86:	d12a      	bne.n	8006ade <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a90:	d012      	beq.n	8006ab8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	2180      	movs	r1, #128	@ 0x80
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f7ff ff49 	bl	8006934 <SPI_WaitFlagStateUntilTimeout>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d02d      	beq.n	8006b04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aac:	f043 0220 	orr.w	r2, r3, #32
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e026      	b.n	8006b06 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff ff36 	bl	8006934 <SPI_WaitFlagStateUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d01a      	beq.n	8006b04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad2:	f043 0220 	orr.w	r2, r3, #32
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e013      	b.n	8006b06 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f7ff ff23 	bl	8006934 <SPI_WaitFlagStateUntilTimeout>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d007      	beq.n	8006b04 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af8:	f043 0220 	orr.w	r2, r3, #32
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e000      	b.n	8006b06 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2201      	movs	r2, #1
 8006b24:	2102      	movs	r1, #2
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f7ff ff04 	bl	8006934 <SPI_WaitFlagStateUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d007      	beq.n	8006b42 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b36:	f043 0220 	orr.w	r2, r3, #32
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e032      	b.n	8006ba8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b42:	4b1b      	ldr	r3, [pc, #108]	@ (8006bb0 <SPI_EndRxTxTransaction+0xa0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1b      	ldr	r2, [pc, #108]	@ (8006bb4 <SPI_EndRxTxTransaction+0xa4>)
 8006b48:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4c:	0d5b      	lsrs	r3, r3, #21
 8006b4e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006b52:	fb02 f303 	mul.w	r3, r2, r3
 8006b56:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b60:	d112      	bne.n	8006b88 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2180      	movs	r1, #128	@ 0x80
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff fee1 	bl	8006934 <SPI_WaitFlagStateUntilTimeout>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d016      	beq.n	8006ba6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b7c:	f043 0220 	orr.w	r2, r3, #32
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e00f      	b.n	8006ba8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	3b01      	subs	r3, #1
 8006b92:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b9e:	2b80      	cmp	r3, #128	@ 0x80
 8006ba0:	d0f2      	beq.n	8006b88 <SPI_EndRxTxTransaction+0x78>
 8006ba2:	e000      	b.n	8006ba6 <SPI_EndRxTxTransaction+0x96>
        break;
 8006ba4:	bf00      	nop
  }

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20000010 	.word	0x20000010
 8006bb4:	165e9f81 	.word	0x165e9f81

08006bb8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d123      	bne.n	8006c12 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006bd2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	6851      	ldr	r1, [r2, #4]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	6892      	ldr	r2, [r2, #8]
 8006bde:	4311      	orrs	r1, r2
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	68d2      	ldr	r2, [r2, #12]
 8006be4:	4311      	orrs	r1, r2
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	6912      	ldr	r2, [r2, #16]
 8006bea:	4311      	orrs	r1, r2
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	6952      	ldr	r2, [r2, #20]
 8006bf0:	4311      	orrs	r1, r2
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	6992      	ldr	r2, [r2, #24]
 8006bf6:	4311      	orrs	r1, r2
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	69d2      	ldr	r2, [r2, #28]
 8006bfc:	4311      	orrs	r1, r2
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	6a12      	ldr	r2, [r2, #32]
 8006c02:	4311      	orrs	r1, r2
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	e028      	b.n	8006c64 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	69d9      	ldr	r1, [r3, #28]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	4319      	orrs	r1, r3
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006c38:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	6851      	ldr	r1, [r2, #4]
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	6892      	ldr	r2, [r2, #8]
 8006c44:	4311      	orrs	r1, r2
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	68d2      	ldr	r2, [r2, #12]
 8006c4a:	4311      	orrs	r1, r2
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	6912      	ldr	r2, [r2, #16]
 8006c50:	4311      	orrs	r1, r2
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	6952      	ldr	r2, [r2, #20]
 8006c56:	4311      	orrs	r1, r2
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	6992      	ldr	r2, [r2, #24]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b085      	sub	sp, #20
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	60f8      	str	r0, [r7, #12]
 8006c7a:	60b9      	str	r1, [r7, #8]
 8006c7c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d128      	bne.n	8006cd6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	1e59      	subs	r1, r3, #1
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	4319      	orrs	r1, r3
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	021b      	lsls	r3, r3, #8
 8006ca4:	4319      	orrs	r1, r3
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	031b      	lsls	r3, r3, #12
 8006cae:	4319      	orrs	r1, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	041b      	lsls	r3, r3, #16
 8006cb8:	4319      	orrs	r1, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	051b      	lsls	r3, r3, #20
 8006cc2:	4319      	orrs	r1, r3
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	061b      	lsls	r3, r3, #24
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	609a      	str	r2, [r3, #8]
 8006cd4:	e02f      	b.n	8006d36 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006cde:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	68d2      	ldr	r2, [r2, #12]
 8006ce6:	3a01      	subs	r2, #1
 8006ce8:	0311      	lsls	r1, r2, #12
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	6952      	ldr	r2, [r2, #20]
 8006cee:	3a01      	subs	r2, #1
 8006cf0:	0512      	lsls	r2, r2, #20
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	1e59      	subs	r1, r3, #1
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	4319      	orrs	r1, r3
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	4319      	orrs	r1, r3
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	3b01      	subs	r3, #1
 8006d22:	041b      	lsls	r3, r3, #16
 8006d24:	4319      	orrs	r1, r3
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	061b      	lsls	r3, r3, #24
 8006d2e:	430b      	orrs	r3, r1
 8006d30:	431a      	orrs	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	0d9b      	lsrs	r3, r3, #22
 8006d5a:	059b      	lsls	r3, r3, #22
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	6811      	ldr	r1, [r2, #0]
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	6852      	ldr	r2, [r2, #4]
 8006d64:	4311      	orrs	r1, r2
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	6892      	ldr	r2, [r2, #8]
 8006d6a:	3a01      	subs	r2, #1
 8006d6c:	0152      	lsls	r2, r2, #5
 8006d6e:	4311      	orrs	r1, r2
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	68d2      	ldr	r2, [r2, #12]
 8006d74:	0252      	lsls	r2, r2, #9
 8006d76:	430a      	orrs	r2, r1
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006d7e:	f7fb fdad 	bl	80028dc <HAL_GetTick>
 8006d82:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006d84:	e010      	b.n	8006da8 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8c:	d00c      	beq.n	8006da8 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d007      	beq.n	8006da4 <FMC_SDRAM_SendCommand+0x60>
 8006d94:	f7fb fda2 	bl	80028dc <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d201      	bcs.n	8006da8 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e006      	b.n	8006db6 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b20      	cmp	r3, #32
 8006db2:	d0e8      	beq.n	8006d86 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006dd0:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	0052      	lsls	r2, r2, #1
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006dec:	b084      	sub	sp, #16
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	f107 001c 	add.w	r0, r7, #28
 8006dfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dfe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d123      	bne.n	8006e4e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006e1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d105      	bne.n	8006e42 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 fae8 	bl	8008418 <USB_CoreReset>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	73fb      	strb	r3, [r7, #15]
 8006e4c:	e01b      	b.n	8006e86 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fadc 	bl	8008418 <USB_CoreReset>
 8006e60:	4603      	mov	r3, r0
 8006e62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e64:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d106      	bne.n	8006e7a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	639a      	str	r2, [r3, #56]	@ 0x38
 8006e78:	e005      	b.n	8006e86 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e86:	7fbb      	ldrb	r3, [r7, #30]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d10b      	bne.n	8006ea4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f043 0206 	orr.w	r2, r3, #6
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f043 0220 	orr.w	r2, r3, #32
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006eb0:	b004      	add	sp, #16
 8006eb2:	4770      	bx	lr

08006eb4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d165      	bne.n	8006f94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	4a41      	ldr	r2, [pc, #260]	@ (8006fd0 <USB_SetTurnaroundTime+0x11c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d906      	bls.n	8006ede <USB_SetTurnaroundTime+0x2a>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	4a40      	ldr	r2, [pc, #256]	@ (8006fd4 <USB_SetTurnaroundTime+0x120>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d202      	bcs.n	8006ede <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006ed8:	230f      	movs	r3, #15
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	e062      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	4a3c      	ldr	r2, [pc, #240]	@ (8006fd4 <USB_SetTurnaroundTime+0x120>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d306      	bcc.n	8006ef4 <USB_SetTurnaroundTime+0x40>
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	4a3b      	ldr	r2, [pc, #236]	@ (8006fd8 <USB_SetTurnaroundTime+0x124>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d202      	bcs.n	8006ef4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006eee:	230e      	movs	r3, #14
 8006ef0:	617b      	str	r3, [r7, #20]
 8006ef2:	e057      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4a38      	ldr	r2, [pc, #224]	@ (8006fd8 <USB_SetTurnaroundTime+0x124>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d306      	bcc.n	8006f0a <USB_SetTurnaroundTime+0x56>
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	4a37      	ldr	r2, [pc, #220]	@ (8006fdc <USB_SetTurnaroundTime+0x128>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d202      	bcs.n	8006f0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f04:	230d      	movs	r3, #13
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	e04c      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	4a33      	ldr	r2, [pc, #204]	@ (8006fdc <USB_SetTurnaroundTime+0x128>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d306      	bcc.n	8006f20 <USB_SetTurnaroundTime+0x6c>
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	4a32      	ldr	r2, [pc, #200]	@ (8006fe0 <USB_SetTurnaroundTime+0x12c>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d802      	bhi.n	8006f20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f1a:	230c      	movs	r3, #12
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	e041      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4a2f      	ldr	r2, [pc, #188]	@ (8006fe0 <USB_SetTurnaroundTime+0x12c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d906      	bls.n	8006f36 <USB_SetTurnaroundTime+0x82>
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4a2e      	ldr	r2, [pc, #184]	@ (8006fe4 <USB_SetTurnaroundTime+0x130>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d802      	bhi.n	8006f36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006f30:	230b      	movs	r3, #11
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	e036      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	4a2a      	ldr	r2, [pc, #168]	@ (8006fe4 <USB_SetTurnaroundTime+0x130>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d906      	bls.n	8006f4c <USB_SetTurnaroundTime+0x98>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	4a29      	ldr	r2, [pc, #164]	@ (8006fe8 <USB_SetTurnaroundTime+0x134>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d802      	bhi.n	8006f4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006f46:	230a      	movs	r3, #10
 8006f48:	617b      	str	r3, [r7, #20]
 8006f4a:	e02b      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	4a26      	ldr	r2, [pc, #152]	@ (8006fe8 <USB_SetTurnaroundTime+0x134>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d906      	bls.n	8006f62 <USB_SetTurnaroundTime+0xae>
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4a25      	ldr	r2, [pc, #148]	@ (8006fec <USB_SetTurnaroundTime+0x138>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d202      	bcs.n	8006f62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006f5c:	2309      	movs	r3, #9
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	e020      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	4a21      	ldr	r2, [pc, #132]	@ (8006fec <USB_SetTurnaroundTime+0x138>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d306      	bcc.n	8006f78 <USB_SetTurnaroundTime+0xc4>
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	4a20      	ldr	r2, [pc, #128]	@ (8006ff0 <USB_SetTurnaroundTime+0x13c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d802      	bhi.n	8006f78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006f72:	2308      	movs	r3, #8
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	e015      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ff0 <USB_SetTurnaroundTime+0x13c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d906      	bls.n	8006f8e <USB_SetTurnaroundTime+0xda>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4a1c      	ldr	r2, [pc, #112]	@ (8006ff4 <USB_SetTurnaroundTime+0x140>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d202      	bcs.n	8006f8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006f88:	2307      	movs	r3, #7
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	e00a      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006f8e:	2306      	movs	r3, #6
 8006f90:	617b      	str	r3, [r7, #20]
 8006f92:	e007      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d102      	bne.n	8006fa0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006f9a:	2309      	movs	r3, #9
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	e001      	b.n	8006fa4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006fa0:	2309      	movs	r3, #9
 8006fa2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	029b      	lsls	r3, r3, #10
 8006fb8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	371c      	adds	r7, #28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	00d8acbf 	.word	0x00d8acbf
 8006fd4:	00e4e1c0 	.word	0x00e4e1c0
 8006fd8:	00f42400 	.word	0x00f42400
 8006fdc:	01067380 	.word	0x01067380
 8006fe0:	011a499f 	.word	0x011a499f
 8006fe4:	01312cff 	.word	0x01312cff
 8006fe8:	014ca43f 	.word	0x014ca43f
 8006fec:	016e3600 	.word	0x016e3600
 8006ff0:	01a6ab1f 	.word	0x01a6ab1f
 8006ff4:	01e84800 	.word	0x01e84800

08006ff8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f043 0201 	orr.w	r2, r3, #1
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f023 0201 	bic.w	r2, r3, #1
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d115      	bne.n	800708a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800706a:	200a      	movs	r0, #10
 800706c:	f7fb fc42 	bl	80028f4 <HAL_Delay>
      ms += 10U;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	330a      	adds	r3, #10
 8007074:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 f93f 	bl	80082fa <USB_GetMode>
 800707c:	4603      	mov	r3, r0
 800707e:	2b01      	cmp	r3, #1
 8007080:	d01e      	beq.n	80070c0 <USB_SetCurrentMode+0x84>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2bc7      	cmp	r3, #199	@ 0xc7
 8007086:	d9f0      	bls.n	800706a <USB_SetCurrentMode+0x2e>
 8007088:	e01a      	b.n	80070c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800708a:	78fb      	ldrb	r3, [r7, #3]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d115      	bne.n	80070bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800709c:	200a      	movs	r0, #10
 800709e:	f7fb fc29 	bl	80028f4 <HAL_Delay>
      ms += 10U;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	330a      	adds	r3, #10
 80070a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 f926 	bl	80082fa <USB_GetMode>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d005      	beq.n	80070c0 <USB_SetCurrentMode+0x84>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80070b8:	d9f0      	bls.n	800709c <USB_SetCurrentMode+0x60>
 80070ba:	e001      	b.n	80070c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e005      	b.n	80070cc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2bc8      	cmp	r3, #200	@ 0xc8
 80070c4:	d101      	bne.n	80070ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070d4:	b084      	sub	sp, #16
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b086      	sub	sp, #24
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80070e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80070ee:	2300      	movs	r3, #0
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	e009      	b.n	8007108 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	3340      	adds	r3, #64	@ 0x40
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	3301      	adds	r3, #1
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2b0e      	cmp	r3, #14
 800710c:	d9f2      	bls.n	80070f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800710e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007112:	2b00      	cmp	r3, #0
 8007114:	d11c      	bne.n	8007150 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007124:	f043 0302 	orr.w	r3, r3, #2
 8007128:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800713a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007146:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	639a      	str	r2, [r3, #56]	@ 0x38
 800714e:	e00b      	b.n	8007168 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007154:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007160:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800716e:	461a      	mov	r2, r3
 8007170:	2300      	movs	r3, #0
 8007172:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007174:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007178:	2b01      	cmp	r3, #1
 800717a:	d10d      	bne.n	8007198 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800717c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007180:	2b00      	cmp	r3, #0
 8007182:	d104      	bne.n	800718e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007184:	2100      	movs	r1, #0
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f968 	bl	800745c <USB_SetDevSpeed>
 800718c:	e008      	b.n	80071a0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800718e:	2101      	movs	r1, #1
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f963 	bl	800745c <USB_SetDevSpeed>
 8007196:	e003      	b.n	80071a0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007198:	2103      	movs	r1, #3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f95e 	bl	800745c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071a0:	2110      	movs	r1, #16
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f8fa 	bl	800739c <USB_FlushTxFifo>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f924 	bl	8007400 <USB_FlushRxFifo>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071c8:	461a      	mov	r2, r3
 80071ca:	2300      	movs	r3, #0
 80071cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071d4:	461a      	mov	r2, r3
 80071d6:	2300      	movs	r3, #0
 80071d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e0:	461a      	mov	r2, r3
 80071e2:	2300      	movs	r3, #0
 80071e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071e6:	2300      	movs	r3, #0
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	e043      	b.n	8007274 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007202:	d118      	bne.n	8007236 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10a      	bne.n	8007220 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	4413      	add	r3, r2
 8007212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007216:	461a      	mov	r2, r3
 8007218:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	e013      	b.n	8007248 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800722c:	461a      	mov	r2, r3
 800722e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	e008      	b.n	8007248 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4413      	add	r3, r2
 800723e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007242:	461a      	mov	r2, r3
 8007244:	2300      	movs	r3, #0
 8007246:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007254:	461a      	mov	r2, r3
 8007256:	2300      	movs	r3, #0
 8007258:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007266:	461a      	mov	r2, r3
 8007268:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800726c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	3301      	adds	r3, #1
 8007272:	613b      	str	r3, [r7, #16]
 8007274:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007278:	461a      	mov	r2, r3
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	4293      	cmp	r3, r2
 800727e:	d3b5      	bcc.n	80071ec <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007280:	2300      	movs	r3, #0
 8007282:	613b      	str	r3, [r7, #16]
 8007284:	e043      	b.n	800730e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007298:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800729c:	d118      	bne.n	80072d0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072b0:	461a      	mov	r2, r3
 80072b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	e013      	b.n	80072e2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072c6:	461a      	mov	r2, r3
 80072c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	e008      	b.n	80072e2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072dc:	461a      	mov	r2, r3
 80072de:	2300      	movs	r3, #0
 80072e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ee:	461a      	mov	r2, r3
 80072f0:	2300      	movs	r3, #0
 80072f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007300:	461a      	mov	r2, r3
 8007302:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007306:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	3301      	adds	r3, #1
 800730c:	613b      	str	r3, [r7, #16]
 800730e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007312:	461a      	mov	r2, r3
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	4293      	cmp	r3, r2
 8007318:	d3b5      	bcc.n	8007286 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800732c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800733a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800733c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007340:	2b00      	cmp	r3, #0
 8007342:	d105      	bne.n	8007350 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	f043 0210 	orr.w	r2, r3, #16
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699a      	ldr	r2, [r3, #24]
 8007354:	4b10      	ldr	r3, [pc, #64]	@ (8007398 <USB_DevInit+0x2c4>)
 8007356:	4313      	orrs	r3, r2
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800735c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007360:	2b00      	cmp	r3, #0
 8007362:	d005      	beq.n	8007370 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	f043 0208 	orr.w	r2, r3, #8
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007370:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007374:	2b01      	cmp	r3, #1
 8007376:	d107      	bne.n	8007388 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007380:	f043 0304 	orr.w	r3, r3, #4
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007388:	7dfb      	ldrb	r3, [r7, #23]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007394:	b004      	add	sp, #16
 8007396:	4770      	bx	lr
 8007398:	803c3800 	.word	0x803c3800

0800739c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3301      	adds	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073b6:	d901      	bls.n	80073bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e01b      	b.n	80073f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	daf2      	bge.n	80073aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	019b      	lsls	r3, r3, #6
 80073cc:	f043 0220 	orr.w	r2, r3, #32
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3301      	adds	r3, #1
 80073d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073e0:	d901      	bls.n	80073e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e006      	b.n	80073f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	d0f0      	beq.n	80073d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3301      	adds	r3, #1
 8007410:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007418:	d901      	bls.n	800741e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e018      	b.n	8007450 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	daf2      	bge.n	800740c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2210      	movs	r2, #16
 800742e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	3301      	adds	r3, #1
 8007434:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800743c:	d901      	bls.n	8007442 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e006      	b.n	8007450 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f003 0310 	and.w	r3, r3, #16
 800744a:	2b10      	cmp	r3, #16
 800744c:	d0f0      	beq.n	8007430 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	78fb      	ldrb	r3, [r7, #3]
 8007476:	68f9      	ldr	r1, [r7, #12]
 8007478:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800747c:	4313      	orrs	r3, r2
 800747e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800748e:	b480      	push	{r7}
 8007490:	b087      	sub	sp, #28
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f003 0306 	and.w	r3, r3, #6
 80074a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d102      	bne.n	80074b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80074ae:	2300      	movs	r3, #0
 80074b0:	75fb      	strb	r3, [r7, #23]
 80074b2:	e00a      	b.n	80074ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d002      	beq.n	80074c0 <USB_GetDevSpeed+0x32>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b06      	cmp	r3, #6
 80074be:	d102      	bne.n	80074c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80074c0:	2302      	movs	r3, #2
 80074c2:	75fb      	strb	r3, [r7, #23]
 80074c4:	e001      	b.n	80074ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80074c6:	230f      	movs	r3, #15
 80074c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80074ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	371c      	adds	r7, #28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d13a      	bne.n	800756a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074fa:	69da      	ldr	r2, [r3, #28]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	f003 030f 	and.w	r3, r3, #15
 8007504:	2101      	movs	r1, #1
 8007506:	fa01 f303 	lsl.w	r3, r1, r3
 800750a:	b29b      	uxth	r3, r3
 800750c:	68f9      	ldr	r1, [r7, #12]
 800750e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007512:	4313      	orrs	r3, r2
 8007514:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	4413      	add	r3, r2
 800751e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d155      	bne.n	80075d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	791b      	ldrb	r3, [r3, #4]
 8007546:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007548:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	059b      	lsls	r3, r3, #22
 800754e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007550:	4313      	orrs	r3, r2
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	0151      	lsls	r1, r2, #5
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	440a      	add	r2, r1
 800755a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800755e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	e036      	b.n	80075d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007570:	69da      	ldr	r2, [r3, #28]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	f003 030f 	and.w	r3, r3, #15
 800757a:	2101      	movs	r1, #1
 800757c:	fa01 f303 	lsl.w	r3, r1, r3
 8007580:	041b      	lsls	r3, r3, #16
 8007582:	68f9      	ldr	r1, [r7, #12]
 8007584:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007588:	4313      	orrs	r3, r2
 800758a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d11a      	bne.n	80075d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	791b      	ldrb	r3, [r3, #4]
 80075bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075be:	430b      	orrs	r3, r1
 80075c0:	4313      	orrs	r3, r2
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	0151      	lsls	r1, r2, #5
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	440a      	add	r2, r1
 80075ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
	...

080075e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	785b      	ldrb	r3, [r3, #1]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d161      	bne.n	80076c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007616:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800761a:	d11f      	bne.n	800765c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4413      	add	r3, r2
 8007624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	0151      	lsls	r1, r2, #5
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	440a      	add	r2, r1
 8007632:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007636:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800763a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	0151      	lsls	r1, r2, #5
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	440a      	add	r2, r1
 8007652:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007656:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800765a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007662:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	f003 030f 	and.w	r3, r3, #15
 800766c:	2101      	movs	r1, #1
 800766e:	fa01 f303 	lsl.w	r3, r1, r3
 8007672:	b29b      	uxth	r3, r3
 8007674:	43db      	mvns	r3, r3
 8007676:	68f9      	ldr	r1, [r7, #12]
 8007678:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800767c:	4013      	ands	r3, r2
 800767e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007686:	69da      	ldr	r2, [r3, #28]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	f003 030f 	and.w	r3, r3, #15
 8007690:	2101      	movs	r1, #1
 8007692:	fa01 f303 	lsl.w	r3, r1, r3
 8007696:	b29b      	uxth	r3, r3
 8007698:	43db      	mvns	r3, r3
 800769a:	68f9      	ldr	r1, [r7, #12]
 800769c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076a0:	4013      	ands	r3, r2
 80076a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	0159      	lsls	r1, r3, #5
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	440b      	add	r3, r1
 80076ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076be:	4619      	mov	r1, r3
 80076c0:	4b35      	ldr	r3, [pc, #212]	@ (8007798 <USB_DeactivateEndpoint+0x1b0>)
 80076c2:	4013      	ands	r3, r2
 80076c4:	600b      	str	r3, [r1, #0]
 80076c6:	e060      	b.n	800778a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076de:	d11f      	bne.n	8007720 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	0151      	lsls	r1, r2, #5
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	440a      	add	r2, r1
 80076f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80076fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	0151      	lsls	r1, r2, #5
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	440a      	add	r2, r1
 8007716:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800771a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800771e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007726:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	f003 030f 	and.w	r3, r3, #15
 8007730:	2101      	movs	r1, #1
 8007732:	fa01 f303 	lsl.w	r3, r1, r3
 8007736:	041b      	lsls	r3, r3, #16
 8007738:	43db      	mvns	r3, r3
 800773a:	68f9      	ldr	r1, [r7, #12]
 800773c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007740:	4013      	ands	r3, r2
 8007742:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800774a:	69da      	ldr	r2, [r3, #28]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	f003 030f 	and.w	r3, r3, #15
 8007754:	2101      	movs	r1, #1
 8007756:	fa01 f303 	lsl.w	r3, r1, r3
 800775a:	041b      	lsls	r3, r3, #16
 800775c:	43db      	mvns	r3, r3
 800775e:	68f9      	ldr	r1, [r7, #12]
 8007760:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007764:	4013      	ands	r3, r2
 8007766:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	0159      	lsls	r1, r3, #5
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	440b      	add	r3, r1
 800777e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007782:	4619      	mov	r1, r3
 8007784:	4b05      	ldr	r3, [pc, #20]	@ (800779c <USB_DeactivateEndpoint+0x1b4>)
 8007786:	4013      	ands	r3, r2
 8007788:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	ec337800 	.word	0xec337800
 800779c:	eff37800 	.word	0xeff37800

080077a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08a      	sub	sp, #40	@ 0x28
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	4613      	mov	r3, r2
 80077ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	785b      	ldrb	r3, [r3, #1]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	f040 817f 	bne.w	8007ac0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d132      	bne.n	8007830 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	0151      	lsls	r1, r2, #5
 80077dc:	69fa      	ldr	r2, [r7, #28]
 80077de:	440a      	add	r2, r1
 80077e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077e4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80077e8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80077ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	0151      	lsls	r1, r2, #5
 8007800:	69fa      	ldr	r2, [r7, #28]
 8007802:	440a      	add	r2, r1
 8007804:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007808:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800780c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	4413      	add	r3, r2
 8007816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	0151      	lsls	r1, r2, #5
 8007820:	69fa      	ldr	r2, [r7, #28]
 8007822:	440a      	add	r2, r1
 8007824:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007828:	0cdb      	lsrs	r3, r3, #19
 800782a:	04db      	lsls	r3, r3, #19
 800782c:	6113      	str	r3, [r2, #16]
 800782e:	e097      	b.n	8007960 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	440a      	add	r2, r1
 8007846:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800784a:	0cdb      	lsrs	r3, r3, #19
 800784c:	04db      	lsls	r3, r3, #19
 800784e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	69ba      	ldr	r2, [r7, #24]
 8007860:	0151      	lsls	r1, r2, #5
 8007862:	69fa      	ldr	r2, [r7, #28]
 8007864:	440a      	add	r2, r1
 8007866:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800786a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800786e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007872:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d11a      	bne.n	80078b0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	691a      	ldr	r2, [r3, #16]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	429a      	cmp	r2, r3
 8007884:	d903      	bls.n	800788e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	0151      	lsls	r1, r2, #5
 80078a0:	69fa      	ldr	r2, [r7, #28]
 80078a2:	440a      	add	r2, r1
 80078a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078ac:	6113      	str	r3, [r2, #16]
 80078ae:	e044      	b.n	800793a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	691a      	ldr	r2, [r3, #16]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	4413      	add	r3, r2
 80078ba:	1e5a      	subs	r2, r3, #1
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078d2:	691a      	ldr	r2, [r3, #16]
 80078d4:	8afb      	ldrh	r3, [r7, #22]
 80078d6:	04d9      	lsls	r1, r3, #19
 80078d8:	4ba4      	ldr	r3, [pc, #656]	@ (8007b6c <USB_EPStartXfer+0x3cc>)
 80078da:	400b      	ands	r3, r1
 80078dc:	69b9      	ldr	r1, [r7, #24]
 80078de:	0148      	lsls	r0, r1, #5
 80078e0:	69f9      	ldr	r1, [r7, #28]
 80078e2:	4401      	add	r1, r0
 80078e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80078e8:	4313      	orrs	r3, r2
 80078ea:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	791b      	ldrb	r3, [r3, #4]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d122      	bne.n	800793a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	0151      	lsls	r1, r2, #5
 8007906:	69fa      	ldr	r2, [r7, #28]
 8007908:	440a      	add	r2, r1
 800790a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800790e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007912:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007920:	691a      	ldr	r2, [r3, #16]
 8007922:	8afb      	ldrh	r3, [r7, #22]
 8007924:	075b      	lsls	r3, r3, #29
 8007926:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800792a:	69b9      	ldr	r1, [r7, #24]
 800792c:	0148      	lsls	r0, r1, #5
 800792e:	69f9      	ldr	r1, [r7, #28]
 8007930:	4401      	add	r1, r0
 8007932:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007936:	4313      	orrs	r3, r2
 8007938:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007950:	69b9      	ldr	r1, [r7, #24]
 8007952:	0148      	lsls	r0, r1, #5
 8007954:	69f9      	ldr	r1, [r7, #28]
 8007956:	4401      	add	r1, r0
 8007958:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800795c:	4313      	orrs	r3, r2
 800795e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d14b      	bne.n	80079fe <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d009      	beq.n	8007982 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	4413      	add	r3, r2
 8007976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800797a:	461a      	mov	r2, r3
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	791b      	ldrb	r3, [r3, #4]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d128      	bne.n	80079dc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007996:	2b00      	cmp	r3, #0
 8007998:	d110      	bne.n	80079bc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	0151      	lsls	r1, r2, #5
 80079ac:	69fa      	ldr	r2, [r7, #28]
 80079ae:	440a      	add	r2, r1
 80079b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	e00f      	b.n	80079dc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	0151      	lsls	r1, r2, #5
 80079ce:	69fa      	ldr	r2, [r7, #28]
 80079d0:	440a      	add	r2, r1
 80079d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079da:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	0151      	lsls	r1, r2, #5
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	440a      	add	r2, r1
 80079f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079f6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	e166      	b.n	8007ccc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	0151      	lsls	r1, r2, #5
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	440a      	add	r2, r1
 8007a14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a18:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a1c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	791b      	ldrb	r3, [r3, #4]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d015      	beq.n	8007a52 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 814e 	beq.w	8007ccc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	f003 030f 	and.w	r3, r3, #15
 8007a40:	2101      	movs	r1, #1
 8007a42:	fa01 f303 	lsl.w	r3, r1, r3
 8007a46:	69f9      	ldr	r1, [r7, #28]
 8007a48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	634b      	str	r3, [r1, #52]	@ 0x34
 8007a50:	e13c      	b.n	8007ccc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d110      	bne.n	8007a84 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	0151      	lsls	r1, r2, #5
 8007a74:	69fa      	ldr	r2, [r7, #28]
 8007a76:	440a      	add	r2, r1
 8007a78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a7c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	e00f      	b.n	8007aa4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	0151      	lsls	r1, r2, #5
 8007a96:	69fa      	ldr	r2, [r7, #28]
 8007a98:	440a      	add	r2, r1
 8007a9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007aa2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	68d9      	ldr	r1, [r3, #12]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	781a      	ldrb	r2, [r3, #0]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	b298      	uxth	r0, r3
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 f9b9 	bl	8007e30 <USB_WritePacket>
 8007abe:	e105      	b.n	8007ccc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	69ba      	ldr	r2, [r7, #24]
 8007ad0:	0151      	lsls	r1, r2, #5
 8007ad2:	69fa      	ldr	r2, [r7, #28]
 8007ad4:	440a      	add	r2, r1
 8007ad6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ada:	0cdb      	lsrs	r3, r3, #19
 8007adc:	04db      	lsls	r3, r3, #19
 8007ade:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	0151      	lsls	r1, r2, #5
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	440a      	add	r2, r1
 8007af6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007afa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007afe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007b02:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d132      	bne.n	8007b70 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	689a      	ldr	r2, [r3, #8]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b2e:	691a      	ldr	r2, [r3, #16]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	6a1b      	ldr	r3, [r3, #32]
 8007b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b38:	69b9      	ldr	r1, [r7, #24]
 8007b3a:	0148      	lsls	r0, r1, #5
 8007b3c:	69f9      	ldr	r1, [r7, #28]
 8007b3e:	4401      	add	r1, r0
 8007b40:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007b44:	4313      	orrs	r3, r2
 8007b46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	69ba      	ldr	r2, [r7, #24]
 8007b58:	0151      	lsls	r1, r2, #5
 8007b5a:	69fa      	ldr	r2, [r7, #28]
 8007b5c:	440a      	add	r2, r1
 8007b5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b66:	6113      	str	r3, [r2, #16]
 8007b68:	e062      	b.n	8007c30 <USB_EPStartXfer+0x490>
 8007b6a:	bf00      	nop
 8007b6c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d123      	bne.n	8007bc0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b84:	691a      	ldr	r2, [r3, #16]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b8e:	69b9      	ldr	r1, [r7, #24]
 8007b90:	0148      	lsls	r0, r1, #5
 8007b92:	69f9      	ldr	r1, [r7, #28]
 8007b94:	4401      	add	r1, r0
 8007b96:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	0151      	lsls	r1, r2, #5
 8007bb0:	69fa      	ldr	r2, [r7, #28]
 8007bb2:	440a      	add	r2, r1
 8007bb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007bbc:	6113      	str	r3, [r2, #16]
 8007bbe:	e037      	b.n	8007c30 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	691a      	ldr	r2, [r3, #16]
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	4413      	add	r3, r2
 8007bca:	1e5a      	subs	r2, r3, #1
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	8afa      	ldrh	r2, [r7, #22]
 8007bdc:	fb03 f202 	mul.w	r2, r3, r2
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bf0:	691a      	ldr	r2, [r3, #16]
 8007bf2:	8afb      	ldrh	r3, [r7, #22]
 8007bf4:	04d9      	lsls	r1, r3, #19
 8007bf6:	4b38      	ldr	r3, [pc, #224]	@ (8007cd8 <USB_EPStartXfer+0x538>)
 8007bf8:	400b      	ands	r3, r1
 8007bfa:	69b9      	ldr	r1, [r7, #24]
 8007bfc:	0148      	lsls	r0, r1, #5
 8007bfe:	69f9      	ldr	r1, [r7, #28]
 8007c00:	4401      	add	r1, r0
 8007c02:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c06:	4313      	orrs	r3, r2
 8007c08:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c16:	691a      	ldr	r2, [r3, #16]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c20:	69b9      	ldr	r1, [r7, #24]
 8007c22:	0148      	lsls	r0, r1, #5
 8007c24:	69f9      	ldr	r1, [r7, #28]
 8007c26:	4401      	add	r1, r0
 8007c28:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007c30:	79fb      	ldrb	r3, [r7, #7]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d10d      	bne.n	8007c52 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d009      	beq.n	8007c52 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	68d9      	ldr	r1, [r3, #12]
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c4e:	460a      	mov	r2, r1
 8007c50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	791b      	ldrb	r3, [r3, #4]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d128      	bne.n	8007cac <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d110      	bne.n	8007c8c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	0151      	lsls	r1, r2, #5
 8007c7c:	69fa      	ldr	r2, [r7, #28]
 8007c7e:	440a      	add	r2, r1
 8007c80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c88:	6013      	str	r3, [r2, #0]
 8007c8a:	e00f      	b.n	8007cac <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	0151      	lsls	r1, r2, #5
 8007c9e:	69fa      	ldr	r2, [r7, #28]
 8007ca0:	440a      	add	r2, r1
 8007ca2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007caa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	0151      	lsls	r1, r2, #5
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	440a      	add	r2, r1
 8007cc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cc6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007cca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3720      	adds	r7, #32
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	1ff80000 	.word	0x1ff80000

08007cdc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	785b      	ldrb	r3, [r3, #1]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d14a      	bne.n	8007d90 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d12:	f040 8086 	bne.w	8007e22 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	7812      	ldrb	r2, [r2, #0]
 8007d2a:	0151      	lsls	r1, r2, #5
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	440a      	add	r2, r1
 8007d30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d38:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	7812      	ldrb	r2, [r2, #0]
 8007d4e:	0151      	lsls	r1, r2, #5
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	440a      	add	r2, r1
 8007d54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3301      	adds	r3, #1
 8007d62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d902      	bls.n	8007d74 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	75fb      	strb	r3, [r7, #23]
          break;
 8007d72:	e056      	b.n	8007e22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d8c:	d0e7      	beq.n	8007d5e <USB_EPStopXfer+0x82>
 8007d8e:	e048      	b.n	8007e22 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	015a      	lsls	r2, r3, #5
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007da4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007da8:	d13b      	bne.n	8007e22 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	7812      	ldrb	r2, [r2, #0]
 8007dbe:	0151      	lsls	r1, r2, #5
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	440a      	add	r2, r1
 8007dc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dc8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007dcc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	7812      	ldrb	r2, [r2, #0]
 8007de2:	0151      	lsls	r1, r2, #5
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	440a      	add	r2, r1
 8007de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007df0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3301      	adds	r3, #1
 8007df6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d902      	bls.n	8007e08 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	75fb      	strb	r3, [r7, #23]
          break;
 8007e06:	e00c      	b.n	8007e22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	015a      	lsls	r2, r3, #5
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	4413      	add	r3, r2
 8007e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e20:	d0e7      	beq.n	8007df2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	371c      	adds	r7, #28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b089      	sub	sp, #36	@ 0x24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	460b      	mov	r3, r1
 8007e40:	71fb      	strb	r3, [r7, #7]
 8007e42:	4613      	mov	r3, r2
 8007e44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d123      	bne.n	8007e9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e56:	88bb      	ldrh	r3, [r7, #4]
 8007e58:	3303      	adds	r3, #3
 8007e5a:	089b      	lsrs	r3, r3, #2
 8007e5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e5e:	2300      	movs	r3, #0
 8007e60:	61bb      	str	r3, [r7, #24]
 8007e62:	e018      	b.n	8007e96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	031a      	lsls	r2, r3, #12
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e70:	461a      	mov	r2, r3
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	3301      	adds	r3, #1
 8007e82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	3301      	adds	r3, #1
 8007e88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	3301      	adds	r3, #1
 8007e94:	61bb      	str	r3, [r7, #24]
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d3e2      	bcc.n	8007e64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3724      	adds	r7, #36	@ 0x24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b08b      	sub	sp, #44	@ 0x2c
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007ec2:	88fb      	ldrh	r3, [r7, #6]
 8007ec4:	089b      	lsrs	r3, r3, #2
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007eca:	88fb      	ldrh	r3, [r7, #6]
 8007ecc:	f003 0303 	and.w	r3, r3, #3
 8007ed0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	623b      	str	r3, [r7, #32]
 8007ed6:	e014      	b.n	8007f02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eec:	3301      	adds	r3, #1
 8007eee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef8:	3301      	adds	r3, #1
 8007efa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	3301      	adds	r3, #1
 8007f00:	623b      	str	r3, [r7, #32]
 8007f02:	6a3a      	ldr	r2, [r7, #32]
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d3e6      	bcc.n	8007ed8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f0a:	8bfb      	ldrh	r3, [r7, #30]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01e      	beq.n	8007f4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f107 0310 	add.w	r3, r7, #16
 8007f20:	6812      	ldr	r2, [r2, #0]
 8007f22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	00db      	lsls	r3, r3, #3
 8007f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f34:	701a      	strb	r2, [r3, #0]
      i++;
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3e:	3301      	adds	r3, #1
 8007f40:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007f42:	8bfb      	ldrh	r3, [r7, #30]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f48:	8bfb      	ldrh	r3, [r7, #30]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1ea      	bne.n	8007f24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	372c      	adds	r7, #44	@ 0x2c
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	785b      	ldrb	r3, [r3, #1]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d12c      	bne.n	8007fd2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	db12      	blt.n	8007fb0 <USB_EPSetStall+0x54>
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00f      	beq.n	8007fb0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	0151      	lsls	r1, r2, #5
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007faa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007fae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	0151      	lsls	r1, r2, #5
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	440a      	add	r2, r1
 8007fc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	e02b      	b.n	800802a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	db12      	blt.n	800800a <USB_EPSetStall+0xae>
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00f      	beq.n	800800a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	0151      	lsls	r1, r2, #5
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	440a      	add	r2, r1
 8008000:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008004:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008008:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4413      	add	r3, r2
 8008012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	0151      	lsls	r1, r2, #5
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	440a      	add	r2, r1
 8008020:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008024:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008028:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	785b      	ldrb	r3, [r3, #1]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d128      	bne.n	80080a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4413      	add	r3, r2
 800805c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	0151      	lsls	r1, r2, #5
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	440a      	add	r2, r1
 800806a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800806e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008072:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	791b      	ldrb	r3, [r3, #4]
 8008078:	2b03      	cmp	r3, #3
 800807a:	d003      	beq.n	8008084 <USB_EPClearStall+0x4c>
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	791b      	ldrb	r3, [r3, #4]
 8008080:	2b02      	cmp	r3, #2
 8008082:	d138      	bne.n	80080f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4413      	add	r3, r2
 800808c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	0151      	lsls	r1, r2, #5
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	440a      	add	r2, r1
 800809a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800809e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	e027      	b.n	80080f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	0151      	lsls	r1, r2, #5
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	440a      	add	r2, r1
 80080bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80080c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	791b      	ldrb	r3, [r3, #4]
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d003      	beq.n	80080d6 <USB_EPClearStall+0x9e>
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	791b      	ldrb	r3, [r3, #4]
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d10f      	bne.n	80080f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	0151      	lsls	r1, r2, #5
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	440a      	add	r2, r1
 80080ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	460b      	mov	r3, r1
 800810e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008122:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008126:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	78fb      	ldrb	r3, [r7, #3]
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008138:	68f9      	ldr	r1, [r7, #12]
 800813a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800813e:	4313      	orrs	r3, r2
 8008140:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800816a:	f023 0303 	bic.w	r3, r3, #3
 800816e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800817e:	f023 0302 	bic.w	r3, r3, #2
 8008182:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008192:	b480      	push	{r7}
 8008194:	b085      	sub	sp, #20
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80081ac:	f023 0303 	bic.w	r3, r3, #3
 80081b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081c0:	f043 0302 	orr.w	r3, r3, #2
 80081c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	4013      	ands	r3, r2
 80081ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80081ec:	68fb      	ldr	r3, [r7, #12]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b085      	sub	sp, #20
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	4013      	ands	r3, r2
 800821c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	0c1b      	lsrs	r3, r3, #16
}
 8008222:	4618      	mov	r0, r3
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800822e:	b480      	push	{r7}
 8008230:	b085      	sub	sp, #20
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	4013      	ands	r3, r2
 8008250:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	b29b      	uxth	r3, r3
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008262:	b480      	push	{r7}
 8008264:	b085      	sub	sp, #20
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	460b      	mov	r3, r1
 800826c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008272:	78fb      	ldrb	r3, [r7, #3]
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4413      	add	r3, r2
 800827a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	4013      	ands	r3, r2
 800828e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008290:	68bb      	ldr	r3, [r7, #8]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800829e:	b480      	push	{r7}
 80082a0:	b087      	sub	sp, #28
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	460b      	mov	r3, r1
 80082a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80082c2:	78fb      	ldrb	r3, [r7, #3]
 80082c4:	f003 030f 	and.w	r3, r3, #15
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	fa22 f303 	lsr.w	r3, r2, r3
 80082ce:	01db      	lsls	r3, r3, #7
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80082d8:	78fb      	ldrb	r3, [r7, #3]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	4013      	ands	r3, r2
 80082ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082ec:	68bb      	ldr	r3, [r7, #8]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	371c      	adds	r7, #28
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b083      	sub	sp, #12
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	f003 0301 	and.w	r3, r3, #1
}
 800830a:	4618      	mov	r0, r3
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008316:	b480      	push	{r7}
 8008318:	b085      	sub	sp, #20
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008330:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008334:	f023 0307 	bic.w	r3, r3, #7
 8008338:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800834c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800835c:	b480      	push	{r7}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	460b      	mov	r3, r1
 8008366:	607a      	str	r2, [r7, #4]
 8008368:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	333c      	adds	r3, #60	@ 0x3c
 8008372:	3304      	adds	r3, #4
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	4a26      	ldr	r2, [pc, #152]	@ (8008414 <USB_EP0_OutStart+0xb8>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d90a      	bls.n	8008396 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800838c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008390:	d101      	bne.n	8008396 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	e037      	b.n	8008406 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800839c:	461a      	mov	r2, r3
 800839e:	2300      	movs	r3, #0
 80083a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80083b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083c4:	f043 0318 	orr.w	r3, r3, #24
 80083c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083d8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80083dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80083de:	7afb      	ldrb	r3, [r7, #11]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d10f      	bne.n	8008404 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ea:	461a      	mov	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083fe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008402:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	371c      	adds	r7, #28
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	4f54300a 	.word	0x4f54300a

08008418 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3301      	adds	r3, #1
 8008428:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008430:	d901      	bls.n	8008436 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e01b      	b.n	800846e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	daf2      	bge.n	8008424 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	f043 0201 	orr.w	r2, r3, #1
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3301      	adds	r3, #1
 8008452:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800845a:	d901      	bls.n	8008460 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e006      	b.n	800846e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	2b01      	cmp	r3, #1
 800846a:	d0f0      	beq.n	800844e <USB_CoreReset+0x36>

  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
	...

0800847c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008488:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800848c:	f002 fca0 	bl	800add0 <USBD_static_malloc>
 8008490:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d109      	bne.n	80084ac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	32b0      	adds	r2, #176	@ 0xb0
 80084a2:	2100      	movs	r1, #0
 80084a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80084a8:	2302      	movs	r3, #2
 80084aa:	e0d4      	b.n	8008656 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80084ac:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80084b0:	2100      	movs	r1, #0
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f002 fcf0 	bl	800ae98 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	32b0      	adds	r2, #176	@ 0xb0
 80084c2:	68f9      	ldr	r1, [r7, #12]
 80084c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	32b0      	adds	r2, #176	@ 0xb0
 80084d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	7c1b      	ldrb	r3, [r3, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d138      	bne.n	8008556 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80084e4:	4b5e      	ldr	r3, [pc, #376]	@ (8008660 <USBD_CDC_Init+0x1e4>)
 80084e6:	7819      	ldrb	r1, [r3, #0]
 80084e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084ec:	2202      	movs	r2, #2
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f002 fb4b 	bl	800ab8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80084f4:	4b5a      	ldr	r3, [pc, #360]	@ (8008660 <USBD_CDC_Init+0x1e4>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	f003 020f 	and.w	r2, r3, #15
 80084fc:	6879      	ldr	r1, [r7, #4]
 80084fe:	4613      	mov	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	440b      	add	r3, r1
 8008508:	3324      	adds	r3, #36	@ 0x24
 800850a:	2201      	movs	r2, #1
 800850c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800850e:	4b55      	ldr	r3, [pc, #340]	@ (8008664 <USBD_CDC_Init+0x1e8>)
 8008510:	7819      	ldrb	r1, [r3, #0]
 8008512:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008516:	2202      	movs	r2, #2
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f002 fb36 	bl	800ab8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800851e:	4b51      	ldr	r3, [pc, #324]	@ (8008664 <USBD_CDC_Init+0x1e8>)
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	f003 020f 	and.w	r2, r3, #15
 8008526:	6879      	ldr	r1, [r7, #4]
 8008528:	4613      	mov	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	440b      	add	r3, r1
 8008532:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008536:	2201      	movs	r2, #1
 8008538:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800853a:	4b4b      	ldr	r3, [pc, #300]	@ (8008668 <USBD_CDC_Init+0x1ec>)
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	f003 020f 	and.w	r2, r3, #15
 8008542:	6879      	ldr	r1, [r7, #4]
 8008544:	4613      	mov	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	440b      	add	r3, r1
 800854e:	3326      	adds	r3, #38	@ 0x26
 8008550:	2210      	movs	r2, #16
 8008552:	801a      	strh	r2, [r3, #0]
 8008554:	e035      	b.n	80085c2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008556:	4b42      	ldr	r3, [pc, #264]	@ (8008660 <USBD_CDC_Init+0x1e4>)
 8008558:	7819      	ldrb	r1, [r3, #0]
 800855a:	2340      	movs	r3, #64	@ 0x40
 800855c:	2202      	movs	r2, #2
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f002 fb13 	bl	800ab8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008564:	4b3e      	ldr	r3, [pc, #248]	@ (8008660 <USBD_CDC_Init+0x1e4>)
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	f003 020f 	and.w	r2, r3, #15
 800856c:	6879      	ldr	r1, [r7, #4]
 800856e:	4613      	mov	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	440b      	add	r3, r1
 8008578:	3324      	adds	r3, #36	@ 0x24
 800857a:	2201      	movs	r2, #1
 800857c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800857e:	4b39      	ldr	r3, [pc, #228]	@ (8008664 <USBD_CDC_Init+0x1e8>)
 8008580:	7819      	ldrb	r1, [r3, #0]
 8008582:	2340      	movs	r3, #64	@ 0x40
 8008584:	2202      	movs	r2, #2
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f002 faff 	bl	800ab8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800858c:	4b35      	ldr	r3, [pc, #212]	@ (8008664 <USBD_CDC_Init+0x1e8>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	f003 020f 	and.w	r2, r3, #15
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	440b      	add	r3, r1
 80085a0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80085a4:	2201      	movs	r2, #1
 80085a6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80085a8:	4b2f      	ldr	r3, [pc, #188]	@ (8008668 <USBD_CDC_Init+0x1ec>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	f003 020f 	and.w	r2, r3, #15
 80085b0:	6879      	ldr	r1, [r7, #4]
 80085b2:	4613      	mov	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	440b      	add	r3, r1
 80085bc:	3326      	adds	r3, #38	@ 0x26
 80085be:	2210      	movs	r2, #16
 80085c0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80085c2:	4b29      	ldr	r3, [pc, #164]	@ (8008668 <USBD_CDC_Init+0x1ec>)
 80085c4:	7819      	ldrb	r1, [r3, #0]
 80085c6:	2308      	movs	r3, #8
 80085c8:	2203      	movs	r2, #3
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f002 fadd 	bl	800ab8a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80085d0:	4b25      	ldr	r3, [pc, #148]	@ (8008668 <USBD_CDC_Init+0x1ec>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	f003 020f 	and.w	r2, r3, #15
 80085d8:	6879      	ldr	r1, [r7, #4]
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	440b      	add	r3, r1
 80085e4:	3324      	adds	r3, #36	@ 0x24
 80085e6:	2201      	movs	r2, #1
 80085e8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	33b0      	adds	r3, #176	@ 0xb0
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008620:	2302      	movs	r3, #2
 8008622:	e018      	b.n	8008656 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	7c1b      	ldrb	r3, [r3, #16]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10a      	bne.n	8008642 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800862c:	4b0d      	ldr	r3, [pc, #52]	@ (8008664 <USBD_CDC_Init+0x1e8>)
 800862e:	7819      	ldrb	r1, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008636:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f002 fb94 	bl	800ad68 <USBD_LL_PrepareReceive>
 8008640:	e008      	b.n	8008654 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008642:	4b08      	ldr	r3, [pc, #32]	@ (8008664 <USBD_CDC_Init+0x1e8>)
 8008644:	7819      	ldrb	r1, [r3, #0]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800864c:	2340      	movs	r3, #64	@ 0x40
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f002 fb8a 	bl	800ad68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	2000011f 	.word	0x2000011f
 8008664:	20000120 	.word	0x20000120
 8008668:	20000121 	.word	0x20000121

0800866c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008678:	4b3a      	ldr	r3, [pc, #232]	@ (8008764 <USBD_CDC_DeInit+0xf8>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f002 faa9 	bl	800abd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008684:	4b37      	ldr	r3, [pc, #220]	@ (8008764 <USBD_CDC_DeInit+0xf8>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	f003 020f 	and.w	r2, r3, #15
 800868c:	6879      	ldr	r1, [r7, #4]
 800868e:	4613      	mov	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	440b      	add	r3, r1
 8008698:	3324      	adds	r3, #36	@ 0x24
 800869a:	2200      	movs	r2, #0
 800869c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800869e:	4b32      	ldr	r3, [pc, #200]	@ (8008768 <USBD_CDC_DeInit+0xfc>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f002 fa96 	bl	800abd6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80086aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008768 <USBD_CDC_DeInit+0xfc>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	f003 020f 	and.w	r2, r3, #15
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	4613      	mov	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	440b      	add	r3, r1
 80086be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80086c2:	2200      	movs	r2, #0
 80086c4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80086c6:	4b29      	ldr	r3, [pc, #164]	@ (800876c <USBD_CDC_DeInit+0x100>)
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f002 fa82 	bl	800abd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80086d2:	4b26      	ldr	r3, [pc, #152]	@ (800876c <USBD_CDC_DeInit+0x100>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	f003 020f 	and.w	r2, r3, #15
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	4613      	mov	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	440b      	add	r3, r1
 80086e6:	3324      	adds	r3, #36	@ 0x24
 80086e8:	2200      	movs	r2, #0
 80086ea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80086ec:	4b1f      	ldr	r3, [pc, #124]	@ (800876c <USBD_CDC_DeInit+0x100>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	f003 020f 	and.w	r2, r3, #15
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	440b      	add	r3, r1
 8008700:	3326      	adds	r3, #38	@ 0x26
 8008702:	2200      	movs	r2, #0
 8008704:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	32b0      	adds	r2, #176	@ 0xb0
 8008710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d01f      	beq.n	8008758 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	33b0      	adds	r3, #176	@ 0xb0
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	32b0      	adds	r2, #176	@ 0xb0
 8008736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873a:	4618      	mov	r0, r3
 800873c:	f002 fb56 	bl	800adec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	32b0      	adds	r2, #176	@ 0xb0
 800874a:	2100      	movs	r1, #0
 800874c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	2000011f 	.word	0x2000011f
 8008768:	20000120 	.word	0x20000120
 800876c:	20000121 	.word	0x20000121

08008770 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	32b0      	adds	r2, #176	@ 0xb0
 8008784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008788:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800878e:	2300      	movs	r3, #0
 8008790:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800879c:	2303      	movs	r3, #3
 800879e:	e0bf      	b.n	8008920 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d050      	beq.n	800884e <USBD_CDC_Setup+0xde>
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	f040 80af 	bne.w	8008910 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	88db      	ldrh	r3, [r3, #6]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d03a      	beq.n	8008830 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	b25b      	sxtb	r3, r3
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	da1b      	bge.n	80087fc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	33b0      	adds	r3, #176	@ 0xb0
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80087da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80087dc:	683a      	ldr	r2, [r7, #0]
 80087de:	88d2      	ldrh	r2, [r2, #6]
 80087e0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	88db      	ldrh	r3, [r3, #6]
 80087e6:	2b07      	cmp	r3, #7
 80087e8:	bf28      	it	cs
 80087ea:	2307      	movcs	r3, #7
 80087ec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	89fa      	ldrh	r2, [r7, #14]
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f001 fd93 	bl	800a320 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80087fa:	e090      	b.n	800891e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	785a      	ldrb	r2, [r3, #1]
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	88db      	ldrh	r3, [r3, #6]
 800880a:	2b3f      	cmp	r3, #63	@ 0x3f
 800880c:	d803      	bhi.n	8008816 <USBD_CDC_Setup+0xa6>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	88db      	ldrh	r3, [r3, #6]
 8008812:	b2da      	uxtb	r2, r3
 8008814:	e000      	b.n	8008818 <USBD_CDC_Setup+0xa8>
 8008816:	2240      	movs	r2, #64	@ 0x40
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800881e:	6939      	ldr	r1, [r7, #16]
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008826:	461a      	mov	r2, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f001 fda5 	bl	800a378 <USBD_CtlPrepareRx>
      break;
 800882e:	e076      	b.n	800891e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	33b0      	adds	r3, #176	@ 0xb0
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	7850      	ldrb	r0, [r2, #1]
 8008846:	2200      	movs	r2, #0
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	4798      	blx	r3
      break;
 800884c:	e067      	b.n	800891e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	2b0b      	cmp	r3, #11
 8008854:	d851      	bhi.n	80088fa <USBD_CDC_Setup+0x18a>
 8008856:	a201      	add	r2, pc, #4	@ (adr r2, 800885c <USBD_CDC_Setup+0xec>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	0800888d 	.word	0x0800888d
 8008860:	08008909 	.word	0x08008909
 8008864:	080088fb 	.word	0x080088fb
 8008868:	080088fb 	.word	0x080088fb
 800886c:	080088fb 	.word	0x080088fb
 8008870:	080088fb 	.word	0x080088fb
 8008874:	080088fb 	.word	0x080088fb
 8008878:	080088fb 	.word	0x080088fb
 800887c:	080088fb 	.word	0x080088fb
 8008880:	080088fb 	.word	0x080088fb
 8008884:	080088b7 	.word	0x080088b7
 8008888:	080088e1 	.word	0x080088e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b03      	cmp	r3, #3
 8008896:	d107      	bne.n	80088a8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008898:	f107 030a 	add.w	r3, r7, #10
 800889c:	2202      	movs	r2, #2
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 fd3d 	bl	800a320 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088a6:	e032      	b.n	800890e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f001 fcbb 	bl	800a226 <USBD_CtlError>
            ret = USBD_FAIL;
 80088b0:	2303      	movs	r3, #3
 80088b2:	75fb      	strb	r3, [r7, #23]
          break;
 80088b4:	e02b      	b.n	800890e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b03      	cmp	r3, #3
 80088c0:	d107      	bne.n	80088d2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80088c2:	f107 030d 	add.w	r3, r7, #13
 80088c6:	2201      	movs	r2, #1
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f001 fd28 	bl	800a320 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088d0:	e01d      	b.n	800890e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f001 fca6 	bl	800a226 <USBD_CtlError>
            ret = USBD_FAIL;
 80088da:	2303      	movs	r3, #3
 80088dc:	75fb      	strb	r3, [r7, #23]
          break;
 80088de:	e016      	b.n	800890e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b03      	cmp	r3, #3
 80088ea:	d00f      	beq.n	800890c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 fc99 	bl	800a226 <USBD_CtlError>
            ret = USBD_FAIL;
 80088f4:	2303      	movs	r3, #3
 80088f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80088f8:	e008      	b.n	800890c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 fc92 	bl	800a226 <USBD_CtlError>
          ret = USBD_FAIL;
 8008902:	2303      	movs	r3, #3
 8008904:	75fb      	strb	r3, [r7, #23]
          break;
 8008906:	e002      	b.n	800890e <USBD_CDC_Setup+0x19e>
          break;
 8008908:	bf00      	nop
 800890a:	e008      	b.n	800891e <USBD_CDC_Setup+0x1ae>
          break;
 800890c:	bf00      	nop
      }
      break;
 800890e:	e006      	b.n	800891e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f001 fc87 	bl	800a226 <USBD_CtlError>
      ret = USBD_FAIL;
 8008918:	2303      	movs	r3, #3
 800891a:	75fb      	strb	r3, [r7, #23]
      break;
 800891c:	bf00      	nop
  }

  return (uint8_t)ret;
 800891e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3718      	adds	r7, #24
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	460b      	mov	r3, r1
 8008932:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800893a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	32b0      	adds	r2, #176	@ 0xb0
 8008946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800894e:	2303      	movs	r3, #3
 8008950:	e065      	b.n	8008a1e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	32b0      	adds	r2, #176	@ 0xb0
 800895c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008960:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008962:	78fb      	ldrb	r3, [r7, #3]
 8008964:	f003 020f 	and.w	r2, r3, #15
 8008968:	6879      	ldr	r1, [r7, #4]
 800896a:	4613      	mov	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4413      	add	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	440b      	add	r3, r1
 8008974:	3318      	adds	r3, #24
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d02f      	beq.n	80089dc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800897c:	78fb      	ldrb	r3, [r7, #3]
 800897e:	f003 020f 	and.w	r2, r3, #15
 8008982:	6879      	ldr	r1, [r7, #4]
 8008984:	4613      	mov	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	440b      	add	r3, r1
 800898e:	3318      	adds	r3, #24
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	78fb      	ldrb	r3, [r7, #3]
 8008994:	f003 010f 	and.w	r1, r3, #15
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	460b      	mov	r3, r1
 800899c:	00db      	lsls	r3, r3, #3
 800899e:	440b      	add	r3, r1
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4403      	add	r3, r0
 80089a4:	331c      	adds	r3, #28
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80089ac:	fb01 f303 	mul.w	r3, r1, r3
 80089b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d112      	bne.n	80089dc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80089b6:	78fb      	ldrb	r3, [r7, #3]
 80089b8:	f003 020f 	and.w	r2, r3, #15
 80089bc:	6879      	ldr	r1, [r7, #4]
 80089be:	4613      	mov	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	440b      	add	r3, r1
 80089c8:	3318      	adds	r3, #24
 80089ca:	2200      	movs	r2, #0
 80089cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80089ce:	78f9      	ldrb	r1, [r7, #3]
 80089d0:	2300      	movs	r3, #0
 80089d2:	2200      	movs	r2, #0
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f002 f9a6 	bl	800ad26 <USBD_LL_Transmit>
 80089da:	e01f      	b.n	8008a1c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2200      	movs	r2, #0
 80089e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	33b0      	adds	r3, #176	@ 0xb0
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d010      	beq.n	8008a1c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	33b0      	adds	r3, #176	@ 0xb0
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008a18:	78fa      	ldrb	r2, [r7, #3]
 8008a1a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	32b0      	adds	r2, #176	@ 0xb0
 8008a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a40:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	32b0      	adds	r2, #176	@ 0xb0
 8008a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e01a      	b.n	8008a8e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a58:	78fb      	ldrb	r3, [r7, #3]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f002 f9a4 	bl	800adaa <USBD_LL_GetRxDataSize>
 8008a62:	4602      	mov	r2, r0
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	33b0      	adds	r3, #176	@ 0xb0
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008a88:	4611      	mov	r1, r2
 8008a8a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b084      	sub	sp, #16
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	32b0      	adds	r2, #176	@ 0xb0
 8008aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e024      	b.n	8008b02 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	33b0      	adds	r3, #176	@ 0xb0
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d019      	beq.n	8008b00 <USBD_CDC_EP0_RxReady+0x6a>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008ad2:	2bff      	cmp	r3, #255	@ 0xff
 8008ad4:	d014      	beq.n	8008b00 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	33b0      	adds	r3, #176	@ 0xb0
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008aee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008af6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	22ff      	movs	r2, #255	@ 0xff
 8008afc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
	...

08008b0c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b14:	2182      	movs	r1, #130	@ 0x82
 8008b16:	4818      	ldr	r0, [pc, #96]	@ (8008b78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b18:	f000 fd4f 	bl	80095ba <USBD_GetEpDesc>
 8008b1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b1e:	2101      	movs	r1, #1
 8008b20:	4815      	ldr	r0, [pc, #84]	@ (8008b78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b22:	f000 fd4a 	bl	80095ba <USBD_GetEpDesc>
 8008b26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008b28:	2181      	movs	r1, #129	@ 0x81
 8008b2a:	4813      	ldr	r0, [pc, #76]	@ (8008b78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b2c:	f000 fd45 	bl	80095ba <USBD_GetEpDesc>
 8008b30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	2210      	movs	r2, #16
 8008b3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d006      	beq.n	8008b52 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b4c:	711a      	strb	r2, [r3, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d006      	beq.n	8008b66 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b60:	711a      	strb	r2, [r3, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2243      	movs	r2, #67	@ 0x43
 8008b6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008b6c:	4b02      	ldr	r3, [pc, #8]	@ (8008b78 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	200000dc 	.word	0x200000dc

08008b7c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b84:	2182      	movs	r1, #130	@ 0x82
 8008b86:	4818      	ldr	r0, [pc, #96]	@ (8008be8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008b88:	f000 fd17 	bl	80095ba <USBD_GetEpDesc>
 8008b8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b8e:	2101      	movs	r1, #1
 8008b90:	4815      	ldr	r0, [pc, #84]	@ (8008be8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008b92:	f000 fd12 	bl	80095ba <USBD_GetEpDesc>
 8008b96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008b98:	2181      	movs	r1, #129	@ 0x81
 8008b9a:	4813      	ldr	r0, [pc, #76]	@ (8008be8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008b9c:	f000 fd0d 	bl	80095ba <USBD_GetEpDesc>
 8008ba0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	2210      	movs	r2, #16
 8008bac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d006      	beq.n	8008bc2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	711a      	strb	r2, [r3, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f042 0202 	orr.w	r2, r2, #2
 8008bc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d006      	beq.n	8008bd6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	711a      	strb	r2, [r3, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f042 0202 	orr.w	r2, r2, #2
 8008bd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2243      	movs	r2, #67	@ 0x43
 8008bda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008bdc:	4b02      	ldr	r3, [pc, #8]	@ (8008be8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	200000dc 	.word	0x200000dc

08008bec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008bf4:	2182      	movs	r1, #130	@ 0x82
 8008bf6:	4818      	ldr	r0, [pc, #96]	@ (8008c58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008bf8:	f000 fcdf 	bl	80095ba <USBD_GetEpDesc>
 8008bfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008bfe:	2101      	movs	r1, #1
 8008c00:	4815      	ldr	r0, [pc, #84]	@ (8008c58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c02:	f000 fcda 	bl	80095ba <USBD_GetEpDesc>
 8008c06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c08:	2181      	movs	r1, #129	@ 0x81
 8008c0a:	4813      	ldr	r0, [pc, #76]	@ (8008c58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c0c:	f000 fcd5 	bl	80095ba <USBD_GetEpDesc>
 8008c10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	2210      	movs	r2, #16
 8008c1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d006      	beq.n	8008c32 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c2c:	711a      	strb	r2, [r3, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d006      	beq.n	8008c46 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c40:	711a      	strb	r2, [r3, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2243      	movs	r2, #67	@ 0x43
 8008c4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c4c:	4b02      	ldr	r3, [pc, #8]	@ (8008c58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	200000dc 	.word	0x200000dc

08008c5c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	220a      	movs	r2, #10
 8008c68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008c6a:	4b03      	ldr	r3, [pc, #12]	@ (8008c78 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	20000098 	.word	0x20000098

08008c7c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e009      	b.n	8008ca4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	33b0      	adds	r3, #176	@ 0xb0
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	32b0      	adds	r2, #176	@ 0xb0
 8008cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cca:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d101      	bne.n	8008cd6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e008      	b.n	8008ce8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	371c      	adds	r7, #28
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	32b0      	adds	r2, #176	@ 0xb0
 8008d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e004      	b.n	8008d22 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
	...

08008d30 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	32b0      	adds	r2, #176	@ 0xb0
 8008d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d46:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d101      	bne.n	8008d56 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e025      	b.n	8008da2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d11f      	bne.n	8008da0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008d68:	4b10      	ldr	r3, [pc, #64]	@ (8008dac <USBD_CDC_TransmitPacket+0x7c>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	f003 020f 	and.w	r2, r3, #15
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4403      	add	r3, r0
 8008d82:	3318      	adds	r3, #24
 8008d84:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008d86:	4b09      	ldr	r3, [pc, #36]	@ (8008dac <USBD_CDC_TransmitPacket+0x7c>)
 8008d88:	7819      	ldrb	r1, [r3, #0]
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f001 ffc5 	bl	800ad26 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	2000011f 	.word	0x2000011f

08008db0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	32b0      	adds	r2, #176	@ 0xb0
 8008dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	32b0      	adds	r2, #176	@ 0xb0
 8008dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e018      	b.n	8008e10 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	7c1b      	ldrb	r3, [r3, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10a      	bne.n	8008dfc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008de6:	4b0c      	ldr	r3, [pc, #48]	@ (8008e18 <USBD_CDC_ReceivePacket+0x68>)
 8008de8:	7819      	ldrb	r1, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008df0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f001 ffb7 	bl	800ad68 <USBD_LL_PrepareReceive>
 8008dfa:	e008      	b.n	8008e0e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008dfc:	4b06      	ldr	r3, [pc, #24]	@ (8008e18 <USBD_CDC_ReceivePacket+0x68>)
 8008dfe:	7819      	ldrb	r1, [r3, #0]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008e06:	2340      	movs	r3, #64	@ 0x40
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f001 ffad 	bl	800ad68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20000120 	.word	0x20000120

08008e1c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	4613      	mov	r3, r2
 8008e28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e01f      	b.n	8008e74 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	79fa      	ldrb	r2, [r7, #7]
 8008e66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f001 fe21 	bl	800aab0 <USBD_LL_Init>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3718      	adds	r7, #24
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d101      	bne.n	8008e94 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e90:	2303      	movs	r3, #3
 8008e92:	e025      	b.n	8008ee0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	32ae      	adds	r2, #174	@ 0xae
 8008ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00f      	beq.n	8008ed0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	32ae      	adds	r2, #174	@ 0xae
 8008eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec0:	f107 020e 	add.w	r2, r7, #14
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	4798      	blx	r3
 8008ec8:	4602      	mov	r2, r0
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f001 fe2f 	bl	800ab54 <USBD_LL_Start>
 8008ef6:	4603      	mov	r3, r0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f08:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b084      	sub	sp, #16
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	460b      	mov	r3, r1
 8008f20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f22:	2300      	movs	r3, #0
 8008f24:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d009      	beq.n	8008f44 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	78fa      	ldrb	r2, [r7, #3]
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	4798      	blx	r3
 8008f40:	4603      	mov	r3, r0
 8008f42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	460b      	mov	r3, r1
 8008f58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	78fa      	ldrb	r2, [r7, #3]
 8008f68:	4611      	mov	r1, r2
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	4798      	blx	r3
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008f74:	2303      	movs	r3, #3
 8008f76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f001 f90c 	bl	800a1b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008fa8:	461a      	mov	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008fb6:	f003 031f 	and.w	r3, r3, #31
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d01a      	beq.n	8008ff4 <USBD_LL_SetupStage+0x72>
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d822      	bhi.n	8009008 <USBD_LL_SetupStage+0x86>
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d002      	beq.n	8008fcc <USBD_LL_SetupStage+0x4a>
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d00a      	beq.n	8008fe0 <USBD_LL_SetupStage+0x5e>
 8008fca:	e01d      	b.n	8009008 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fb63 	bl	80096a0 <USBD_StdDevReq>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8008fde:	e020      	b.n	8009022 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fbcb 	bl	8009784 <USBD_StdItfReq>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ff2:	e016      	b.n	8009022 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 fc2d 	bl	800985c <USBD_StdEPReq>
 8009002:	4603      	mov	r3, r0
 8009004:	73fb      	strb	r3, [r7, #15]
      break;
 8009006:	e00c      	b.n	8009022 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800900e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009012:	b2db      	uxtb	r3, r3
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f001 fdfc 	bl	800ac14 <USBD_LL_StallEP>
 800901c:	4603      	mov	r3, r0
 800901e:	73fb      	strb	r3, [r7, #15]
      break;
 8009020:	bf00      	nop
  }

  return ret;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	460b      	mov	r3, r1
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800903e:	7afb      	ldrb	r3, [r7, #11]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d16e      	bne.n	8009122 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800904a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009052:	2b03      	cmp	r3, #3
 8009054:	f040 8098 	bne.w	8009188 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	689a      	ldr	r2, [r3, #8]
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	429a      	cmp	r2, r3
 8009062:	d913      	bls.n	800908c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	1ad2      	subs	r2, r2, r3
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	4293      	cmp	r3, r2
 800907c:	bf28      	it	cs
 800907e:	4613      	movcs	r3, r2
 8009080:	461a      	mov	r2, r3
 8009082:	6879      	ldr	r1, [r7, #4]
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f001 f994 	bl	800a3b2 <USBD_CtlContinueRx>
 800908a:	e07d      	b.n	8009188 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009092:	f003 031f 	and.w	r3, r3, #31
 8009096:	2b02      	cmp	r3, #2
 8009098:	d014      	beq.n	80090c4 <USBD_LL_DataOutStage+0x98>
 800909a:	2b02      	cmp	r3, #2
 800909c:	d81d      	bhi.n	80090da <USBD_LL_DataOutStage+0xae>
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d002      	beq.n	80090a8 <USBD_LL_DataOutStage+0x7c>
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d003      	beq.n	80090ae <USBD_LL_DataOutStage+0x82>
 80090a6:	e018      	b.n	80090da <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80090a8:	2300      	movs	r3, #0
 80090aa:	75bb      	strb	r3, [r7, #22]
            break;
 80090ac:	e018      	b.n	80090e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	4619      	mov	r1, r3
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f000 fa64 	bl	8009586 <USBD_CoreFindIF>
 80090be:	4603      	mov	r3, r0
 80090c0:	75bb      	strb	r3, [r7, #22]
            break;
 80090c2:	e00d      	b.n	80090e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	4619      	mov	r1, r3
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 fa66 	bl	80095a0 <USBD_CoreFindEP>
 80090d4:	4603      	mov	r3, r0
 80090d6:	75bb      	strb	r3, [r7, #22]
            break;
 80090d8:	e002      	b.n	80090e0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	75bb      	strb	r3, [r7, #22]
            break;
 80090de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80090e0:	7dbb      	ldrb	r3, [r7, #22]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d119      	bne.n	800911a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d113      	bne.n	800911a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80090f2:	7dba      	ldrb	r2, [r7, #22]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	32ae      	adds	r2, #174	@ 0xae
 80090f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00b      	beq.n	800911a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009102:	7dba      	ldrb	r2, [r7, #22]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800910a:	7dba      	ldrb	r2, [r7, #22]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	32ae      	adds	r2, #174	@ 0xae
 8009110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f001 f95a 	bl	800a3d4 <USBD_CtlSendStatus>
 8009120:	e032      	b.n	8009188 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009122:	7afb      	ldrb	r3, [r7, #11]
 8009124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009128:	b2db      	uxtb	r3, r3
 800912a:	4619      	mov	r1, r3
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f000 fa37 	bl	80095a0 <USBD_CoreFindEP>
 8009132:	4603      	mov	r3, r0
 8009134:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009136:	7dbb      	ldrb	r3, [r7, #22]
 8009138:	2bff      	cmp	r3, #255	@ 0xff
 800913a:	d025      	beq.n	8009188 <USBD_LL_DataOutStage+0x15c>
 800913c:	7dbb      	ldrb	r3, [r7, #22]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d122      	bne.n	8009188 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b03      	cmp	r3, #3
 800914c:	d117      	bne.n	800917e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800914e:	7dba      	ldrb	r2, [r7, #22]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	32ae      	adds	r2, #174	@ 0xae
 8009154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00f      	beq.n	800917e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800915e:	7dba      	ldrb	r2, [r7, #22]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009166:	7dba      	ldrb	r2, [r7, #22]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	32ae      	adds	r2, #174	@ 0xae
 800916c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	7afa      	ldrb	r2, [r7, #11]
 8009174:	4611      	mov	r1, r2
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	4798      	blx	r3
 800917a:	4603      	mov	r3, r0
 800917c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009184:	7dfb      	ldrb	r3, [r7, #23]
 8009186:	e000      	b.n	800918a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3718      	adds	r7, #24
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b086      	sub	sp, #24
 8009196:	af00      	add	r7, sp, #0
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	460b      	mov	r3, r1
 800919c:	607a      	str	r2, [r7, #4]
 800919e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80091a0:	7afb      	ldrb	r3, [r7, #11]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d16f      	bne.n	8009286 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	3314      	adds	r3, #20
 80091aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d15a      	bne.n	800926c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	689a      	ldr	r2, [r3, #8]
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d914      	bls.n	80091ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	689a      	ldr	r2, [r3, #8]
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	1ad2      	subs	r2, r2, r3
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	461a      	mov	r2, r3
 80091d6:	6879      	ldr	r1, [r7, #4]
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f001 f8bc 	bl	800a356 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091de:	2300      	movs	r3, #0
 80091e0:	2200      	movs	r2, #0
 80091e2:	2100      	movs	r1, #0
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f001 fdbf 	bl	800ad68 <USBD_LL_PrepareReceive>
 80091ea:	e03f      	b.n	800926c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	68da      	ldr	r2, [r3, #12]
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d11c      	bne.n	8009232 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009200:	429a      	cmp	r2, r3
 8009202:	d316      	bcc.n	8009232 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800920e:	429a      	cmp	r2, r3
 8009210:	d20f      	bcs.n	8009232 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009212:	2200      	movs	r2, #0
 8009214:	2100      	movs	r1, #0
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f001 f89d 	bl	800a356 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009224:	2300      	movs	r3, #0
 8009226:	2200      	movs	r2, #0
 8009228:	2100      	movs	r1, #0
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f001 fd9c 	bl	800ad68 <USBD_LL_PrepareReceive>
 8009230:	e01c      	b.n	800926c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b03      	cmp	r3, #3
 800923c:	d10f      	bne.n	800925e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d009      	beq.n	800925e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800925e:	2180      	movs	r1, #128	@ 0x80
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f001 fcd7 	bl	800ac14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f001 f8c7 	bl	800a3fa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d03a      	beq.n	80092ec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f7ff fe42 	bl	8008f00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009284:	e032      	b.n	80092ec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009286:	7afb      	ldrb	r3, [r7, #11]
 8009288:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800928c:	b2db      	uxtb	r3, r3
 800928e:	4619      	mov	r1, r3
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f000 f985 	bl	80095a0 <USBD_CoreFindEP>
 8009296:	4603      	mov	r3, r0
 8009298:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800929a:	7dfb      	ldrb	r3, [r7, #23]
 800929c:	2bff      	cmp	r3, #255	@ 0xff
 800929e:	d025      	beq.n	80092ec <USBD_LL_DataInStage+0x15a>
 80092a0:	7dfb      	ldrb	r3, [r7, #23]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d122      	bne.n	80092ec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b03      	cmp	r3, #3
 80092b0:	d11c      	bne.n	80092ec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80092b2:	7dfa      	ldrb	r2, [r7, #23]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	32ae      	adds	r2, #174	@ 0xae
 80092b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d014      	beq.n	80092ec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80092c2:	7dfa      	ldrb	r2, [r7, #23]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80092ca:	7dfa      	ldrb	r2, [r7, #23]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	32ae      	adds	r2, #174	@ 0xae
 80092d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	7afa      	ldrb	r2, [r7, #11]
 80092d8:	4611      	mov	r1, r2
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	4798      	blx	r3
 80092de:	4603      	mov	r3, r0
 80092e0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80092e2:	7dbb      	ldrb	r3, [r7, #22]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d001      	beq.n	80092ec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80092e8:	7dbb      	ldrb	r3, [r7, #22]
 80092ea:	e000      	b.n	80092ee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b084      	sub	sp, #16
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800932e:	2b00      	cmp	r3, #0
 8009330:	d014      	beq.n	800935c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00e      	beq.n	800935c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	6852      	ldr	r2, [r2, #4]
 800934a:	b2d2      	uxtb	r2, r2
 800934c:	4611      	mov	r1, r2
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	4798      	blx	r3
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009358:	2303      	movs	r3, #3
 800935a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800935c:	2340      	movs	r3, #64	@ 0x40
 800935e:	2200      	movs	r2, #0
 8009360:	2100      	movs	r1, #0
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f001 fc11 	bl	800ab8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2240      	movs	r2, #64	@ 0x40
 8009374:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009378:	2340      	movs	r3, #64	@ 0x40
 800937a:	2200      	movs	r2, #0
 800937c:	2180      	movs	r1, #128	@ 0x80
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f001 fc03 	bl	800ab8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2240      	movs	r2, #64	@ 0x40
 800938e:	621a      	str	r2, [r3, #32]

  return ret;
 8009390:	7bfb      	ldrb	r3, [r7, #15]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800939a:	b480      	push	{r7}
 800939c:	b083      	sub	sp, #12
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	460b      	mov	r3, r1
 80093a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	78fa      	ldrb	r2, [r7, #3]
 80093aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b083      	sub	sp, #12
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d006      	beq.n	80093dc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2204      	movs	r2, #4
 80093e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b04      	cmp	r3, #4
 8009404:	d106      	bne.n	8009414 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800940c:	b2da      	uxtb	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	370c      	adds	r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b082      	sub	sp, #8
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b03      	cmp	r3, #3
 8009434:	d110      	bne.n	8009458 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00b      	beq.n	8009458 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009446:	69db      	ldr	r3, [r3, #28]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d005      	beq.n	8009458 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009452:	69db      	ldr	r3, [r3, #28]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b082      	sub	sp, #8
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	460b      	mov	r3, r1
 800946c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	32ae      	adds	r2, #174	@ 0xae
 8009478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d101      	bne.n	8009484 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009480:	2303      	movs	r3, #3
 8009482:	e01c      	b.n	80094be <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b03      	cmp	r3, #3
 800948e:	d115      	bne.n	80094bc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	32ae      	adds	r2, #174	@ 0xae
 800949a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800949e:	6a1b      	ldr	r3, [r3, #32]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00b      	beq.n	80094bc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	32ae      	adds	r2, #174	@ 0xae
 80094ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b2:	6a1b      	ldr	r3, [r3, #32]
 80094b4:	78fa      	ldrb	r2, [r7, #3]
 80094b6:	4611      	mov	r1, r2
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b082      	sub	sp, #8
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	460b      	mov	r3, r1
 80094d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	32ae      	adds	r2, #174	@ 0xae
 80094dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d101      	bne.n	80094e8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e01c      	b.n	8009522 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d115      	bne.n	8009520 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	32ae      	adds	r2, #174	@ 0xae
 80094fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00b      	beq.n	8009520 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	32ae      	adds	r2, #174	@ 0xae
 8009512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009518:	78fa      	ldrb	r2, [r7, #3]
 800951a:	4611      	mov	r1, r2
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00e      	beq.n	800957c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	6852      	ldr	r2, [r2, #4]
 800956a:	b2d2      	uxtb	r2, r2
 800956c:	4611      	mov	r1, r2
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	4798      	blx	r3
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009578:	2303      	movs	r3, #3
 800957a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800957c:	7bfb      	ldrb	r3, [r7, #15]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009586:	b480      	push	{r7}
 8009588:	b083      	sub	sp, #12
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	460b      	mov	r3, r1
 8009590:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009592:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009594:	4618      	mov	r0, r3
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80095ac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	370c      	adds	r7, #12
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b086      	sub	sp, #24
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	460b      	mov	r3, r1
 80095c4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	885b      	ldrh	r3, [r3, #2]
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	7812      	ldrb	r2, [r2, #0]
 80095dc:	4293      	cmp	r3, r2
 80095de:	d91f      	bls.n	8009620 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80095e6:	e013      	b.n	8009610 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80095e8:	f107 030a 	add.w	r3, r7, #10
 80095ec:	4619      	mov	r1, r3
 80095ee:	6978      	ldr	r0, [r7, #20]
 80095f0:	f000 f81b 	bl	800962a <USBD_GetNextDesc>
 80095f4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	785b      	ldrb	r3, [r3, #1]
 80095fa:	2b05      	cmp	r3, #5
 80095fc:	d108      	bne.n	8009610 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	789b      	ldrb	r3, [r3, #2]
 8009606:	78fa      	ldrb	r2, [r7, #3]
 8009608:	429a      	cmp	r2, r3
 800960a:	d008      	beq.n	800961e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800960c:	2300      	movs	r3, #0
 800960e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	885b      	ldrh	r3, [r3, #2]
 8009614:	b29a      	uxth	r2, r3
 8009616:	897b      	ldrh	r3, [r7, #10]
 8009618:	429a      	cmp	r2, r3
 800961a:	d8e5      	bhi.n	80095e8 <USBD_GetEpDesc+0x2e>
 800961c:	e000      	b.n	8009620 <USBD_GetEpDesc+0x66>
          break;
 800961e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009620:	693b      	ldr	r3, [r7, #16]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800962a:	b480      	push	{r7}
 800962c:	b085      	sub	sp, #20
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	881b      	ldrh	r3, [r3, #0]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	7812      	ldrb	r2, [r2, #0]
 8009640:	4413      	add	r3, r2
 8009642:	b29a      	uxth	r2, r3
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	461a      	mov	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4413      	add	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009654:	68fb      	ldr	r3, [r7, #12]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009662:	b480      	push	{r7}
 8009664:	b087      	sub	sp, #28
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	3301      	adds	r3, #1
 8009678:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009680:	8a3b      	ldrh	r3, [r7, #16]
 8009682:	021b      	lsls	r3, r3, #8
 8009684:	b21a      	sxth	r2, r3
 8009686:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800968a:	4313      	orrs	r3, r2
 800968c:	b21b      	sxth	r3, r3
 800968e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009690:	89fb      	ldrh	r3, [r7, #14]
}
 8009692:	4618      	mov	r0, r3
 8009694:	371c      	adds	r7, #28
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
	...

080096a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80096b6:	2b40      	cmp	r3, #64	@ 0x40
 80096b8:	d005      	beq.n	80096c6 <USBD_StdDevReq+0x26>
 80096ba:	2b40      	cmp	r3, #64	@ 0x40
 80096bc:	d857      	bhi.n	800976e <USBD_StdDevReq+0xce>
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00f      	beq.n	80096e2 <USBD_StdDevReq+0x42>
 80096c2:	2b20      	cmp	r3, #32
 80096c4:	d153      	bne.n	800976e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	32ae      	adds	r2, #174	@ 0xae
 80096d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	4798      	blx	r3
 80096dc:	4603      	mov	r3, r0
 80096de:	73fb      	strb	r3, [r7, #15]
      break;
 80096e0:	e04a      	b.n	8009778 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	785b      	ldrb	r3, [r3, #1]
 80096e6:	2b09      	cmp	r3, #9
 80096e8:	d83b      	bhi.n	8009762 <USBD_StdDevReq+0xc2>
 80096ea:	a201      	add	r2, pc, #4	@ (adr r2, 80096f0 <USBD_StdDevReq+0x50>)
 80096ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f0:	08009745 	.word	0x08009745
 80096f4:	08009759 	.word	0x08009759
 80096f8:	08009763 	.word	0x08009763
 80096fc:	0800974f 	.word	0x0800974f
 8009700:	08009763 	.word	0x08009763
 8009704:	08009723 	.word	0x08009723
 8009708:	08009719 	.word	0x08009719
 800970c:	08009763 	.word	0x08009763
 8009710:	0800973b 	.word	0x0800973b
 8009714:	0800972d 	.word	0x0800972d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fa3c 	bl	8009b98 <USBD_GetDescriptor>
          break;
 8009720:	e024      	b.n	800976c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fba1 	bl	8009e6c <USBD_SetAddress>
          break;
 800972a:	e01f      	b.n	800976c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fbe0 	bl	8009ef4 <USBD_SetConfig>
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]
          break;
 8009738:	e018      	b.n	800976c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fc83 	bl	800a048 <USBD_GetConfig>
          break;
 8009742:	e013      	b.n	800976c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fcb4 	bl	800a0b4 <USBD_GetStatus>
          break;
 800974c:	e00e      	b.n	800976c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fce3 	bl	800a11c <USBD_SetFeature>
          break;
 8009756:	e009      	b.n	800976c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fd07 	bl	800a16e <USBD_ClrFeature>
          break;
 8009760:	e004      	b.n	800976c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fd5e 	bl	800a226 <USBD_CtlError>
          break;
 800976a:	bf00      	nop
      }
      break;
 800976c:	e004      	b.n	8009778 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fd58 	bl	800a226 <USBD_CtlError>
      break;
 8009776:	bf00      	nop
  }

  return ret;
 8009778:	7bfb      	ldrb	r3, [r7, #15]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop

08009784 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800979a:	2b40      	cmp	r3, #64	@ 0x40
 800979c:	d005      	beq.n	80097aa <USBD_StdItfReq+0x26>
 800979e:	2b40      	cmp	r3, #64	@ 0x40
 80097a0:	d852      	bhi.n	8009848 <USBD_StdItfReq+0xc4>
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <USBD_StdItfReq+0x26>
 80097a6:	2b20      	cmp	r3, #32
 80097a8:	d14e      	bne.n	8009848 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	3b01      	subs	r3, #1
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d840      	bhi.n	800983a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	889b      	ldrh	r3, [r3, #4]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d836      	bhi.n	8009830 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	889b      	ldrh	r3, [r3, #4]
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7ff fedb 	bl	8009586 <USBD_CoreFindIF>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097d4:	7bbb      	ldrb	r3, [r7, #14]
 80097d6:	2bff      	cmp	r3, #255	@ 0xff
 80097d8:	d01d      	beq.n	8009816 <USBD_StdItfReq+0x92>
 80097da:	7bbb      	ldrb	r3, [r7, #14]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d11a      	bne.n	8009816 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80097e0:	7bba      	ldrb	r2, [r7, #14]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	32ae      	adds	r2, #174	@ 0xae
 80097e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00f      	beq.n	8009810 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80097f0:	7bba      	ldrb	r2, [r7, #14]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097f8:	7bba      	ldrb	r2, [r7, #14]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	32ae      	adds	r2, #174	@ 0xae
 80097fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	4798      	blx	r3
 800980a:	4603      	mov	r3, r0
 800980c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800980e:	e004      	b.n	800981a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009810:	2303      	movs	r3, #3
 8009812:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009814:	e001      	b.n	800981a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009816:	2303      	movs	r3, #3
 8009818:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	88db      	ldrh	r3, [r3, #6]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d110      	bne.n	8009844 <USBD_StdItfReq+0xc0>
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10d      	bne.n	8009844 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fdd3 	bl	800a3d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800982e:	e009      	b.n	8009844 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fcf7 	bl	800a226 <USBD_CtlError>
          break;
 8009838:	e004      	b.n	8009844 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fcf2 	bl	800a226 <USBD_CtlError>
          break;
 8009842:	e000      	b.n	8009846 <USBD_StdItfReq+0xc2>
          break;
 8009844:	bf00      	nop
      }
      break;
 8009846:	e004      	b.n	8009852 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fceb 	bl	800a226 <USBD_CtlError>
      break;
 8009850:	bf00      	nop
  }

  return ret;
 8009852:	7bfb      	ldrb	r3, [r7, #15]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	889b      	ldrh	r3, [r3, #4]
 800986e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009878:	2b40      	cmp	r3, #64	@ 0x40
 800987a:	d007      	beq.n	800988c <USBD_StdEPReq+0x30>
 800987c:	2b40      	cmp	r3, #64	@ 0x40
 800987e:	f200 817f 	bhi.w	8009b80 <USBD_StdEPReq+0x324>
 8009882:	2b00      	cmp	r3, #0
 8009884:	d02a      	beq.n	80098dc <USBD_StdEPReq+0x80>
 8009886:	2b20      	cmp	r3, #32
 8009888:	f040 817a 	bne.w	8009b80 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800988c:	7bbb      	ldrb	r3, [r7, #14]
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7ff fe85 	bl	80095a0 <USBD_CoreFindEP>
 8009896:	4603      	mov	r3, r0
 8009898:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800989a:	7b7b      	ldrb	r3, [r7, #13]
 800989c:	2bff      	cmp	r3, #255	@ 0xff
 800989e:	f000 8174 	beq.w	8009b8a <USBD_StdEPReq+0x32e>
 80098a2:	7b7b      	ldrb	r3, [r7, #13]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f040 8170 	bne.w	8009b8a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80098aa:	7b7a      	ldrb	r2, [r7, #13]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80098b2:	7b7a      	ldrb	r2, [r7, #13]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	32ae      	adds	r2, #174	@ 0xae
 80098b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f000 8163 	beq.w	8009b8a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80098c4:	7b7a      	ldrb	r2, [r7, #13]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	32ae      	adds	r2, #174	@ 0xae
 80098ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	4798      	blx	r3
 80098d6:	4603      	mov	r3, r0
 80098d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80098da:	e156      	b.n	8009b8a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	785b      	ldrb	r3, [r3, #1]
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d008      	beq.n	80098f6 <USBD_StdEPReq+0x9a>
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	f300 8145 	bgt.w	8009b74 <USBD_StdEPReq+0x318>
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 809b 	beq.w	8009a26 <USBD_StdEPReq+0x1ca>
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d03c      	beq.n	800996e <USBD_StdEPReq+0x112>
 80098f4:	e13e      	b.n	8009b74 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d002      	beq.n	8009908 <USBD_StdEPReq+0xac>
 8009902:	2b03      	cmp	r3, #3
 8009904:	d016      	beq.n	8009934 <USBD_StdEPReq+0xd8>
 8009906:	e02c      	b.n	8009962 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009908:	7bbb      	ldrb	r3, [r7, #14]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00d      	beq.n	800992a <USBD_StdEPReq+0xce>
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	2b80      	cmp	r3, #128	@ 0x80
 8009912:	d00a      	beq.n	800992a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009914:	7bbb      	ldrb	r3, [r7, #14]
 8009916:	4619      	mov	r1, r3
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f001 f97b 	bl	800ac14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800991e:	2180      	movs	r1, #128	@ 0x80
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f001 f977 	bl	800ac14 <USBD_LL_StallEP>
 8009926:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009928:	e020      	b.n	800996c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fc7a 	bl	800a226 <USBD_CtlError>
              break;
 8009932:	e01b      	b.n	800996c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	885b      	ldrh	r3, [r3, #2]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10e      	bne.n	800995a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800993c:	7bbb      	ldrb	r3, [r7, #14]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00b      	beq.n	800995a <USBD_StdEPReq+0xfe>
 8009942:	7bbb      	ldrb	r3, [r7, #14]
 8009944:	2b80      	cmp	r3, #128	@ 0x80
 8009946:	d008      	beq.n	800995a <USBD_StdEPReq+0xfe>
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	88db      	ldrh	r3, [r3, #6]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d104      	bne.n	800995a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009950:	7bbb      	ldrb	r3, [r7, #14]
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f001 f95d 	bl	800ac14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fd3a 	bl	800a3d4 <USBD_CtlSendStatus>

              break;
 8009960:	e004      	b.n	800996c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fc5e 	bl	800a226 <USBD_CtlError>
              break;
 800996a:	bf00      	nop
          }
          break;
 800996c:	e107      	b.n	8009b7e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b02      	cmp	r3, #2
 8009978:	d002      	beq.n	8009980 <USBD_StdEPReq+0x124>
 800997a:	2b03      	cmp	r3, #3
 800997c:	d016      	beq.n	80099ac <USBD_StdEPReq+0x150>
 800997e:	e04b      	b.n	8009a18 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009980:	7bbb      	ldrb	r3, [r7, #14]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00d      	beq.n	80099a2 <USBD_StdEPReq+0x146>
 8009986:	7bbb      	ldrb	r3, [r7, #14]
 8009988:	2b80      	cmp	r3, #128	@ 0x80
 800998a:	d00a      	beq.n	80099a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800998c:	7bbb      	ldrb	r3, [r7, #14]
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 f93f 	bl	800ac14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009996:	2180      	movs	r1, #128	@ 0x80
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f001 f93b 	bl	800ac14 <USBD_LL_StallEP>
 800999e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099a0:	e040      	b.n	8009a24 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fc3e 	bl	800a226 <USBD_CtlError>
              break;
 80099aa:	e03b      	b.n	8009a24 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	885b      	ldrh	r3, [r3, #2]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d136      	bne.n	8009a22 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
 80099b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d004      	beq.n	80099c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80099be:	7bbb      	ldrb	r3, [r7, #14]
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f001 f945 	bl	800ac52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fd03 	bl	800a3d4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80099ce:	7bbb      	ldrb	r3, [r7, #14]
 80099d0:	4619      	mov	r1, r3
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f7ff fde4 	bl	80095a0 <USBD_CoreFindEP>
 80099d8:	4603      	mov	r3, r0
 80099da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099dc:	7b7b      	ldrb	r3, [r7, #13]
 80099de:	2bff      	cmp	r3, #255	@ 0xff
 80099e0:	d01f      	beq.n	8009a22 <USBD_StdEPReq+0x1c6>
 80099e2:	7b7b      	ldrb	r3, [r7, #13]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d11c      	bne.n	8009a22 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80099e8:	7b7a      	ldrb	r2, [r7, #13]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80099f0:	7b7a      	ldrb	r2, [r7, #13]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	32ae      	adds	r2, #174	@ 0xae
 80099f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d010      	beq.n	8009a22 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a00:	7b7a      	ldrb	r2, [r7, #13]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	32ae      	adds	r2, #174	@ 0xae
 8009a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	4798      	blx	r3
 8009a12:	4603      	mov	r3, r0
 8009a14:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009a16:	e004      	b.n	8009a22 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fc03 	bl	800a226 <USBD_CtlError>
              break;
 8009a20:	e000      	b.n	8009a24 <USBD_StdEPReq+0x1c8>
              break;
 8009a22:	bf00      	nop
          }
          break;
 8009a24:	e0ab      	b.n	8009b7e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d002      	beq.n	8009a38 <USBD_StdEPReq+0x1dc>
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	d032      	beq.n	8009a9c <USBD_StdEPReq+0x240>
 8009a36:	e097      	b.n	8009b68 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a38:	7bbb      	ldrb	r3, [r7, #14]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d007      	beq.n	8009a4e <USBD_StdEPReq+0x1f2>
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
 8009a40:	2b80      	cmp	r3, #128	@ 0x80
 8009a42:	d004      	beq.n	8009a4e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fbed 	bl	800a226 <USBD_CtlError>
                break;
 8009a4c:	e091      	b.n	8009b72 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	da0b      	bge.n	8009a6e <USBD_StdEPReq+0x212>
 8009a56:	7bbb      	ldrb	r3, [r7, #14]
 8009a58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4413      	add	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	3310      	adds	r3, #16
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	4413      	add	r3, r2
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	e00b      	b.n	8009a86 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
 8009a70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a74:	4613      	mov	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	4413      	add	r3, r2
 8009a84:	3304      	adds	r3, #4
 8009a86:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2202      	movs	r2, #2
 8009a92:	4619      	mov	r1, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fc43 	bl	800a320 <USBD_CtlSendData>
              break;
 8009a9a:	e06a      	b.n	8009b72 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	da11      	bge.n	8009ac8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009aa4:	7bbb      	ldrb	r3, [r7, #14]
 8009aa6:	f003 020f 	and.w	r2, r3, #15
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	440b      	add	r3, r1
 8009ab6:	3324      	adds	r3, #36	@ 0x24
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d117      	bne.n	8009aee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009abe:	6839      	ldr	r1, [r7, #0]
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fbb0 	bl	800a226 <USBD_CtlError>
                  break;
 8009ac6:	e054      	b.n	8009b72 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	f003 020f 	and.w	r2, r3, #15
 8009ace:	6879      	ldr	r1, [r7, #4]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	440b      	add	r3, r1
 8009ada:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d104      	bne.n	8009aee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fb9d 	bl	800a226 <USBD_CtlError>
                  break;
 8009aec:	e041      	b.n	8009b72 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009aee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	da0b      	bge.n	8009b0e <USBD_StdEPReq+0x2b2>
 8009af6:	7bbb      	ldrb	r3, [r7, #14]
 8009af8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009afc:	4613      	mov	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4413      	add	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	3310      	adds	r3, #16
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	4413      	add	r3, r2
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	e00b      	b.n	8009b26 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b0e:	7bbb      	ldrb	r3, [r7, #14]
 8009b10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b14:	4613      	mov	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	4413      	add	r3, r2
 8009b24:	3304      	adds	r3, #4
 8009b26:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d002      	beq.n	8009b34 <USBD_StdEPReq+0x2d8>
 8009b2e:	7bbb      	ldrb	r3, [r7, #14]
 8009b30:	2b80      	cmp	r3, #128	@ 0x80
 8009b32:	d103      	bne.n	8009b3c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	2200      	movs	r2, #0
 8009b38:	601a      	str	r2, [r3, #0]
 8009b3a:	e00e      	b.n	8009b5a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b3c:	7bbb      	ldrb	r3, [r7, #14]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f001 f8a5 	bl	800ac90 <USBD_LL_IsStallEP>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d003      	beq.n	8009b54 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	601a      	str	r2, [r3, #0]
 8009b52:	e002      	b.n	8009b5a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	2200      	movs	r2, #0
 8009b58:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	2202      	movs	r2, #2
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fbdd 	bl	800a320 <USBD_CtlSendData>
              break;
 8009b66:	e004      	b.n	8009b72 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fb5b 	bl	800a226 <USBD_CtlError>
              break;
 8009b70:	bf00      	nop
          }
          break;
 8009b72:	e004      	b.n	8009b7e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fb55 	bl	800a226 <USBD_CtlError>
          break;
 8009b7c:	bf00      	nop
      }
      break;
 8009b7e:	e005      	b.n	8009b8c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fb4f 	bl	800a226 <USBD_CtlError>
      break;
 8009b88:	e000      	b.n	8009b8c <USBD_StdEPReq+0x330>
      break;
 8009b8a:	bf00      	nop
  }

  return ret;
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009baa:	2300      	movs	r3, #0
 8009bac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	885b      	ldrh	r3, [r3, #2]
 8009bb2:	0a1b      	lsrs	r3, r3, #8
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	2b06      	cmp	r3, #6
 8009bba:	f200 8128 	bhi.w	8009e0e <USBD_GetDescriptor+0x276>
 8009bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc4 <USBD_GetDescriptor+0x2c>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009be1 	.word	0x08009be1
 8009bc8:	08009bf9 	.word	0x08009bf9
 8009bcc:	08009c39 	.word	0x08009c39
 8009bd0:	08009e0f 	.word	0x08009e0f
 8009bd4:	08009e0f 	.word	0x08009e0f
 8009bd8:	08009daf 	.word	0x08009daf
 8009bdc:	08009ddb 	.word	0x08009ddb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	7c12      	ldrb	r2, [r2, #16]
 8009bec:	f107 0108 	add.w	r1, r7, #8
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	4798      	blx	r3
 8009bf4:	60f8      	str	r0, [r7, #12]
      break;
 8009bf6:	e112      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	7c1b      	ldrb	r3, [r3, #16]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10d      	bne.n	8009c1c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c08:	f107 0208 	add.w	r2, r7, #8
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	4798      	blx	r3
 8009c10:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	2202      	movs	r2, #2
 8009c18:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c1a:	e100      	b.n	8009e1e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c24:	f107 0208 	add.w	r2, r7, #8
 8009c28:	4610      	mov	r0, r2
 8009c2a:	4798      	blx	r3
 8009c2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3301      	adds	r3, #1
 8009c32:	2202      	movs	r2, #2
 8009c34:	701a      	strb	r2, [r3, #0]
      break;
 8009c36:	e0f2      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	885b      	ldrh	r3, [r3, #2]
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b05      	cmp	r3, #5
 8009c40:	f200 80ac 	bhi.w	8009d9c <USBD_GetDescriptor+0x204>
 8009c44:	a201      	add	r2, pc, #4	@ (adr r2, 8009c4c <USBD_GetDescriptor+0xb4>)
 8009c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4a:	bf00      	nop
 8009c4c:	08009c65 	.word	0x08009c65
 8009c50:	08009c99 	.word	0x08009c99
 8009c54:	08009ccd 	.word	0x08009ccd
 8009c58:	08009d01 	.word	0x08009d01
 8009c5c:	08009d35 	.word	0x08009d35
 8009c60:	08009d69 	.word	0x08009d69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00b      	beq.n	8009c88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	7c12      	ldrb	r2, [r2, #16]
 8009c7c:	f107 0108 	add.w	r1, r7, #8
 8009c80:	4610      	mov	r0, r2
 8009c82:	4798      	blx	r3
 8009c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c86:	e091      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 facb 	bl	800a226 <USBD_CtlError>
            err++;
 8009c90:	7afb      	ldrb	r3, [r7, #11]
 8009c92:	3301      	adds	r3, #1
 8009c94:	72fb      	strb	r3, [r7, #11]
          break;
 8009c96:	e089      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00b      	beq.n	8009cbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	7c12      	ldrb	r2, [r2, #16]
 8009cb0:	f107 0108 	add.w	r1, r7, #8
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	4798      	blx	r3
 8009cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cba:	e077      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fab1 	bl	800a226 <USBD_CtlError>
            err++;
 8009cc4:	7afb      	ldrb	r3, [r7, #11]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cca:	e06f      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00b      	beq.n	8009cf0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	7c12      	ldrb	r2, [r2, #16]
 8009ce4:	f107 0108 	add.w	r1, r7, #8
 8009ce8:	4610      	mov	r0, r2
 8009cea:	4798      	blx	r3
 8009cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cee:	e05d      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fa97 	bl	800a226 <USBD_CtlError>
            err++;
 8009cf8:	7afb      	ldrb	r3, [r7, #11]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cfe:	e055      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00b      	beq.n	8009d24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	7c12      	ldrb	r2, [r2, #16]
 8009d18:	f107 0108 	add.w	r1, r7, #8
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	4798      	blx	r3
 8009d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d22:	e043      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fa7d 	bl	800a226 <USBD_CtlError>
            err++;
 8009d2c:	7afb      	ldrb	r3, [r7, #11]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	72fb      	strb	r3, [r7, #11]
          break;
 8009d32:	e03b      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d3a:	695b      	ldr	r3, [r3, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00b      	beq.n	8009d58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d46:	695b      	ldr	r3, [r3, #20]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	7c12      	ldrb	r2, [r2, #16]
 8009d4c:	f107 0108 	add.w	r1, r7, #8
 8009d50:	4610      	mov	r0, r2
 8009d52:	4798      	blx	r3
 8009d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d56:	e029      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fa63 	bl	800a226 <USBD_CtlError>
            err++;
 8009d60:	7afb      	ldrb	r3, [r7, #11]
 8009d62:	3301      	adds	r3, #1
 8009d64:	72fb      	strb	r3, [r7, #11]
          break;
 8009d66:	e021      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00b      	beq.n	8009d8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	7c12      	ldrb	r2, [r2, #16]
 8009d80:	f107 0108 	add.w	r1, r7, #8
 8009d84:	4610      	mov	r0, r2
 8009d86:	4798      	blx	r3
 8009d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d8a:	e00f      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fa49 	bl	800a226 <USBD_CtlError>
            err++;
 8009d94:	7afb      	ldrb	r3, [r7, #11]
 8009d96:	3301      	adds	r3, #1
 8009d98:	72fb      	strb	r3, [r7, #11]
          break;
 8009d9a:	e007      	b.n	8009dac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fa41 	bl	800a226 <USBD_CtlError>
          err++;
 8009da4:	7afb      	ldrb	r3, [r7, #11]
 8009da6:	3301      	adds	r3, #1
 8009da8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009daa:	bf00      	nop
      }
      break;
 8009dac:	e037      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	7c1b      	ldrb	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d109      	bne.n	8009dca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dbe:	f107 0208 	add.w	r2, r7, #8
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	4798      	blx	r3
 8009dc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dc8:	e029      	b.n	8009e1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fa2a 	bl	800a226 <USBD_CtlError>
        err++;
 8009dd2:	7afb      	ldrb	r3, [r7, #11]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	72fb      	strb	r3, [r7, #11]
      break;
 8009dd8:	e021      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	7c1b      	ldrb	r3, [r3, #16]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10d      	bne.n	8009dfe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dea:	f107 0208 	add.w	r2, r7, #8
 8009dee:	4610      	mov	r0, r2
 8009df0:	4798      	blx	r3
 8009df2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	3301      	adds	r3, #1
 8009df8:	2207      	movs	r2, #7
 8009dfa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dfc:	e00f      	b.n	8009e1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dfe:	6839      	ldr	r1, [r7, #0]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fa10 	bl	800a226 <USBD_CtlError>
        err++;
 8009e06:	7afb      	ldrb	r3, [r7, #11]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e0c:	e007      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fa08 	bl	800a226 <USBD_CtlError>
      err++;
 8009e16:	7afb      	ldrb	r3, [r7, #11]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e1c:	bf00      	nop
  }

  if (err != 0U)
 8009e1e:	7afb      	ldrb	r3, [r7, #11]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d11e      	bne.n	8009e62 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	88db      	ldrh	r3, [r3, #6]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d016      	beq.n	8009e5a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009e2c:	893b      	ldrh	r3, [r7, #8]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00e      	beq.n	8009e50 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	88da      	ldrh	r2, [r3, #6]
 8009e36:	893b      	ldrh	r3, [r7, #8]
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	bf28      	it	cs
 8009e3c:	4613      	movcs	r3, r2
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e42:	893b      	ldrh	r3, [r7, #8]
 8009e44:	461a      	mov	r2, r3
 8009e46:	68f9      	ldr	r1, [r7, #12]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fa69 	bl	800a320 <USBD_CtlSendData>
 8009e4e:	e009      	b.n	8009e64 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f9e7 	bl	800a226 <USBD_CtlError>
 8009e58:	e004      	b.n	8009e64 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 faba 	bl	800a3d4 <USBD_CtlSendStatus>
 8009e60:	e000      	b.n	8009e64 <USBD_GetDescriptor+0x2cc>
    return;
 8009e62:	bf00      	nop
  }
}
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop

08009e6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	889b      	ldrh	r3, [r3, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d131      	bne.n	8009ee2 <USBD_SetAddress+0x76>
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	88db      	ldrh	r3, [r3, #6]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d12d      	bne.n	8009ee2 <USBD_SetAddress+0x76>
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	885b      	ldrh	r3, [r3, #2]
 8009e8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e8c:	d829      	bhi.n	8009ee2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	885b      	ldrh	r3, [r3, #2]
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	d104      	bne.n	8009eb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f9bc 	bl	800a226 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eae:	e01d      	b.n	8009eec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	7bfa      	ldrb	r2, [r7, #15]
 8009eb4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 ff13 	bl	800ace8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fa86 	bl	800a3d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d004      	beq.n	8009ed8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2202      	movs	r2, #2
 8009ed2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ed6:	e009      	b.n	8009eec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee0:	e004      	b.n	8009eec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f99e 	bl	800a226 <USBD_CtlError>
  }
}
 8009eea:	bf00      	nop
 8009eec:	bf00      	nop
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	885b      	ldrh	r3, [r3, #2]
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	4b4e      	ldr	r3, [pc, #312]	@ (800a044 <USBD_SetConfig+0x150>)
 8009f0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f0c:	4b4d      	ldr	r3, [pc, #308]	@ (800a044 <USBD_SetConfig+0x150>)
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d905      	bls.n	8009f20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f985 	bl	800a226 <USBD_CtlError>
    return USBD_FAIL;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	e08c      	b.n	800a03a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d002      	beq.n	8009f32 <USBD_SetConfig+0x3e>
 8009f2c:	2b03      	cmp	r3, #3
 8009f2e:	d029      	beq.n	8009f84 <USBD_SetConfig+0x90>
 8009f30:	e075      	b.n	800a01e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009f32:	4b44      	ldr	r3, [pc, #272]	@ (800a044 <USBD_SetConfig+0x150>)
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d020      	beq.n	8009f7c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009f3a:	4b42      	ldr	r3, [pc, #264]	@ (800a044 <USBD_SetConfig+0x150>)
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f44:	4b3f      	ldr	r3, [pc, #252]	@ (800a044 <USBD_SetConfig+0x150>)
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	4619      	mov	r1, r3
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7fe ffe3 	bl	8008f16 <USBD_SetClassConfig>
 8009f50:	4603      	mov	r3, r0
 8009f52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d008      	beq.n	8009f6c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f962 	bl	800a226 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2202      	movs	r2, #2
 8009f66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f6a:	e065      	b.n	800a038 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fa31 	bl	800a3d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2203      	movs	r2, #3
 8009f76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009f7a:	e05d      	b.n	800a038 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fa29 	bl	800a3d4 <USBD_CtlSendStatus>
      break;
 8009f82:	e059      	b.n	800a038 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f84:	4b2f      	ldr	r3, [pc, #188]	@ (800a044 <USBD_SetConfig+0x150>)
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d112      	bne.n	8009fb2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2202      	movs	r2, #2
 8009f90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009f94:	4b2b      	ldr	r3, [pc, #172]	@ (800a044 <USBD_SetConfig+0x150>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	461a      	mov	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f9e:	4b29      	ldr	r3, [pc, #164]	@ (800a044 <USBD_SetConfig+0x150>)
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7fe ffd2 	bl	8008f4e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fa12 	bl	800a3d4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009fb0:	e042      	b.n	800a038 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009fb2:	4b24      	ldr	r3, [pc, #144]	@ (800a044 <USBD_SetConfig+0x150>)
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d02a      	beq.n	800a016 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7fe ffc0 	bl	8008f4e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009fce:	4b1d      	ldr	r3, [pc, #116]	@ (800a044 <USBD_SetConfig+0x150>)
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fd8:	4b1a      	ldr	r3, [pc, #104]	@ (800a044 <USBD_SetConfig+0x150>)
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7fe ff99 	bl	8008f16 <USBD_SetClassConfig>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00f      	beq.n	800a00e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f918 	bl	800a226 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7fe ffa5 	bl	8008f4e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2202      	movs	r2, #2
 800a008:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a00c:	e014      	b.n	800a038 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f9e0 	bl	800a3d4 <USBD_CtlSendStatus>
      break;
 800a014:	e010      	b.n	800a038 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f9dc 	bl	800a3d4 <USBD_CtlSendStatus>
      break;
 800a01c:	e00c      	b.n	800a038 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f900 	bl	800a226 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a026:	4b07      	ldr	r3, [pc, #28]	@ (800a044 <USBD_SetConfig+0x150>)
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	4619      	mov	r1, r3
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f7fe ff8e 	bl	8008f4e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a032:	2303      	movs	r3, #3
 800a034:	73fb      	strb	r3, [r7, #15]
      break;
 800a036:	bf00      	nop
  }

  return ret;
 800a038:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	200004d4 	.word	0x200004d4

0800a048 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	88db      	ldrh	r3, [r3, #6]
 800a056:	2b01      	cmp	r3, #1
 800a058:	d004      	beq.n	800a064 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a05a:	6839      	ldr	r1, [r7, #0]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f8e2 	bl	800a226 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a062:	e023      	b.n	800a0ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	dc02      	bgt.n	800a076 <USBD_GetConfig+0x2e>
 800a070:	2b00      	cmp	r3, #0
 800a072:	dc03      	bgt.n	800a07c <USBD_GetConfig+0x34>
 800a074:	e015      	b.n	800a0a2 <USBD_GetConfig+0x5a>
 800a076:	2b03      	cmp	r3, #3
 800a078:	d00b      	beq.n	800a092 <USBD_GetConfig+0x4a>
 800a07a:	e012      	b.n	800a0a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	3308      	adds	r3, #8
 800a086:	2201      	movs	r2, #1
 800a088:	4619      	mov	r1, r3
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 f948 	bl	800a320 <USBD_CtlSendData>
        break;
 800a090:	e00c      	b.n	800a0ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	3304      	adds	r3, #4
 800a096:	2201      	movs	r2, #1
 800a098:	4619      	mov	r1, r3
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f940 	bl	800a320 <USBD_CtlSendData>
        break;
 800a0a0:	e004      	b.n	800a0ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 f8be 	bl	800a226 <USBD_CtlError>
        break;
 800a0aa:	bf00      	nop
}
 800a0ac:	bf00      	nop
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d81e      	bhi.n	800a10a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	88db      	ldrh	r3, [r3, #6]
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d004      	beq.n	800a0de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a0d4:	6839      	ldr	r1, [r7, #0]
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f8a5 	bl	800a226 <USBD_CtlError>
        break;
 800a0dc:	e01a      	b.n	800a114 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d005      	beq.n	800a0fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	f043 0202 	orr.w	r2, r3, #2
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	330c      	adds	r3, #12
 800a0fe:	2202      	movs	r2, #2
 800a100:	4619      	mov	r1, r3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f90c 	bl	800a320 <USBD_CtlSendData>
      break;
 800a108:	e004      	b.n	800a114 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a10a:	6839      	ldr	r1, [r7, #0]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f88a 	bl	800a226 <USBD_CtlError>
      break;
 800a112:	bf00      	nop
  }
}
 800a114:	bf00      	nop
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	885b      	ldrh	r3, [r3, #2]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d107      	bne.n	800a13e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f94c 	bl	800a3d4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a13c:	e013      	b.n	800a166 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	885b      	ldrh	r3, [r3, #2]
 800a142:	2b02      	cmp	r3, #2
 800a144:	d10b      	bne.n	800a15e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	889b      	ldrh	r3, [r3, #4]
 800a14a:	0a1b      	lsrs	r3, r3, #8
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f93c 	bl	800a3d4 <USBD_CtlSendStatus>
}
 800a15c:	e003      	b.n	800a166 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a15e:	6839      	ldr	r1, [r7, #0]
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f860 	bl	800a226 <USBD_CtlError>
}
 800a166:	bf00      	nop
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b082      	sub	sp, #8
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
 800a176:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	3b01      	subs	r3, #1
 800a182:	2b02      	cmp	r3, #2
 800a184:	d80b      	bhi.n	800a19e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	885b      	ldrh	r3, [r3, #2]
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d10c      	bne.n	800a1a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f91c 	bl	800a3d4 <USBD_CtlSendStatus>
      }
      break;
 800a19c:	e004      	b.n	800a1a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f840 	bl	800a226 <USBD_CtlError>
      break;
 800a1a6:	e000      	b.n	800a1aa <USBD_ClrFeature+0x3c>
      break;
 800a1a8:	bf00      	nop
  }
}
 800a1aa:	bf00      	nop
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b084      	sub	sp, #16
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
 800a1ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	781a      	ldrb	r2, [r3, #0]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	781a      	ldrb	r2, [r3, #0]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f7ff fa40 	bl	8009662 <SWAPBYTE>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff fa33 	bl	8009662 <SWAPBYTE>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	461a      	mov	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	3301      	adds	r3, #1
 800a208:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3301      	adds	r3, #1
 800a20e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f7ff fa26 	bl	8009662 <SWAPBYTE>
 800a216:	4603      	mov	r3, r0
 800a218:	461a      	mov	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	80da      	strh	r2, [r3, #6]
}
 800a21e:	bf00      	nop
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a230:	2180      	movs	r1, #128	@ 0x80
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fcee 	bl	800ac14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a238:	2100      	movs	r1, #0
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fcea 	bl	800ac14 <USBD_LL_StallEP>
}
 800a240:	bf00      	nop
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a254:	2300      	movs	r3, #0
 800a256:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d042      	beq.n	800a2e4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a262:	6938      	ldr	r0, [r7, #16]
 800a264:	f000 f842 	bl	800a2ec <USBD_GetLen>
 800a268:	4603      	mov	r3, r0
 800a26a:	3301      	adds	r3, #1
 800a26c:	005b      	lsls	r3, r3, #1
 800a26e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a272:	d808      	bhi.n	800a286 <USBD_GetString+0x3e>
 800a274:	6938      	ldr	r0, [r7, #16]
 800a276:	f000 f839 	bl	800a2ec <USBD_GetLen>
 800a27a:	4603      	mov	r3, r0
 800a27c:	3301      	adds	r3, #1
 800a27e:	b29b      	uxth	r3, r3
 800a280:	005b      	lsls	r3, r3, #1
 800a282:	b29a      	uxth	r2, r3
 800a284:	e001      	b.n	800a28a <USBD_GetString+0x42>
 800a286:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a28e:	7dfb      	ldrb	r3, [r7, #23]
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	4413      	add	r3, r2
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	7812      	ldrb	r2, [r2, #0]
 800a298:	701a      	strb	r2, [r3, #0]
  idx++;
 800a29a:	7dfb      	ldrb	r3, [r7, #23]
 800a29c:	3301      	adds	r3, #1
 800a29e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a2a0:	7dfb      	ldrb	r3, [r7, #23]
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	2203      	movs	r2, #3
 800a2a8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a2aa:	7dfb      	ldrb	r3, [r7, #23]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a2b0:	e013      	b.n	800a2da <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a2b2:	7dfb      	ldrb	r3, [r7, #23]
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	693a      	ldr	r2, [r7, #16]
 800a2ba:	7812      	ldrb	r2, [r2, #0]
 800a2bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	613b      	str	r3, [r7, #16]
    idx++;
 800a2c4:	7dfb      	ldrb	r3, [r7, #23]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a2ca:	7dfb      	ldrb	r3, [r7, #23]
 800a2cc:	68ba      	ldr	r2, [r7, #8]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	701a      	strb	r2, [r3, #0]
    idx++;
 800a2d4:	7dfb      	ldrb	r3, [r7, #23]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1e7      	bne.n	800a2b2 <USBD_GetString+0x6a>
 800a2e2:	e000      	b.n	800a2e6 <USBD_GetString+0x9e>
    return;
 800a2e4:	bf00      	nop
  }
}
 800a2e6:	3718      	adds	r7, #24
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a2fc:	e005      	b.n	800a30a <USBD_GetLen+0x1e>
  {
    len++;
 800a2fe:	7bfb      	ldrb	r3, [r7, #15]
 800a300:	3301      	adds	r3, #1
 800a302:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	3301      	adds	r3, #1
 800a308:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1f5      	bne.n	800a2fe <USBD_GetLen+0x12>
  }

  return len;
 800a312:	7bfb      	ldrb	r3, [r7, #15]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2202      	movs	r2, #2
 800a330:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	2100      	movs	r1, #0
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f000 fced 	bl	800ad26 <USBD_LL_Transmit>

  return USBD_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b084      	sub	sp, #16
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	60f8      	str	r0, [r7, #12]
 800a35e:	60b9      	str	r1, [r7, #8]
 800a360:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	2100      	movs	r1, #0
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f000 fcdc 	bl	800ad26 <USBD_LL_Transmit>

  return USBD_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2203      	movs	r2, #3
 800a388:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f000 fce0 	bl	800ad68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	60f8      	str	r0, [r7, #12]
 800a3ba:	60b9      	str	r1, [r7, #8]
 800a3bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f000 fccf 	bl	800ad68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2204      	movs	r2, #4
 800a3e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fc9b 	bl	800ad26 <USBD_LL_Transmit>

  return USBD_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2205      	movs	r2, #5
 800a406:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a40a:	2300      	movs	r3, #0
 800a40c:	2200      	movs	r2, #0
 800a40e:	2100      	movs	r1, #0
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 fca9 	bl	800ad68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a424:	2201      	movs	r2, #1
 800a426:	4912      	ldr	r1, [pc, #72]	@ (800a470 <MX_USB_DEVICE_Init+0x50>)
 800a428:	4812      	ldr	r0, [pc, #72]	@ (800a474 <MX_USB_DEVICE_Init+0x54>)
 800a42a:	f7fe fcf7 	bl	8008e1c <USBD_Init>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d001      	beq.n	800a438 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a434:	f7f6 fa4a 	bl	80008cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800a438:	490f      	ldr	r1, [pc, #60]	@ (800a478 <MX_USB_DEVICE_Init+0x58>)
 800a43a:	480e      	ldr	r0, [pc, #56]	@ (800a474 <MX_USB_DEVICE_Init+0x54>)
 800a43c:	f7fe fd1e 	bl	8008e7c <USBD_RegisterClass>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a446:	f7f6 fa41 	bl	80008cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800a44a:	490c      	ldr	r1, [pc, #48]	@ (800a47c <MX_USB_DEVICE_Init+0x5c>)
 800a44c:	4809      	ldr	r0, [pc, #36]	@ (800a474 <MX_USB_DEVICE_Init+0x54>)
 800a44e:	f7fe fc15 	bl	8008c7c <USBD_CDC_RegisterInterface>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a458:	f7f6 fa38 	bl	80008cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a45c:	4805      	ldr	r0, [pc, #20]	@ (800a474 <MX_USB_DEVICE_Init+0x54>)
 800a45e:	f7fe fd43 	bl	8008ee8 <USBD_Start>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a468:	f7f6 fa30 	bl	80008cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a46c:	bf00      	nop
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	20000138 	.word	0x20000138
 800a474:	200004d8 	.word	0x200004d8
 800a478:	200000a4 	.word	0x200000a4
 800a47c:	20000124 	.word	0x20000124

0800a480 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800a484:	2200      	movs	r2, #0
 800a486:	4905      	ldr	r1, [pc, #20]	@ (800a49c <CDC_Init_HS+0x1c>)
 800a488:	4805      	ldr	r0, [pc, #20]	@ (800a4a0 <CDC_Init_HS+0x20>)
 800a48a:	f7fe fc11 	bl	8008cb0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800a48e:	4905      	ldr	r1, [pc, #20]	@ (800a4a4 <CDC_Init_HS+0x24>)
 800a490:	4803      	ldr	r0, [pc, #12]	@ (800a4a0 <CDC_Init_HS+0x20>)
 800a492:	f7fe fc2f 	bl	8008cf4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a496:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800a498:	4618      	mov	r0, r3
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	20000fb4 	.word	0x20000fb4
 800a4a0:	200004d8 	.word	0x200004d8
 800a4a4:	200007b4 	.word	0x200007b4

0800a4a8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800a4ac:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	4603      	mov	r3, r0
 800a4c0:	6039      	str	r1, [r7, #0]
 800a4c2:	71fb      	strb	r3, [r7, #7]
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800a4c8:	79fb      	ldrb	r3, [r7, #7]
 800a4ca:	2b23      	cmp	r3, #35	@ 0x23
 800a4cc:	d84a      	bhi.n	800a564 <CDC_Control_HS+0xac>
 800a4ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d4 <CDC_Control_HS+0x1c>)
 800a4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d4:	0800a565 	.word	0x0800a565
 800a4d8:	0800a565 	.word	0x0800a565
 800a4dc:	0800a565 	.word	0x0800a565
 800a4e0:	0800a565 	.word	0x0800a565
 800a4e4:	0800a565 	.word	0x0800a565
 800a4e8:	0800a565 	.word	0x0800a565
 800a4ec:	0800a565 	.word	0x0800a565
 800a4f0:	0800a565 	.word	0x0800a565
 800a4f4:	0800a565 	.word	0x0800a565
 800a4f8:	0800a565 	.word	0x0800a565
 800a4fc:	0800a565 	.word	0x0800a565
 800a500:	0800a565 	.word	0x0800a565
 800a504:	0800a565 	.word	0x0800a565
 800a508:	0800a565 	.word	0x0800a565
 800a50c:	0800a565 	.word	0x0800a565
 800a510:	0800a565 	.word	0x0800a565
 800a514:	0800a565 	.word	0x0800a565
 800a518:	0800a565 	.word	0x0800a565
 800a51c:	0800a565 	.word	0x0800a565
 800a520:	0800a565 	.word	0x0800a565
 800a524:	0800a565 	.word	0x0800a565
 800a528:	0800a565 	.word	0x0800a565
 800a52c:	0800a565 	.word	0x0800a565
 800a530:	0800a565 	.word	0x0800a565
 800a534:	0800a565 	.word	0x0800a565
 800a538:	0800a565 	.word	0x0800a565
 800a53c:	0800a565 	.word	0x0800a565
 800a540:	0800a565 	.word	0x0800a565
 800a544:	0800a565 	.word	0x0800a565
 800a548:	0800a565 	.word	0x0800a565
 800a54c:	0800a565 	.word	0x0800a565
 800a550:	0800a565 	.word	0x0800a565
 800a554:	0800a565 	.word	0x0800a565
 800a558:	0800a565 	.word	0x0800a565
 800a55c:	0800a565 	.word	0x0800a565
 800a560:	0800a565 	.word	0x0800a565
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a564:	bf00      	nop
  }

  return (USBD_OK);
 800a566:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800a568:	4618      	mov	r0, r3
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800a57e:	6879      	ldr	r1, [r7, #4]
 800a580:	4805      	ldr	r0, [pc, #20]	@ (800a598 <CDC_Receive_HS+0x24>)
 800a582:	f7fe fbb7 	bl	8008cf4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800a586:	4804      	ldr	r0, [pc, #16]	@ (800a598 <CDC_Receive_HS+0x24>)
 800a588:	f7fe fc12 	bl	8008db0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a58c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	200004d8 	.word	0x200004d8

0800a59c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800a5ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a5e4 <CDC_Transmit_HS+0x48>)
 800a5ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a5b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d001      	beq.n	800a5c2 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e00b      	b.n	800a5da <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800a5c2:	887b      	ldrh	r3, [r7, #2]
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	6879      	ldr	r1, [r7, #4]
 800a5c8:	4806      	ldr	r0, [pc, #24]	@ (800a5e4 <CDC_Transmit_HS+0x48>)
 800a5ca:	f7fe fb71 	bl	8008cb0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800a5ce:	4805      	ldr	r0, [pc, #20]	@ (800a5e4 <CDC_Transmit_HS+0x48>)
 800a5d0:	f7fe fbae 	bl	8008d30 <USBD_CDC_TransmitPacket>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	200004d8 	.word	0x200004d8

0800a5e8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b087      	sub	sp, #28
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800a5fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	371c      	adds	r7, #28
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr
	...

0800a60c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	4603      	mov	r3, r0
 800a614:	6039      	str	r1, [r7, #0]
 800a616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	2212      	movs	r2, #18
 800a61c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800a61e:	4b03      	ldr	r3, [pc, #12]	@ (800a62c <USBD_HS_DeviceDescriptor+0x20>)
}
 800a620:	4618      	mov	r0, r3
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	20000154 	.word	0x20000154

0800a630 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	4603      	mov	r3, r0
 800a638:	6039      	str	r1, [r7, #0]
 800a63a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	2204      	movs	r2, #4
 800a640:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a642:	4b03      	ldr	r3, [pc, #12]	@ (800a650 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800a644:	4618      	mov	r0, r3
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	20000168 	.word	0x20000168

0800a654 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	6039      	str	r1, [r7, #0]
 800a65e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a660:	79fb      	ldrb	r3, [r7, #7]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d105      	bne.n	800a672 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a666:	683a      	ldr	r2, [r7, #0]
 800a668:	4907      	ldr	r1, [pc, #28]	@ (800a688 <USBD_HS_ProductStrDescriptor+0x34>)
 800a66a:	4808      	ldr	r0, [pc, #32]	@ (800a68c <USBD_HS_ProductStrDescriptor+0x38>)
 800a66c:	f7ff fdec 	bl	800a248 <USBD_GetString>
 800a670:	e004      	b.n	800a67c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	4904      	ldr	r1, [pc, #16]	@ (800a688 <USBD_HS_ProductStrDescriptor+0x34>)
 800a676:	4805      	ldr	r0, [pc, #20]	@ (800a68c <USBD_HS_ProductStrDescriptor+0x38>)
 800a678:	f7ff fde6 	bl	800a248 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a67c:	4b02      	ldr	r3, [pc, #8]	@ (800a688 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3708      	adds	r7, #8
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	200017b4 	.word	0x200017b4
 800a68c:	0800b7e8 	.word	0x0800b7e8

0800a690 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	4603      	mov	r3, r0
 800a698:	6039      	str	r1, [r7, #0]
 800a69a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a69c:	683a      	ldr	r2, [r7, #0]
 800a69e:	4904      	ldr	r1, [pc, #16]	@ (800a6b0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800a6a0:	4804      	ldr	r0, [pc, #16]	@ (800a6b4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800a6a2:	f7ff fdd1 	bl	800a248 <USBD_GetString>
  return USBD_StrDesc;
 800a6a6:	4b02      	ldr	r3, [pc, #8]	@ (800a6b0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	200017b4 	.word	0x200017b4
 800a6b4:	0800b800 	.word	0x0800b800

0800a6b8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	4603      	mov	r3, r0
 800a6c0:	6039      	str	r1, [r7, #0]
 800a6c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	221a      	movs	r2, #26
 800a6c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a6ca:	f000 f843 	bl	800a754 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a6ce:	4b02      	ldr	r3, [pc, #8]	@ (800a6d8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	2000016c 	.word	0x2000016c

0800a6dc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	6039      	str	r1, [r7, #0]
 800a6e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a6e8:	79fb      	ldrb	r3, [r7, #7]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d105      	bne.n	800a6fa <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	4907      	ldr	r1, [pc, #28]	@ (800a710 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a6f2:	4808      	ldr	r0, [pc, #32]	@ (800a714 <USBD_HS_ConfigStrDescriptor+0x38>)
 800a6f4:	f7ff fda8 	bl	800a248 <USBD_GetString>
 800a6f8:	e004      	b.n	800a704 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	4904      	ldr	r1, [pc, #16]	@ (800a710 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a6fe:	4805      	ldr	r0, [pc, #20]	@ (800a714 <USBD_HS_ConfigStrDescriptor+0x38>)
 800a700:	f7ff fda2 	bl	800a248 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a704:	4b02      	ldr	r3, [pc, #8]	@ (800a710 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800a706:	4618      	mov	r0, r3
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	200017b4 	.word	0x200017b4
 800a714:	0800b814 	.word	0x0800b814

0800a718 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	4603      	mov	r3, r0
 800a720:	6039      	str	r1, [r7, #0]
 800a722:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a724:	79fb      	ldrb	r3, [r7, #7]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d105      	bne.n	800a736 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a72a:	683a      	ldr	r2, [r7, #0]
 800a72c:	4907      	ldr	r1, [pc, #28]	@ (800a74c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a72e:	4808      	ldr	r0, [pc, #32]	@ (800a750 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a730:	f7ff fd8a 	bl	800a248 <USBD_GetString>
 800a734:	e004      	b.n	800a740 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	4904      	ldr	r1, [pc, #16]	@ (800a74c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a73a:	4805      	ldr	r0, [pc, #20]	@ (800a750 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a73c:	f7ff fd84 	bl	800a248 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a740:	4b02      	ldr	r3, [pc, #8]	@ (800a74c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800a742:	4618      	mov	r0, r3
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	200017b4 	.word	0x200017b4
 800a750:	0800b820 	.word	0x0800b820

0800a754 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a75a:	4b0f      	ldr	r3, [pc, #60]	@ (800a798 <Get_SerialNum+0x44>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a760:	4b0e      	ldr	r3, [pc, #56]	@ (800a79c <Get_SerialNum+0x48>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a766:	4b0e      	ldr	r3, [pc, #56]	@ (800a7a0 <Get_SerialNum+0x4c>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4413      	add	r3, r2
 800a772:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d009      	beq.n	800a78e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a77a:	2208      	movs	r2, #8
 800a77c:	4909      	ldr	r1, [pc, #36]	@ (800a7a4 <Get_SerialNum+0x50>)
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f000 f814 	bl	800a7ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a784:	2204      	movs	r2, #4
 800a786:	4908      	ldr	r1, [pc, #32]	@ (800a7a8 <Get_SerialNum+0x54>)
 800a788:	68b8      	ldr	r0, [r7, #8]
 800a78a:	f000 f80f 	bl	800a7ac <IntToUnicode>
  }
}
 800a78e:	bf00      	nop
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	1fff7a10 	.word	0x1fff7a10
 800a79c:	1fff7a14 	.word	0x1fff7a14
 800a7a0:	1fff7a18 	.word	0x1fff7a18
 800a7a4:	2000016e 	.word	0x2000016e
 800a7a8:	2000017e 	.word	0x2000017e

0800a7ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b087      	sub	sp, #28
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a7be:	2300      	movs	r3, #0
 800a7c0:	75fb      	strb	r3, [r7, #23]
 800a7c2:	e027      	b.n	800a814 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	0f1b      	lsrs	r3, r3, #28
 800a7c8:	2b09      	cmp	r3, #9
 800a7ca:	d80b      	bhi.n	800a7e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	0f1b      	lsrs	r3, r3, #28
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	7dfb      	ldrb	r3, [r7, #23]
 800a7d4:	005b      	lsls	r3, r3, #1
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	440b      	add	r3, r1
 800a7dc:	3230      	adds	r2, #48	@ 0x30
 800a7de:	b2d2      	uxtb	r2, r2
 800a7e0:	701a      	strb	r2, [r3, #0]
 800a7e2:	e00a      	b.n	800a7fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	0f1b      	lsrs	r3, r3, #28
 800a7e8:	b2da      	uxtb	r2, r3
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
 800a7ec:	005b      	lsls	r3, r3, #1
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	440b      	add	r3, r1
 800a7f4:	3237      	adds	r2, #55	@ 0x37
 800a7f6:	b2d2      	uxtb	r2, r2
 800a7f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	011b      	lsls	r3, r3, #4
 800a7fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a800:	7dfb      	ldrb	r3, [r7, #23]
 800a802:	005b      	lsls	r3, r3, #1
 800a804:	3301      	adds	r3, #1
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	4413      	add	r3, r2
 800a80a:	2200      	movs	r2, #0
 800a80c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a80e:	7dfb      	ldrb	r3, [r7, #23]
 800a810:	3301      	adds	r3, #1
 800a812:	75fb      	strb	r3, [r7, #23]
 800a814:	7dfa      	ldrb	r2, [r7, #23]
 800a816:	79fb      	ldrb	r3, [r7, #7]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d3d3      	bcc.n	800a7c4 <IntToUnicode+0x18>
  }
}
 800a81c:	bf00      	nop
 800a81e:	bf00      	nop
 800a820:	371c      	adds	r7, #28
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
	...

0800a82c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b08a      	sub	sp, #40	@ 0x28
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a834:	f107 0314 	add.w	r3, r7, #20
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]
 800a83c:	605a      	str	r2, [r3, #4]
 800a83e:	609a      	str	r2, [r3, #8]
 800a840:	60da      	str	r2, [r3, #12]
 800a842:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a1d      	ldr	r2, [pc, #116]	@ (800a8c0 <HAL_PCD_MspInit+0x94>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d134      	bne.n	800a8b8 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a84e:	2300      	movs	r3, #0
 800a850:	613b      	str	r3, [r7, #16]
 800a852:	4b1c      	ldr	r3, [pc, #112]	@ (800a8c4 <HAL_PCD_MspInit+0x98>)
 800a854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a856:	4a1b      	ldr	r2, [pc, #108]	@ (800a8c4 <HAL_PCD_MspInit+0x98>)
 800a858:	f043 0302 	orr.w	r3, r3, #2
 800a85c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a85e:	4b19      	ldr	r3, [pc, #100]	@ (800a8c4 <HAL_PCD_MspInit+0x98>)
 800a860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a862:	f003 0302 	and.w	r3, r3, #2
 800a866:	613b      	str	r3, [r7, #16]
 800a868:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800a86a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800a86e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a870:	2302      	movs	r3, #2
 800a872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a874:	2300      	movs	r3, #0
 800a876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a878:	2303      	movs	r3, #3
 800a87a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800a87c:	230c      	movs	r3, #12
 800a87e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a880:	f107 0314 	add.w	r3, r7, #20
 800a884:	4619      	mov	r1, r3
 800a886:	4810      	ldr	r0, [pc, #64]	@ (800a8c8 <HAL_PCD_MspInit+0x9c>)
 800a888:	f7f8 fdbe 	bl	8003408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a88c:	2300      	movs	r3, #0
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	4b0c      	ldr	r3, [pc, #48]	@ (800a8c4 <HAL_PCD_MspInit+0x98>)
 800a892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a894:	4a0b      	ldr	r2, [pc, #44]	@ (800a8c4 <HAL_PCD_MspInit+0x98>)
 800a896:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a89a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a89c:	4b09      	ldr	r3, [pc, #36]	@ (800a8c4 <HAL_PCD_MspInit+0x98>)
 800a89e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8a4:	60fb      	str	r3, [r7, #12]
 800a8a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	204d      	movs	r0, #77	@ 0x4d
 800a8ae:	f7f8 f920 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a8b2:	204d      	movs	r0, #77	@ 0x4d
 800a8b4:	f7f8 f939 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a8b8:	bf00      	nop
 800a8ba:	3728      	adds	r7, #40	@ 0x28
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	40040000 	.word	0x40040000
 800a8c4:	40023800 	.word	0x40023800
 800a8c8:	40020400 	.word	0x40020400

0800a8cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	4610      	mov	r0, r2
 800a8e4:	f7fe fb4d 	bl	8008f82 <USBD_LL_SetupStage>
}
 800a8e8:	bf00      	nop
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a902:	78fa      	ldrb	r2, [r7, #3]
 800a904:	6879      	ldr	r1, [r7, #4]
 800a906:	4613      	mov	r3, r2
 800a908:	00db      	lsls	r3, r3, #3
 800a90a:	4413      	add	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	440b      	add	r3, r1
 800a910:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	78fb      	ldrb	r3, [r7, #3]
 800a918:	4619      	mov	r1, r3
 800a91a:	f7fe fb87 	bl	800902c <USBD_LL_DataOutStage>
}
 800a91e:	bf00      	nop
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b082      	sub	sp, #8
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	460b      	mov	r3, r1
 800a930:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a938:	78fa      	ldrb	r2, [r7, #3]
 800a93a:	6879      	ldr	r1, [r7, #4]
 800a93c:	4613      	mov	r3, r2
 800a93e:	00db      	lsls	r3, r3, #3
 800a940:	4413      	add	r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	440b      	add	r3, r1
 800a946:	3320      	adds	r3, #32
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	78fb      	ldrb	r3, [r7, #3]
 800a94c:	4619      	mov	r1, r3
 800a94e:	f7fe fc20 	bl	8009192 <USBD_LL_DataInStage>
}
 800a952:	bf00      	nop
 800a954:	3708      	adds	r7, #8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b082      	sub	sp, #8
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a968:	4618      	mov	r0, r3
 800a96a:	f7fe fd5a 	bl	8009422 <USBD_LL_SOF>
}
 800a96e:	bf00      	nop
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b084      	sub	sp, #16
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a97e:	2301      	movs	r3, #1
 800a980:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	79db      	ldrb	r3, [r3, #7]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d102      	bne.n	800a990 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a98a:	2300      	movs	r3, #0
 800a98c:	73fb      	strb	r3, [r7, #15]
 800a98e:	e008      	b.n	800a9a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	79db      	ldrb	r3, [r3, #7]
 800a994:	2b02      	cmp	r3, #2
 800a996:	d102      	bne.n	800a99e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a998:	2301      	movs	r3, #1
 800a99a:	73fb      	strb	r3, [r7, #15]
 800a99c:	e001      	b.n	800a9a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a99e:	f7f5 ff95 	bl	80008cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a9a8:	7bfa      	ldrb	r2, [r7, #15]
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fe fcf4 	bl	800939a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7fe fc9c 	bl	80092f6 <USBD_LL_Reset>
}
 800a9be:	bf00      	nop
 800a9c0:	3710      	adds	r7, #16
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
	...

0800a9c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fe fcef 	bl	80093ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	6812      	ldr	r2, [r2, #0]
 800a9ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a9ee:	f043 0301 	orr.w	r3, r3, #1
 800a9f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	7adb      	ldrb	r3, [r3, #11]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d005      	beq.n	800aa08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a9fc:	4b04      	ldr	r3, [pc, #16]	@ (800aa10 <HAL_PCD_SuspendCallback+0x48>)
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	4a03      	ldr	r2, [pc, #12]	@ (800aa10 <HAL_PCD_SuspendCallback+0x48>)
 800aa02:	f043 0306 	orr.w	r3, r3, #6
 800aa06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa08:	bf00      	nop
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	e000ed00 	.word	0xe000ed00

0800aa14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe fce5 	bl	80093f2 <USBD_LL_Resume>
}
 800aa28:	bf00      	nop
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa42:	78fa      	ldrb	r2, [r7, #3]
 800aa44:	4611      	mov	r1, r2
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fe fd3d 	bl	80094c6 <USBD_LL_IsoOUTIncomplete>
}
 800aa4c:	bf00      	nop
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa66:	78fa      	ldrb	r2, [r7, #3]
 800aa68:	4611      	mov	r1, r2
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fe fcf9 	bl	8009462 <USBD_LL_IsoINIncomplete>
}
 800aa70:	bf00      	nop
 800aa72:	3708      	adds	r7, #8
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fe fd4f 	bl	800952a <USBD_LL_DevConnected>
}
 800aa8c:	bf00      	nop
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fe fd4c 	bl	8009540 <USBD_LL_DevDisconnected>
}
 800aaa8:	bf00      	nop
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d140      	bne.n	800ab42 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800aac0:	4a22      	ldr	r2, [pc, #136]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a20      	ldr	r2, [pc, #128]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800aacc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800aad0:	4b1e      	ldr	r3, [pc, #120]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800aad2:	4a1f      	ldr	r2, [pc, #124]	@ (800ab50 <USBD_LL_Init+0xa0>)
 800aad4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800aad6:	4b1d      	ldr	r3, [pc, #116]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800aad8:	2206      	movs	r2, #6
 800aada:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800aadc:	4b1b      	ldr	r3, [pc, #108]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800aade:	2202      	movs	r2, #2
 800aae0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800aae2:	4b1a      	ldr	r3, [pc, #104]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800aae8:	4b18      	ldr	r3, [pc, #96]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800aaea:	2202      	movs	r2, #2
 800aaec:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800aaee:	4b17      	ldr	r3, [pc, #92]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800aaf4:	4b15      	ldr	r3, [pc, #84]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800aafa:	4b14      	ldr	r3, [pc, #80]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ab00:	4b12      	ldr	r3, [pc, #72]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800ab06:	4b11      	ldr	r3, [pc, #68]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ab0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800ab12:	480e      	ldr	r0, [pc, #56]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800ab14:	f7f9 f917 	bl	8003d46 <HAL_PCD_Init>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d001      	beq.n	800ab22 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ab1e:	f7f5 fed5 	bl	80008cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800ab22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ab26:	4809      	ldr	r0, [pc, #36]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800ab28:	f7fa fb43 	bl	80051b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800ab2c:	2280      	movs	r2, #128	@ 0x80
 800ab2e:	2100      	movs	r1, #0
 800ab30:	4806      	ldr	r0, [pc, #24]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800ab32:	f7fa faf7 	bl	8005124 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800ab36:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800ab3a:	2101      	movs	r1, #1
 800ab3c:	4803      	ldr	r0, [pc, #12]	@ (800ab4c <USBD_LL_Init+0x9c>)
 800ab3e:	f7fa faf1 	bl	8005124 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	200019b4 	.word	0x200019b4
 800ab50:	40040000 	.word	0x40040000

0800ab54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7f9 f9fa 	bl	8003f64 <HAL_PCD_Start>
 800ab70:	4603      	mov	r3, r0
 800ab72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 f942 	bl	800ae00 <USBD_Get_USB_Status>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	4608      	mov	r0, r1
 800ab94:	4611      	mov	r1, r2
 800ab96:	461a      	mov	r2, r3
 800ab98:	4603      	mov	r3, r0
 800ab9a:	70fb      	strb	r3, [r7, #3]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	70bb      	strb	r3, [r7, #2]
 800aba0:	4613      	mov	r3, r2
 800aba2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aba4:	2300      	movs	r3, #0
 800aba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800abb2:	78bb      	ldrb	r3, [r7, #2]
 800abb4:	883a      	ldrh	r2, [r7, #0]
 800abb6:	78f9      	ldrb	r1, [r7, #3]
 800abb8:	f7f9 fece 	bl	8004958 <HAL_PCD_EP_Open>
 800abbc:	4603      	mov	r3, r0
 800abbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 f91c 	bl	800ae00 <USBD_Get_USB_Status>
 800abc8:	4603      	mov	r3, r0
 800abca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b084      	sub	sp, #16
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	460b      	mov	r3, r1
 800abe0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe6:	2300      	movs	r3, #0
 800abe8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800abf0:	78fa      	ldrb	r2, [r7, #3]
 800abf2:	4611      	mov	r1, r2
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7f9 ff19 	bl	8004a2c <HAL_PCD_EP_Close>
 800abfa:	4603      	mov	r3, r0
 800abfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abfe:	7bfb      	ldrb	r3, [r7, #15]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 f8fd 	bl	800ae00 <USBD_Get_USB_Status>
 800ac06:	4603      	mov	r3, r0
 800ac08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac2e:	78fa      	ldrb	r2, [r7, #3]
 800ac30:	4611      	mov	r1, r2
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7f9 ffd1 	bl	8004bda <HAL_PCD_EP_SetStall>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 f8de 	bl	800ae00 <USBD_Get_USB_Status>
 800ac44:	4603      	mov	r3, r0
 800ac46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b084      	sub	sp, #16
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac62:	2300      	movs	r3, #0
 800ac64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac6c:	78fa      	ldrb	r2, [r7, #3]
 800ac6e:	4611      	mov	r1, r2
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7fa f815 	bl	8004ca0 <HAL_PCD_EP_ClrStall>
 800ac76:	4603      	mov	r3, r0
 800ac78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac7a:	7bfb      	ldrb	r3, [r7, #15]
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f000 f8bf 	bl	800ae00 <USBD_Get_USB_Status>
 800ac82:	4603      	mov	r3, r0
 800ac84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aca2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	da0b      	bge.n	800acc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800acac:	78fb      	ldrb	r3, [r7, #3]
 800acae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acb2:	68f9      	ldr	r1, [r7, #12]
 800acb4:	4613      	mov	r3, r2
 800acb6:	00db      	lsls	r3, r3, #3
 800acb8:	4413      	add	r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	440b      	add	r3, r1
 800acbe:	3316      	adds	r3, #22
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	e00b      	b.n	800acdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800acc4:	78fb      	ldrb	r3, [r7, #3]
 800acc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acca:	68f9      	ldr	r1, [r7, #12]
 800accc:	4613      	mov	r3, r2
 800acce:	00db      	lsls	r3, r3, #3
 800acd0:	4413      	add	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	440b      	add	r3, r1
 800acd6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800acda:	781b      	ldrb	r3, [r3, #0]
  }
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3714      	adds	r7, #20
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf4:	2300      	movs	r3, #0
 800acf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acf8:	2300      	movs	r3, #0
 800acfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad02:	78fa      	ldrb	r2, [r7, #3]
 800ad04:	4611      	mov	r1, r2
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7f9 fe02 	bl	8004910 <HAL_PCD_SetAddress>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 f874 	bl	800ae00 <USBD_Get_USB_Status>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b086      	sub	sp, #24
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	60f8      	str	r0, [r7, #12]
 800ad2e:	607a      	str	r2, [r7, #4]
 800ad30:	603b      	str	r3, [r7, #0]
 800ad32:	460b      	mov	r3, r1
 800ad34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad36:	2300      	movs	r3, #0
 800ad38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ad44:	7af9      	ldrb	r1, [r7, #11]
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	f7f9 ff0c 	bl	8004b66 <HAL_PCD_EP_Transmit>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad52:	7dfb      	ldrb	r3, [r7, #23]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 f853 	bl	800ae00 <USBD_Get_USB_Status>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad5e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3718      	adds	r7, #24
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b086      	sub	sp, #24
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	607a      	str	r2, [r7, #4]
 800ad72:	603b      	str	r3, [r7, #0]
 800ad74:	460b      	mov	r3, r1
 800ad76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ad86:	7af9      	ldrb	r1, [r7, #11]
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	f7f9 fe98 	bl	8004ac0 <HAL_PCD_EP_Receive>
 800ad90:	4603      	mov	r3, r0
 800ad92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad94:	7dfb      	ldrb	r3, [r7, #23]
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 f832 	bl	800ae00 <USBD_Get_USB_Status>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ada0:	7dbb      	ldrb	r3, [r7, #22]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3718      	adds	r7, #24
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b082      	sub	sp, #8
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	460b      	mov	r3, r1
 800adb4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800adbc:	78fa      	ldrb	r2, [r7, #3]
 800adbe:	4611      	mov	r1, r2
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7f9 feb8 	bl	8004b36 <HAL_PCD_EP_GetRxCount>
 800adc6:	4603      	mov	r3, r0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800add8:	4b03      	ldr	r3, [pc, #12]	@ (800ade8 <USBD_static_malloc+0x18>)
}
 800adda:	4618      	mov	r0, r3
 800addc:	370c      	adds	r7, #12
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	20001e98 	.word	0x20001e98

0800adec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]

}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	4603      	mov	r3, r0
 800ae08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae0e:	79fb      	ldrb	r3, [r7, #7]
 800ae10:	2b03      	cmp	r3, #3
 800ae12:	d817      	bhi.n	800ae44 <USBD_Get_USB_Status+0x44>
 800ae14:	a201      	add	r2, pc, #4	@ (adr r2, 800ae1c <USBD_Get_USB_Status+0x1c>)
 800ae16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae1a:	bf00      	nop
 800ae1c:	0800ae2d 	.word	0x0800ae2d
 800ae20:	0800ae33 	.word	0x0800ae33
 800ae24:	0800ae39 	.word	0x0800ae39
 800ae28:	0800ae3f 	.word	0x0800ae3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae30:	e00b      	b.n	800ae4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae32:	2303      	movs	r3, #3
 800ae34:	73fb      	strb	r3, [r7, #15]
    break;
 800ae36:	e008      	b.n	800ae4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae3c:	e005      	b.n	800ae4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	73fb      	strb	r3, [r7, #15]
    break;
 800ae42:	e002      	b.n	800ae4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae44:	2303      	movs	r3, #3
 800ae46:	73fb      	strb	r3, [r7, #15]
    break;
 800ae48:	bf00      	nop
  }
  return usb_status;
 800ae4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3714      	adds	r7, #20
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <siprintf>:
 800ae58:	b40e      	push	{r1, r2, r3}
 800ae5a:	b500      	push	{lr}
 800ae5c:	b09c      	sub	sp, #112	@ 0x70
 800ae5e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ae60:	9002      	str	r0, [sp, #8]
 800ae62:	9006      	str	r0, [sp, #24]
 800ae64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ae68:	4809      	ldr	r0, [pc, #36]	@ (800ae90 <siprintf+0x38>)
 800ae6a:	9107      	str	r1, [sp, #28]
 800ae6c:	9104      	str	r1, [sp, #16]
 800ae6e:	4909      	ldr	r1, [pc, #36]	@ (800ae94 <siprintf+0x3c>)
 800ae70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae74:	9105      	str	r1, [sp, #20]
 800ae76:	6800      	ldr	r0, [r0, #0]
 800ae78:	9301      	str	r3, [sp, #4]
 800ae7a:	a902      	add	r1, sp, #8
 800ae7c:	f000 f994 	bl	800b1a8 <_svfiprintf_r>
 800ae80:	9b02      	ldr	r3, [sp, #8]
 800ae82:	2200      	movs	r2, #0
 800ae84:	701a      	strb	r2, [r3, #0]
 800ae86:	b01c      	add	sp, #112	@ 0x70
 800ae88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae8c:	b003      	add	sp, #12
 800ae8e:	4770      	bx	lr
 800ae90:	20000188 	.word	0x20000188
 800ae94:	ffff0208 	.word	0xffff0208

0800ae98 <memset>:
 800ae98:	4402      	add	r2, r0
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d100      	bne.n	800aea2 <memset+0xa>
 800aea0:	4770      	bx	lr
 800aea2:	f803 1b01 	strb.w	r1, [r3], #1
 800aea6:	e7f9      	b.n	800ae9c <memset+0x4>

0800aea8 <__errno>:
 800aea8:	4b01      	ldr	r3, [pc, #4]	@ (800aeb0 <__errno+0x8>)
 800aeaa:	6818      	ldr	r0, [r3, #0]
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	20000188 	.word	0x20000188

0800aeb4 <__libc_init_array>:
 800aeb4:	b570      	push	{r4, r5, r6, lr}
 800aeb6:	4d0d      	ldr	r5, [pc, #52]	@ (800aeec <__libc_init_array+0x38>)
 800aeb8:	4c0d      	ldr	r4, [pc, #52]	@ (800aef0 <__libc_init_array+0x3c>)
 800aeba:	1b64      	subs	r4, r4, r5
 800aebc:	10a4      	asrs	r4, r4, #2
 800aebe:	2600      	movs	r6, #0
 800aec0:	42a6      	cmp	r6, r4
 800aec2:	d109      	bne.n	800aed8 <__libc_init_array+0x24>
 800aec4:	4d0b      	ldr	r5, [pc, #44]	@ (800aef4 <__libc_init_array+0x40>)
 800aec6:	4c0c      	ldr	r4, [pc, #48]	@ (800aef8 <__libc_init_array+0x44>)
 800aec8:	f000 fc66 	bl	800b798 <_init>
 800aecc:	1b64      	subs	r4, r4, r5
 800aece:	10a4      	asrs	r4, r4, #2
 800aed0:	2600      	movs	r6, #0
 800aed2:	42a6      	cmp	r6, r4
 800aed4:	d105      	bne.n	800aee2 <__libc_init_array+0x2e>
 800aed6:	bd70      	pop	{r4, r5, r6, pc}
 800aed8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aedc:	4798      	blx	r3
 800aede:	3601      	adds	r6, #1
 800aee0:	e7ee      	b.n	800aec0 <__libc_init_array+0xc>
 800aee2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aee6:	4798      	blx	r3
 800aee8:	3601      	adds	r6, #1
 800aeea:	e7f2      	b.n	800aed2 <__libc_init_array+0x1e>
 800aeec:	0800d33c 	.word	0x0800d33c
 800aef0:	0800d33c 	.word	0x0800d33c
 800aef4:	0800d33c 	.word	0x0800d33c
 800aef8:	0800d340 	.word	0x0800d340

0800aefc <__retarget_lock_acquire_recursive>:
 800aefc:	4770      	bx	lr

0800aefe <__retarget_lock_release_recursive>:
 800aefe:	4770      	bx	lr

0800af00 <_free_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	4605      	mov	r5, r0
 800af04:	2900      	cmp	r1, #0
 800af06:	d041      	beq.n	800af8c <_free_r+0x8c>
 800af08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af0c:	1f0c      	subs	r4, r1, #4
 800af0e:	2b00      	cmp	r3, #0
 800af10:	bfb8      	it	lt
 800af12:	18e4      	addlt	r4, r4, r3
 800af14:	f000 f8e0 	bl	800b0d8 <__malloc_lock>
 800af18:	4a1d      	ldr	r2, [pc, #116]	@ (800af90 <_free_r+0x90>)
 800af1a:	6813      	ldr	r3, [r2, #0]
 800af1c:	b933      	cbnz	r3, 800af2c <_free_r+0x2c>
 800af1e:	6063      	str	r3, [r4, #4]
 800af20:	6014      	str	r4, [r2, #0]
 800af22:	4628      	mov	r0, r5
 800af24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af28:	f000 b8dc 	b.w	800b0e4 <__malloc_unlock>
 800af2c:	42a3      	cmp	r3, r4
 800af2e:	d908      	bls.n	800af42 <_free_r+0x42>
 800af30:	6820      	ldr	r0, [r4, #0]
 800af32:	1821      	adds	r1, r4, r0
 800af34:	428b      	cmp	r3, r1
 800af36:	bf01      	itttt	eq
 800af38:	6819      	ldreq	r1, [r3, #0]
 800af3a:	685b      	ldreq	r3, [r3, #4]
 800af3c:	1809      	addeq	r1, r1, r0
 800af3e:	6021      	streq	r1, [r4, #0]
 800af40:	e7ed      	b.n	800af1e <_free_r+0x1e>
 800af42:	461a      	mov	r2, r3
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	b10b      	cbz	r3, 800af4c <_free_r+0x4c>
 800af48:	42a3      	cmp	r3, r4
 800af4a:	d9fa      	bls.n	800af42 <_free_r+0x42>
 800af4c:	6811      	ldr	r1, [r2, #0]
 800af4e:	1850      	adds	r0, r2, r1
 800af50:	42a0      	cmp	r0, r4
 800af52:	d10b      	bne.n	800af6c <_free_r+0x6c>
 800af54:	6820      	ldr	r0, [r4, #0]
 800af56:	4401      	add	r1, r0
 800af58:	1850      	adds	r0, r2, r1
 800af5a:	4283      	cmp	r3, r0
 800af5c:	6011      	str	r1, [r2, #0]
 800af5e:	d1e0      	bne.n	800af22 <_free_r+0x22>
 800af60:	6818      	ldr	r0, [r3, #0]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	6053      	str	r3, [r2, #4]
 800af66:	4408      	add	r0, r1
 800af68:	6010      	str	r0, [r2, #0]
 800af6a:	e7da      	b.n	800af22 <_free_r+0x22>
 800af6c:	d902      	bls.n	800af74 <_free_r+0x74>
 800af6e:	230c      	movs	r3, #12
 800af70:	602b      	str	r3, [r5, #0]
 800af72:	e7d6      	b.n	800af22 <_free_r+0x22>
 800af74:	6820      	ldr	r0, [r4, #0]
 800af76:	1821      	adds	r1, r4, r0
 800af78:	428b      	cmp	r3, r1
 800af7a:	bf04      	itt	eq
 800af7c:	6819      	ldreq	r1, [r3, #0]
 800af7e:	685b      	ldreq	r3, [r3, #4]
 800af80:	6063      	str	r3, [r4, #4]
 800af82:	bf04      	itt	eq
 800af84:	1809      	addeq	r1, r1, r0
 800af86:	6021      	streq	r1, [r4, #0]
 800af88:	6054      	str	r4, [r2, #4]
 800af8a:	e7ca      	b.n	800af22 <_free_r+0x22>
 800af8c:	bd38      	pop	{r3, r4, r5, pc}
 800af8e:	bf00      	nop
 800af90:	200021fc 	.word	0x200021fc

0800af94 <sbrk_aligned>:
 800af94:	b570      	push	{r4, r5, r6, lr}
 800af96:	4e0f      	ldr	r6, [pc, #60]	@ (800afd4 <sbrk_aligned+0x40>)
 800af98:	460c      	mov	r4, r1
 800af9a:	6831      	ldr	r1, [r6, #0]
 800af9c:	4605      	mov	r5, r0
 800af9e:	b911      	cbnz	r1, 800afa6 <sbrk_aligned+0x12>
 800afa0:	f000 fba6 	bl	800b6f0 <_sbrk_r>
 800afa4:	6030      	str	r0, [r6, #0]
 800afa6:	4621      	mov	r1, r4
 800afa8:	4628      	mov	r0, r5
 800afaa:	f000 fba1 	bl	800b6f0 <_sbrk_r>
 800afae:	1c43      	adds	r3, r0, #1
 800afb0:	d103      	bne.n	800afba <sbrk_aligned+0x26>
 800afb2:	f04f 34ff 	mov.w	r4, #4294967295
 800afb6:	4620      	mov	r0, r4
 800afb8:	bd70      	pop	{r4, r5, r6, pc}
 800afba:	1cc4      	adds	r4, r0, #3
 800afbc:	f024 0403 	bic.w	r4, r4, #3
 800afc0:	42a0      	cmp	r0, r4
 800afc2:	d0f8      	beq.n	800afb6 <sbrk_aligned+0x22>
 800afc4:	1a21      	subs	r1, r4, r0
 800afc6:	4628      	mov	r0, r5
 800afc8:	f000 fb92 	bl	800b6f0 <_sbrk_r>
 800afcc:	3001      	adds	r0, #1
 800afce:	d1f2      	bne.n	800afb6 <sbrk_aligned+0x22>
 800afd0:	e7ef      	b.n	800afb2 <sbrk_aligned+0x1e>
 800afd2:	bf00      	nop
 800afd4:	200021f8 	.word	0x200021f8

0800afd8 <_malloc_r>:
 800afd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afdc:	1ccd      	adds	r5, r1, #3
 800afde:	f025 0503 	bic.w	r5, r5, #3
 800afe2:	3508      	adds	r5, #8
 800afe4:	2d0c      	cmp	r5, #12
 800afe6:	bf38      	it	cc
 800afe8:	250c      	movcc	r5, #12
 800afea:	2d00      	cmp	r5, #0
 800afec:	4606      	mov	r6, r0
 800afee:	db01      	blt.n	800aff4 <_malloc_r+0x1c>
 800aff0:	42a9      	cmp	r1, r5
 800aff2:	d904      	bls.n	800affe <_malloc_r+0x26>
 800aff4:	230c      	movs	r3, #12
 800aff6:	6033      	str	r3, [r6, #0]
 800aff8:	2000      	movs	r0, #0
 800affa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800affe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b0d4 <_malloc_r+0xfc>
 800b002:	f000 f869 	bl	800b0d8 <__malloc_lock>
 800b006:	f8d8 3000 	ldr.w	r3, [r8]
 800b00a:	461c      	mov	r4, r3
 800b00c:	bb44      	cbnz	r4, 800b060 <_malloc_r+0x88>
 800b00e:	4629      	mov	r1, r5
 800b010:	4630      	mov	r0, r6
 800b012:	f7ff ffbf 	bl	800af94 <sbrk_aligned>
 800b016:	1c43      	adds	r3, r0, #1
 800b018:	4604      	mov	r4, r0
 800b01a:	d158      	bne.n	800b0ce <_malloc_r+0xf6>
 800b01c:	f8d8 4000 	ldr.w	r4, [r8]
 800b020:	4627      	mov	r7, r4
 800b022:	2f00      	cmp	r7, #0
 800b024:	d143      	bne.n	800b0ae <_malloc_r+0xd6>
 800b026:	2c00      	cmp	r4, #0
 800b028:	d04b      	beq.n	800b0c2 <_malloc_r+0xea>
 800b02a:	6823      	ldr	r3, [r4, #0]
 800b02c:	4639      	mov	r1, r7
 800b02e:	4630      	mov	r0, r6
 800b030:	eb04 0903 	add.w	r9, r4, r3
 800b034:	f000 fb5c 	bl	800b6f0 <_sbrk_r>
 800b038:	4581      	cmp	r9, r0
 800b03a:	d142      	bne.n	800b0c2 <_malloc_r+0xea>
 800b03c:	6821      	ldr	r1, [r4, #0]
 800b03e:	1a6d      	subs	r5, r5, r1
 800b040:	4629      	mov	r1, r5
 800b042:	4630      	mov	r0, r6
 800b044:	f7ff ffa6 	bl	800af94 <sbrk_aligned>
 800b048:	3001      	adds	r0, #1
 800b04a:	d03a      	beq.n	800b0c2 <_malloc_r+0xea>
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	442b      	add	r3, r5
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	f8d8 3000 	ldr.w	r3, [r8]
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	bb62      	cbnz	r2, 800b0b4 <_malloc_r+0xdc>
 800b05a:	f8c8 7000 	str.w	r7, [r8]
 800b05e:	e00f      	b.n	800b080 <_malloc_r+0xa8>
 800b060:	6822      	ldr	r2, [r4, #0]
 800b062:	1b52      	subs	r2, r2, r5
 800b064:	d420      	bmi.n	800b0a8 <_malloc_r+0xd0>
 800b066:	2a0b      	cmp	r2, #11
 800b068:	d917      	bls.n	800b09a <_malloc_r+0xc2>
 800b06a:	1961      	adds	r1, r4, r5
 800b06c:	42a3      	cmp	r3, r4
 800b06e:	6025      	str	r5, [r4, #0]
 800b070:	bf18      	it	ne
 800b072:	6059      	strne	r1, [r3, #4]
 800b074:	6863      	ldr	r3, [r4, #4]
 800b076:	bf08      	it	eq
 800b078:	f8c8 1000 	streq.w	r1, [r8]
 800b07c:	5162      	str	r2, [r4, r5]
 800b07e:	604b      	str	r3, [r1, #4]
 800b080:	4630      	mov	r0, r6
 800b082:	f000 f82f 	bl	800b0e4 <__malloc_unlock>
 800b086:	f104 000b 	add.w	r0, r4, #11
 800b08a:	1d23      	adds	r3, r4, #4
 800b08c:	f020 0007 	bic.w	r0, r0, #7
 800b090:	1ac2      	subs	r2, r0, r3
 800b092:	bf1c      	itt	ne
 800b094:	1a1b      	subne	r3, r3, r0
 800b096:	50a3      	strne	r3, [r4, r2]
 800b098:	e7af      	b.n	800affa <_malloc_r+0x22>
 800b09a:	6862      	ldr	r2, [r4, #4]
 800b09c:	42a3      	cmp	r3, r4
 800b09e:	bf0c      	ite	eq
 800b0a0:	f8c8 2000 	streq.w	r2, [r8]
 800b0a4:	605a      	strne	r2, [r3, #4]
 800b0a6:	e7eb      	b.n	800b080 <_malloc_r+0xa8>
 800b0a8:	4623      	mov	r3, r4
 800b0aa:	6864      	ldr	r4, [r4, #4]
 800b0ac:	e7ae      	b.n	800b00c <_malloc_r+0x34>
 800b0ae:	463c      	mov	r4, r7
 800b0b0:	687f      	ldr	r7, [r7, #4]
 800b0b2:	e7b6      	b.n	800b022 <_malloc_r+0x4a>
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	42a3      	cmp	r3, r4
 800b0ba:	d1fb      	bne.n	800b0b4 <_malloc_r+0xdc>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	6053      	str	r3, [r2, #4]
 800b0c0:	e7de      	b.n	800b080 <_malloc_r+0xa8>
 800b0c2:	230c      	movs	r3, #12
 800b0c4:	6033      	str	r3, [r6, #0]
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f000 f80c 	bl	800b0e4 <__malloc_unlock>
 800b0cc:	e794      	b.n	800aff8 <_malloc_r+0x20>
 800b0ce:	6005      	str	r5, [r0, #0]
 800b0d0:	e7d6      	b.n	800b080 <_malloc_r+0xa8>
 800b0d2:	bf00      	nop
 800b0d4:	200021fc 	.word	0x200021fc

0800b0d8 <__malloc_lock>:
 800b0d8:	4801      	ldr	r0, [pc, #4]	@ (800b0e0 <__malloc_lock+0x8>)
 800b0da:	f7ff bf0f 	b.w	800aefc <__retarget_lock_acquire_recursive>
 800b0de:	bf00      	nop
 800b0e0:	200021f4 	.word	0x200021f4

0800b0e4 <__malloc_unlock>:
 800b0e4:	4801      	ldr	r0, [pc, #4]	@ (800b0ec <__malloc_unlock+0x8>)
 800b0e6:	f7ff bf0a 	b.w	800aefe <__retarget_lock_release_recursive>
 800b0ea:	bf00      	nop
 800b0ec:	200021f4 	.word	0x200021f4

0800b0f0 <__ssputs_r>:
 800b0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f4:	688e      	ldr	r6, [r1, #8]
 800b0f6:	461f      	mov	r7, r3
 800b0f8:	42be      	cmp	r6, r7
 800b0fa:	680b      	ldr	r3, [r1, #0]
 800b0fc:	4682      	mov	sl, r0
 800b0fe:	460c      	mov	r4, r1
 800b100:	4690      	mov	r8, r2
 800b102:	d82d      	bhi.n	800b160 <__ssputs_r+0x70>
 800b104:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b108:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b10c:	d026      	beq.n	800b15c <__ssputs_r+0x6c>
 800b10e:	6965      	ldr	r5, [r4, #20]
 800b110:	6909      	ldr	r1, [r1, #16]
 800b112:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b116:	eba3 0901 	sub.w	r9, r3, r1
 800b11a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b11e:	1c7b      	adds	r3, r7, #1
 800b120:	444b      	add	r3, r9
 800b122:	106d      	asrs	r5, r5, #1
 800b124:	429d      	cmp	r5, r3
 800b126:	bf38      	it	cc
 800b128:	461d      	movcc	r5, r3
 800b12a:	0553      	lsls	r3, r2, #21
 800b12c:	d527      	bpl.n	800b17e <__ssputs_r+0x8e>
 800b12e:	4629      	mov	r1, r5
 800b130:	f7ff ff52 	bl	800afd8 <_malloc_r>
 800b134:	4606      	mov	r6, r0
 800b136:	b360      	cbz	r0, 800b192 <__ssputs_r+0xa2>
 800b138:	6921      	ldr	r1, [r4, #16]
 800b13a:	464a      	mov	r2, r9
 800b13c:	f000 fae8 	bl	800b710 <memcpy>
 800b140:	89a3      	ldrh	r3, [r4, #12]
 800b142:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b14a:	81a3      	strh	r3, [r4, #12]
 800b14c:	6126      	str	r6, [r4, #16]
 800b14e:	6165      	str	r5, [r4, #20]
 800b150:	444e      	add	r6, r9
 800b152:	eba5 0509 	sub.w	r5, r5, r9
 800b156:	6026      	str	r6, [r4, #0]
 800b158:	60a5      	str	r5, [r4, #8]
 800b15a:	463e      	mov	r6, r7
 800b15c:	42be      	cmp	r6, r7
 800b15e:	d900      	bls.n	800b162 <__ssputs_r+0x72>
 800b160:	463e      	mov	r6, r7
 800b162:	6820      	ldr	r0, [r4, #0]
 800b164:	4632      	mov	r2, r6
 800b166:	4641      	mov	r1, r8
 800b168:	f000 faa8 	bl	800b6bc <memmove>
 800b16c:	68a3      	ldr	r3, [r4, #8]
 800b16e:	1b9b      	subs	r3, r3, r6
 800b170:	60a3      	str	r3, [r4, #8]
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	4433      	add	r3, r6
 800b176:	6023      	str	r3, [r4, #0]
 800b178:	2000      	movs	r0, #0
 800b17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b17e:	462a      	mov	r2, r5
 800b180:	f000 fad4 	bl	800b72c <_realloc_r>
 800b184:	4606      	mov	r6, r0
 800b186:	2800      	cmp	r0, #0
 800b188:	d1e0      	bne.n	800b14c <__ssputs_r+0x5c>
 800b18a:	6921      	ldr	r1, [r4, #16]
 800b18c:	4650      	mov	r0, sl
 800b18e:	f7ff feb7 	bl	800af00 <_free_r>
 800b192:	230c      	movs	r3, #12
 800b194:	f8ca 3000 	str.w	r3, [sl]
 800b198:	89a3      	ldrh	r3, [r4, #12]
 800b19a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b19e:	81a3      	strh	r3, [r4, #12]
 800b1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a4:	e7e9      	b.n	800b17a <__ssputs_r+0x8a>
	...

0800b1a8 <_svfiprintf_r>:
 800b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ac:	4698      	mov	r8, r3
 800b1ae:	898b      	ldrh	r3, [r1, #12]
 800b1b0:	061b      	lsls	r3, r3, #24
 800b1b2:	b09d      	sub	sp, #116	@ 0x74
 800b1b4:	4607      	mov	r7, r0
 800b1b6:	460d      	mov	r5, r1
 800b1b8:	4614      	mov	r4, r2
 800b1ba:	d510      	bpl.n	800b1de <_svfiprintf_r+0x36>
 800b1bc:	690b      	ldr	r3, [r1, #16]
 800b1be:	b973      	cbnz	r3, 800b1de <_svfiprintf_r+0x36>
 800b1c0:	2140      	movs	r1, #64	@ 0x40
 800b1c2:	f7ff ff09 	bl	800afd8 <_malloc_r>
 800b1c6:	6028      	str	r0, [r5, #0]
 800b1c8:	6128      	str	r0, [r5, #16]
 800b1ca:	b930      	cbnz	r0, 800b1da <_svfiprintf_r+0x32>
 800b1cc:	230c      	movs	r3, #12
 800b1ce:	603b      	str	r3, [r7, #0]
 800b1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d4:	b01d      	add	sp, #116	@ 0x74
 800b1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1da:	2340      	movs	r3, #64	@ 0x40
 800b1dc:	616b      	str	r3, [r5, #20]
 800b1de:	2300      	movs	r3, #0
 800b1e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1e2:	2320      	movs	r3, #32
 800b1e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ec:	2330      	movs	r3, #48	@ 0x30
 800b1ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b38c <_svfiprintf_r+0x1e4>
 800b1f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1f6:	f04f 0901 	mov.w	r9, #1
 800b1fa:	4623      	mov	r3, r4
 800b1fc:	469a      	mov	sl, r3
 800b1fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b202:	b10a      	cbz	r2, 800b208 <_svfiprintf_r+0x60>
 800b204:	2a25      	cmp	r2, #37	@ 0x25
 800b206:	d1f9      	bne.n	800b1fc <_svfiprintf_r+0x54>
 800b208:	ebba 0b04 	subs.w	fp, sl, r4
 800b20c:	d00b      	beq.n	800b226 <_svfiprintf_r+0x7e>
 800b20e:	465b      	mov	r3, fp
 800b210:	4622      	mov	r2, r4
 800b212:	4629      	mov	r1, r5
 800b214:	4638      	mov	r0, r7
 800b216:	f7ff ff6b 	bl	800b0f0 <__ssputs_r>
 800b21a:	3001      	adds	r0, #1
 800b21c:	f000 80a7 	beq.w	800b36e <_svfiprintf_r+0x1c6>
 800b220:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b222:	445a      	add	r2, fp
 800b224:	9209      	str	r2, [sp, #36]	@ 0x24
 800b226:	f89a 3000 	ldrb.w	r3, [sl]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f000 809f 	beq.w	800b36e <_svfiprintf_r+0x1c6>
 800b230:	2300      	movs	r3, #0
 800b232:	f04f 32ff 	mov.w	r2, #4294967295
 800b236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b23a:	f10a 0a01 	add.w	sl, sl, #1
 800b23e:	9304      	str	r3, [sp, #16]
 800b240:	9307      	str	r3, [sp, #28]
 800b242:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b246:	931a      	str	r3, [sp, #104]	@ 0x68
 800b248:	4654      	mov	r4, sl
 800b24a:	2205      	movs	r2, #5
 800b24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b250:	484e      	ldr	r0, [pc, #312]	@ (800b38c <_svfiprintf_r+0x1e4>)
 800b252:	f7f4 ffcd 	bl	80001f0 <memchr>
 800b256:	9a04      	ldr	r2, [sp, #16]
 800b258:	b9d8      	cbnz	r0, 800b292 <_svfiprintf_r+0xea>
 800b25a:	06d0      	lsls	r0, r2, #27
 800b25c:	bf44      	itt	mi
 800b25e:	2320      	movmi	r3, #32
 800b260:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b264:	0711      	lsls	r1, r2, #28
 800b266:	bf44      	itt	mi
 800b268:	232b      	movmi	r3, #43	@ 0x2b
 800b26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b26e:	f89a 3000 	ldrb.w	r3, [sl]
 800b272:	2b2a      	cmp	r3, #42	@ 0x2a
 800b274:	d015      	beq.n	800b2a2 <_svfiprintf_r+0xfa>
 800b276:	9a07      	ldr	r2, [sp, #28]
 800b278:	4654      	mov	r4, sl
 800b27a:	2000      	movs	r0, #0
 800b27c:	f04f 0c0a 	mov.w	ip, #10
 800b280:	4621      	mov	r1, r4
 800b282:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b286:	3b30      	subs	r3, #48	@ 0x30
 800b288:	2b09      	cmp	r3, #9
 800b28a:	d94b      	bls.n	800b324 <_svfiprintf_r+0x17c>
 800b28c:	b1b0      	cbz	r0, 800b2bc <_svfiprintf_r+0x114>
 800b28e:	9207      	str	r2, [sp, #28]
 800b290:	e014      	b.n	800b2bc <_svfiprintf_r+0x114>
 800b292:	eba0 0308 	sub.w	r3, r0, r8
 800b296:	fa09 f303 	lsl.w	r3, r9, r3
 800b29a:	4313      	orrs	r3, r2
 800b29c:	9304      	str	r3, [sp, #16]
 800b29e:	46a2      	mov	sl, r4
 800b2a0:	e7d2      	b.n	800b248 <_svfiprintf_r+0xa0>
 800b2a2:	9b03      	ldr	r3, [sp, #12]
 800b2a4:	1d19      	adds	r1, r3, #4
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	9103      	str	r1, [sp, #12]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	bfbb      	ittet	lt
 800b2ae:	425b      	neglt	r3, r3
 800b2b0:	f042 0202 	orrlt.w	r2, r2, #2
 800b2b4:	9307      	strge	r3, [sp, #28]
 800b2b6:	9307      	strlt	r3, [sp, #28]
 800b2b8:	bfb8      	it	lt
 800b2ba:	9204      	strlt	r2, [sp, #16]
 800b2bc:	7823      	ldrb	r3, [r4, #0]
 800b2be:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2c0:	d10a      	bne.n	800b2d8 <_svfiprintf_r+0x130>
 800b2c2:	7863      	ldrb	r3, [r4, #1]
 800b2c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2c6:	d132      	bne.n	800b32e <_svfiprintf_r+0x186>
 800b2c8:	9b03      	ldr	r3, [sp, #12]
 800b2ca:	1d1a      	adds	r2, r3, #4
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	9203      	str	r2, [sp, #12]
 800b2d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2d4:	3402      	adds	r4, #2
 800b2d6:	9305      	str	r3, [sp, #20]
 800b2d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b39c <_svfiprintf_r+0x1f4>
 800b2dc:	7821      	ldrb	r1, [r4, #0]
 800b2de:	2203      	movs	r2, #3
 800b2e0:	4650      	mov	r0, sl
 800b2e2:	f7f4 ff85 	bl	80001f0 <memchr>
 800b2e6:	b138      	cbz	r0, 800b2f8 <_svfiprintf_r+0x150>
 800b2e8:	9b04      	ldr	r3, [sp, #16]
 800b2ea:	eba0 000a 	sub.w	r0, r0, sl
 800b2ee:	2240      	movs	r2, #64	@ 0x40
 800b2f0:	4082      	lsls	r2, r0
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	3401      	adds	r4, #1
 800b2f6:	9304      	str	r3, [sp, #16]
 800b2f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2fc:	4824      	ldr	r0, [pc, #144]	@ (800b390 <_svfiprintf_r+0x1e8>)
 800b2fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b302:	2206      	movs	r2, #6
 800b304:	f7f4 ff74 	bl	80001f0 <memchr>
 800b308:	2800      	cmp	r0, #0
 800b30a:	d036      	beq.n	800b37a <_svfiprintf_r+0x1d2>
 800b30c:	4b21      	ldr	r3, [pc, #132]	@ (800b394 <_svfiprintf_r+0x1ec>)
 800b30e:	bb1b      	cbnz	r3, 800b358 <_svfiprintf_r+0x1b0>
 800b310:	9b03      	ldr	r3, [sp, #12]
 800b312:	3307      	adds	r3, #7
 800b314:	f023 0307 	bic.w	r3, r3, #7
 800b318:	3308      	adds	r3, #8
 800b31a:	9303      	str	r3, [sp, #12]
 800b31c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b31e:	4433      	add	r3, r6
 800b320:	9309      	str	r3, [sp, #36]	@ 0x24
 800b322:	e76a      	b.n	800b1fa <_svfiprintf_r+0x52>
 800b324:	fb0c 3202 	mla	r2, ip, r2, r3
 800b328:	460c      	mov	r4, r1
 800b32a:	2001      	movs	r0, #1
 800b32c:	e7a8      	b.n	800b280 <_svfiprintf_r+0xd8>
 800b32e:	2300      	movs	r3, #0
 800b330:	3401      	adds	r4, #1
 800b332:	9305      	str	r3, [sp, #20]
 800b334:	4619      	mov	r1, r3
 800b336:	f04f 0c0a 	mov.w	ip, #10
 800b33a:	4620      	mov	r0, r4
 800b33c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b340:	3a30      	subs	r2, #48	@ 0x30
 800b342:	2a09      	cmp	r2, #9
 800b344:	d903      	bls.n	800b34e <_svfiprintf_r+0x1a6>
 800b346:	2b00      	cmp	r3, #0
 800b348:	d0c6      	beq.n	800b2d8 <_svfiprintf_r+0x130>
 800b34a:	9105      	str	r1, [sp, #20]
 800b34c:	e7c4      	b.n	800b2d8 <_svfiprintf_r+0x130>
 800b34e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b352:	4604      	mov	r4, r0
 800b354:	2301      	movs	r3, #1
 800b356:	e7f0      	b.n	800b33a <_svfiprintf_r+0x192>
 800b358:	ab03      	add	r3, sp, #12
 800b35a:	9300      	str	r3, [sp, #0]
 800b35c:	462a      	mov	r2, r5
 800b35e:	4b0e      	ldr	r3, [pc, #56]	@ (800b398 <_svfiprintf_r+0x1f0>)
 800b360:	a904      	add	r1, sp, #16
 800b362:	4638      	mov	r0, r7
 800b364:	f3af 8000 	nop.w
 800b368:	1c42      	adds	r2, r0, #1
 800b36a:	4606      	mov	r6, r0
 800b36c:	d1d6      	bne.n	800b31c <_svfiprintf_r+0x174>
 800b36e:	89ab      	ldrh	r3, [r5, #12]
 800b370:	065b      	lsls	r3, r3, #25
 800b372:	f53f af2d 	bmi.w	800b1d0 <_svfiprintf_r+0x28>
 800b376:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b378:	e72c      	b.n	800b1d4 <_svfiprintf_r+0x2c>
 800b37a:	ab03      	add	r3, sp, #12
 800b37c:	9300      	str	r3, [sp, #0]
 800b37e:	462a      	mov	r2, r5
 800b380:	4b05      	ldr	r3, [pc, #20]	@ (800b398 <_svfiprintf_r+0x1f0>)
 800b382:	a904      	add	r1, sp, #16
 800b384:	4638      	mov	r0, r7
 800b386:	f000 f879 	bl	800b47c <_printf_i>
 800b38a:	e7ed      	b.n	800b368 <_svfiprintf_r+0x1c0>
 800b38c:	0800d300 	.word	0x0800d300
 800b390:	0800d30a 	.word	0x0800d30a
 800b394:	00000000 	.word	0x00000000
 800b398:	0800b0f1 	.word	0x0800b0f1
 800b39c:	0800d306 	.word	0x0800d306

0800b3a0 <_printf_common>:
 800b3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a4:	4616      	mov	r6, r2
 800b3a6:	4698      	mov	r8, r3
 800b3a8:	688a      	ldr	r2, [r1, #8]
 800b3aa:	690b      	ldr	r3, [r1, #16]
 800b3ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	bfb8      	it	lt
 800b3b4:	4613      	movlt	r3, r2
 800b3b6:	6033      	str	r3, [r6, #0]
 800b3b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b3bc:	4607      	mov	r7, r0
 800b3be:	460c      	mov	r4, r1
 800b3c0:	b10a      	cbz	r2, 800b3c6 <_printf_common+0x26>
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	6033      	str	r3, [r6, #0]
 800b3c6:	6823      	ldr	r3, [r4, #0]
 800b3c8:	0699      	lsls	r1, r3, #26
 800b3ca:	bf42      	ittt	mi
 800b3cc:	6833      	ldrmi	r3, [r6, #0]
 800b3ce:	3302      	addmi	r3, #2
 800b3d0:	6033      	strmi	r3, [r6, #0]
 800b3d2:	6825      	ldr	r5, [r4, #0]
 800b3d4:	f015 0506 	ands.w	r5, r5, #6
 800b3d8:	d106      	bne.n	800b3e8 <_printf_common+0x48>
 800b3da:	f104 0a19 	add.w	sl, r4, #25
 800b3de:	68e3      	ldr	r3, [r4, #12]
 800b3e0:	6832      	ldr	r2, [r6, #0]
 800b3e2:	1a9b      	subs	r3, r3, r2
 800b3e4:	42ab      	cmp	r3, r5
 800b3e6:	dc26      	bgt.n	800b436 <_printf_common+0x96>
 800b3e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b3ec:	6822      	ldr	r2, [r4, #0]
 800b3ee:	3b00      	subs	r3, #0
 800b3f0:	bf18      	it	ne
 800b3f2:	2301      	movne	r3, #1
 800b3f4:	0692      	lsls	r2, r2, #26
 800b3f6:	d42b      	bmi.n	800b450 <_printf_common+0xb0>
 800b3f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b3fc:	4641      	mov	r1, r8
 800b3fe:	4638      	mov	r0, r7
 800b400:	47c8      	blx	r9
 800b402:	3001      	adds	r0, #1
 800b404:	d01e      	beq.n	800b444 <_printf_common+0xa4>
 800b406:	6823      	ldr	r3, [r4, #0]
 800b408:	6922      	ldr	r2, [r4, #16]
 800b40a:	f003 0306 	and.w	r3, r3, #6
 800b40e:	2b04      	cmp	r3, #4
 800b410:	bf02      	ittt	eq
 800b412:	68e5      	ldreq	r5, [r4, #12]
 800b414:	6833      	ldreq	r3, [r6, #0]
 800b416:	1aed      	subeq	r5, r5, r3
 800b418:	68a3      	ldr	r3, [r4, #8]
 800b41a:	bf0c      	ite	eq
 800b41c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b420:	2500      	movne	r5, #0
 800b422:	4293      	cmp	r3, r2
 800b424:	bfc4      	itt	gt
 800b426:	1a9b      	subgt	r3, r3, r2
 800b428:	18ed      	addgt	r5, r5, r3
 800b42a:	2600      	movs	r6, #0
 800b42c:	341a      	adds	r4, #26
 800b42e:	42b5      	cmp	r5, r6
 800b430:	d11a      	bne.n	800b468 <_printf_common+0xc8>
 800b432:	2000      	movs	r0, #0
 800b434:	e008      	b.n	800b448 <_printf_common+0xa8>
 800b436:	2301      	movs	r3, #1
 800b438:	4652      	mov	r2, sl
 800b43a:	4641      	mov	r1, r8
 800b43c:	4638      	mov	r0, r7
 800b43e:	47c8      	blx	r9
 800b440:	3001      	adds	r0, #1
 800b442:	d103      	bne.n	800b44c <_printf_common+0xac>
 800b444:	f04f 30ff 	mov.w	r0, #4294967295
 800b448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b44c:	3501      	adds	r5, #1
 800b44e:	e7c6      	b.n	800b3de <_printf_common+0x3e>
 800b450:	18e1      	adds	r1, r4, r3
 800b452:	1c5a      	adds	r2, r3, #1
 800b454:	2030      	movs	r0, #48	@ 0x30
 800b456:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b45a:	4422      	add	r2, r4
 800b45c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b460:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b464:	3302      	adds	r3, #2
 800b466:	e7c7      	b.n	800b3f8 <_printf_common+0x58>
 800b468:	2301      	movs	r3, #1
 800b46a:	4622      	mov	r2, r4
 800b46c:	4641      	mov	r1, r8
 800b46e:	4638      	mov	r0, r7
 800b470:	47c8      	blx	r9
 800b472:	3001      	adds	r0, #1
 800b474:	d0e6      	beq.n	800b444 <_printf_common+0xa4>
 800b476:	3601      	adds	r6, #1
 800b478:	e7d9      	b.n	800b42e <_printf_common+0x8e>
	...

0800b47c <_printf_i>:
 800b47c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b480:	7e0f      	ldrb	r7, [r1, #24]
 800b482:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b484:	2f78      	cmp	r7, #120	@ 0x78
 800b486:	4691      	mov	r9, r2
 800b488:	4680      	mov	r8, r0
 800b48a:	460c      	mov	r4, r1
 800b48c:	469a      	mov	sl, r3
 800b48e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b492:	d807      	bhi.n	800b4a4 <_printf_i+0x28>
 800b494:	2f62      	cmp	r7, #98	@ 0x62
 800b496:	d80a      	bhi.n	800b4ae <_printf_i+0x32>
 800b498:	2f00      	cmp	r7, #0
 800b49a:	f000 80d2 	beq.w	800b642 <_printf_i+0x1c6>
 800b49e:	2f58      	cmp	r7, #88	@ 0x58
 800b4a0:	f000 80b9 	beq.w	800b616 <_printf_i+0x19a>
 800b4a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b4ac:	e03a      	b.n	800b524 <_printf_i+0xa8>
 800b4ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b4b2:	2b15      	cmp	r3, #21
 800b4b4:	d8f6      	bhi.n	800b4a4 <_printf_i+0x28>
 800b4b6:	a101      	add	r1, pc, #4	@ (adr r1, 800b4bc <_printf_i+0x40>)
 800b4b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4bc:	0800b515 	.word	0x0800b515
 800b4c0:	0800b529 	.word	0x0800b529
 800b4c4:	0800b4a5 	.word	0x0800b4a5
 800b4c8:	0800b4a5 	.word	0x0800b4a5
 800b4cc:	0800b4a5 	.word	0x0800b4a5
 800b4d0:	0800b4a5 	.word	0x0800b4a5
 800b4d4:	0800b529 	.word	0x0800b529
 800b4d8:	0800b4a5 	.word	0x0800b4a5
 800b4dc:	0800b4a5 	.word	0x0800b4a5
 800b4e0:	0800b4a5 	.word	0x0800b4a5
 800b4e4:	0800b4a5 	.word	0x0800b4a5
 800b4e8:	0800b629 	.word	0x0800b629
 800b4ec:	0800b553 	.word	0x0800b553
 800b4f0:	0800b5e3 	.word	0x0800b5e3
 800b4f4:	0800b4a5 	.word	0x0800b4a5
 800b4f8:	0800b4a5 	.word	0x0800b4a5
 800b4fc:	0800b64b 	.word	0x0800b64b
 800b500:	0800b4a5 	.word	0x0800b4a5
 800b504:	0800b553 	.word	0x0800b553
 800b508:	0800b4a5 	.word	0x0800b4a5
 800b50c:	0800b4a5 	.word	0x0800b4a5
 800b510:	0800b5eb 	.word	0x0800b5eb
 800b514:	6833      	ldr	r3, [r6, #0]
 800b516:	1d1a      	adds	r2, r3, #4
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	6032      	str	r2, [r6, #0]
 800b51c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b520:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b524:	2301      	movs	r3, #1
 800b526:	e09d      	b.n	800b664 <_printf_i+0x1e8>
 800b528:	6833      	ldr	r3, [r6, #0]
 800b52a:	6820      	ldr	r0, [r4, #0]
 800b52c:	1d19      	adds	r1, r3, #4
 800b52e:	6031      	str	r1, [r6, #0]
 800b530:	0606      	lsls	r6, r0, #24
 800b532:	d501      	bpl.n	800b538 <_printf_i+0xbc>
 800b534:	681d      	ldr	r5, [r3, #0]
 800b536:	e003      	b.n	800b540 <_printf_i+0xc4>
 800b538:	0645      	lsls	r5, r0, #25
 800b53a:	d5fb      	bpl.n	800b534 <_printf_i+0xb8>
 800b53c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b540:	2d00      	cmp	r5, #0
 800b542:	da03      	bge.n	800b54c <_printf_i+0xd0>
 800b544:	232d      	movs	r3, #45	@ 0x2d
 800b546:	426d      	negs	r5, r5
 800b548:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b54c:	4859      	ldr	r0, [pc, #356]	@ (800b6b4 <_printf_i+0x238>)
 800b54e:	230a      	movs	r3, #10
 800b550:	e011      	b.n	800b576 <_printf_i+0xfa>
 800b552:	6821      	ldr	r1, [r4, #0]
 800b554:	6833      	ldr	r3, [r6, #0]
 800b556:	0608      	lsls	r0, r1, #24
 800b558:	f853 5b04 	ldr.w	r5, [r3], #4
 800b55c:	d402      	bmi.n	800b564 <_printf_i+0xe8>
 800b55e:	0649      	lsls	r1, r1, #25
 800b560:	bf48      	it	mi
 800b562:	b2ad      	uxthmi	r5, r5
 800b564:	2f6f      	cmp	r7, #111	@ 0x6f
 800b566:	4853      	ldr	r0, [pc, #332]	@ (800b6b4 <_printf_i+0x238>)
 800b568:	6033      	str	r3, [r6, #0]
 800b56a:	bf14      	ite	ne
 800b56c:	230a      	movne	r3, #10
 800b56e:	2308      	moveq	r3, #8
 800b570:	2100      	movs	r1, #0
 800b572:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b576:	6866      	ldr	r6, [r4, #4]
 800b578:	60a6      	str	r6, [r4, #8]
 800b57a:	2e00      	cmp	r6, #0
 800b57c:	bfa2      	ittt	ge
 800b57e:	6821      	ldrge	r1, [r4, #0]
 800b580:	f021 0104 	bicge.w	r1, r1, #4
 800b584:	6021      	strge	r1, [r4, #0]
 800b586:	b90d      	cbnz	r5, 800b58c <_printf_i+0x110>
 800b588:	2e00      	cmp	r6, #0
 800b58a:	d04b      	beq.n	800b624 <_printf_i+0x1a8>
 800b58c:	4616      	mov	r6, r2
 800b58e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b592:	fb03 5711 	mls	r7, r3, r1, r5
 800b596:	5dc7      	ldrb	r7, [r0, r7]
 800b598:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b59c:	462f      	mov	r7, r5
 800b59e:	42bb      	cmp	r3, r7
 800b5a0:	460d      	mov	r5, r1
 800b5a2:	d9f4      	bls.n	800b58e <_printf_i+0x112>
 800b5a4:	2b08      	cmp	r3, #8
 800b5a6:	d10b      	bne.n	800b5c0 <_printf_i+0x144>
 800b5a8:	6823      	ldr	r3, [r4, #0]
 800b5aa:	07df      	lsls	r7, r3, #31
 800b5ac:	d508      	bpl.n	800b5c0 <_printf_i+0x144>
 800b5ae:	6923      	ldr	r3, [r4, #16]
 800b5b0:	6861      	ldr	r1, [r4, #4]
 800b5b2:	4299      	cmp	r1, r3
 800b5b4:	bfde      	ittt	le
 800b5b6:	2330      	movle	r3, #48	@ 0x30
 800b5b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b5c0:	1b92      	subs	r2, r2, r6
 800b5c2:	6122      	str	r2, [r4, #16]
 800b5c4:	f8cd a000 	str.w	sl, [sp]
 800b5c8:	464b      	mov	r3, r9
 800b5ca:	aa03      	add	r2, sp, #12
 800b5cc:	4621      	mov	r1, r4
 800b5ce:	4640      	mov	r0, r8
 800b5d0:	f7ff fee6 	bl	800b3a0 <_printf_common>
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	d14a      	bne.n	800b66e <_printf_i+0x1f2>
 800b5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5dc:	b004      	add	sp, #16
 800b5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	f043 0320 	orr.w	r3, r3, #32
 800b5e8:	6023      	str	r3, [r4, #0]
 800b5ea:	4833      	ldr	r0, [pc, #204]	@ (800b6b8 <_printf_i+0x23c>)
 800b5ec:	2778      	movs	r7, #120	@ 0x78
 800b5ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	6831      	ldr	r1, [r6, #0]
 800b5f6:	061f      	lsls	r7, r3, #24
 800b5f8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b5fc:	d402      	bmi.n	800b604 <_printf_i+0x188>
 800b5fe:	065f      	lsls	r7, r3, #25
 800b600:	bf48      	it	mi
 800b602:	b2ad      	uxthmi	r5, r5
 800b604:	6031      	str	r1, [r6, #0]
 800b606:	07d9      	lsls	r1, r3, #31
 800b608:	bf44      	itt	mi
 800b60a:	f043 0320 	orrmi.w	r3, r3, #32
 800b60e:	6023      	strmi	r3, [r4, #0]
 800b610:	b11d      	cbz	r5, 800b61a <_printf_i+0x19e>
 800b612:	2310      	movs	r3, #16
 800b614:	e7ac      	b.n	800b570 <_printf_i+0xf4>
 800b616:	4827      	ldr	r0, [pc, #156]	@ (800b6b4 <_printf_i+0x238>)
 800b618:	e7e9      	b.n	800b5ee <_printf_i+0x172>
 800b61a:	6823      	ldr	r3, [r4, #0]
 800b61c:	f023 0320 	bic.w	r3, r3, #32
 800b620:	6023      	str	r3, [r4, #0]
 800b622:	e7f6      	b.n	800b612 <_printf_i+0x196>
 800b624:	4616      	mov	r6, r2
 800b626:	e7bd      	b.n	800b5a4 <_printf_i+0x128>
 800b628:	6833      	ldr	r3, [r6, #0]
 800b62a:	6825      	ldr	r5, [r4, #0]
 800b62c:	6961      	ldr	r1, [r4, #20]
 800b62e:	1d18      	adds	r0, r3, #4
 800b630:	6030      	str	r0, [r6, #0]
 800b632:	062e      	lsls	r6, r5, #24
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	d501      	bpl.n	800b63c <_printf_i+0x1c0>
 800b638:	6019      	str	r1, [r3, #0]
 800b63a:	e002      	b.n	800b642 <_printf_i+0x1c6>
 800b63c:	0668      	lsls	r0, r5, #25
 800b63e:	d5fb      	bpl.n	800b638 <_printf_i+0x1bc>
 800b640:	8019      	strh	r1, [r3, #0]
 800b642:	2300      	movs	r3, #0
 800b644:	6123      	str	r3, [r4, #16]
 800b646:	4616      	mov	r6, r2
 800b648:	e7bc      	b.n	800b5c4 <_printf_i+0x148>
 800b64a:	6833      	ldr	r3, [r6, #0]
 800b64c:	1d1a      	adds	r2, r3, #4
 800b64e:	6032      	str	r2, [r6, #0]
 800b650:	681e      	ldr	r6, [r3, #0]
 800b652:	6862      	ldr	r2, [r4, #4]
 800b654:	2100      	movs	r1, #0
 800b656:	4630      	mov	r0, r6
 800b658:	f7f4 fdca 	bl	80001f0 <memchr>
 800b65c:	b108      	cbz	r0, 800b662 <_printf_i+0x1e6>
 800b65e:	1b80      	subs	r0, r0, r6
 800b660:	6060      	str	r0, [r4, #4]
 800b662:	6863      	ldr	r3, [r4, #4]
 800b664:	6123      	str	r3, [r4, #16]
 800b666:	2300      	movs	r3, #0
 800b668:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b66c:	e7aa      	b.n	800b5c4 <_printf_i+0x148>
 800b66e:	6923      	ldr	r3, [r4, #16]
 800b670:	4632      	mov	r2, r6
 800b672:	4649      	mov	r1, r9
 800b674:	4640      	mov	r0, r8
 800b676:	47d0      	blx	sl
 800b678:	3001      	adds	r0, #1
 800b67a:	d0ad      	beq.n	800b5d8 <_printf_i+0x15c>
 800b67c:	6823      	ldr	r3, [r4, #0]
 800b67e:	079b      	lsls	r3, r3, #30
 800b680:	d413      	bmi.n	800b6aa <_printf_i+0x22e>
 800b682:	68e0      	ldr	r0, [r4, #12]
 800b684:	9b03      	ldr	r3, [sp, #12]
 800b686:	4298      	cmp	r0, r3
 800b688:	bfb8      	it	lt
 800b68a:	4618      	movlt	r0, r3
 800b68c:	e7a6      	b.n	800b5dc <_printf_i+0x160>
 800b68e:	2301      	movs	r3, #1
 800b690:	4632      	mov	r2, r6
 800b692:	4649      	mov	r1, r9
 800b694:	4640      	mov	r0, r8
 800b696:	47d0      	blx	sl
 800b698:	3001      	adds	r0, #1
 800b69a:	d09d      	beq.n	800b5d8 <_printf_i+0x15c>
 800b69c:	3501      	adds	r5, #1
 800b69e:	68e3      	ldr	r3, [r4, #12]
 800b6a0:	9903      	ldr	r1, [sp, #12]
 800b6a2:	1a5b      	subs	r3, r3, r1
 800b6a4:	42ab      	cmp	r3, r5
 800b6a6:	dcf2      	bgt.n	800b68e <_printf_i+0x212>
 800b6a8:	e7eb      	b.n	800b682 <_printf_i+0x206>
 800b6aa:	2500      	movs	r5, #0
 800b6ac:	f104 0619 	add.w	r6, r4, #25
 800b6b0:	e7f5      	b.n	800b69e <_printf_i+0x222>
 800b6b2:	bf00      	nop
 800b6b4:	0800d311 	.word	0x0800d311
 800b6b8:	0800d322 	.word	0x0800d322

0800b6bc <memmove>:
 800b6bc:	4288      	cmp	r0, r1
 800b6be:	b510      	push	{r4, lr}
 800b6c0:	eb01 0402 	add.w	r4, r1, r2
 800b6c4:	d902      	bls.n	800b6cc <memmove+0x10>
 800b6c6:	4284      	cmp	r4, r0
 800b6c8:	4623      	mov	r3, r4
 800b6ca:	d807      	bhi.n	800b6dc <memmove+0x20>
 800b6cc:	1e43      	subs	r3, r0, #1
 800b6ce:	42a1      	cmp	r1, r4
 800b6d0:	d008      	beq.n	800b6e4 <memmove+0x28>
 800b6d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6da:	e7f8      	b.n	800b6ce <memmove+0x12>
 800b6dc:	4402      	add	r2, r0
 800b6de:	4601      	mov	r1, r0
 800b6e0:	428a      	cmp	r2, r1
 800b6e2:	d100      	bne.n	800b6e6 <memmove+0x2a>
 800b6e4:	bd10      	pop	{r4, pc}
 800b6e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6ee:	e7f7      	b.n	800b6e0 <memmove+0x24>

0800b6f0 <_sbrk_r>:
 800b6f0:	b538      	push	{r3, r4, r5, lr}
 800b6f2:	4d06      	ldr	r5, [pc, #24]	@ (800b70c <_sbrk_r+0x1c>)
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	4608      	mov	r0, r1
 800b6fa:	602b      	str	r3, [r5, #0]
 800b6fc:	f7f5 f94e 	bl	800099c <_sbrk>
 800b700:	1c43      	adds	r3, r0, #1
 800b702:	d102      	bne.n	800b70a <_sbrk_r+0x1a>
 800b704:	682b      	ldr	r3, [r5, #0]
 800b706:	b103      	cbz	r3, 800b70a <_sbrk_r+0x1a>
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	bd38      	pop	{r3, r4, r5, pc}
 800b70c:	200021f0 	.word	0x200021f0

0800b710 <memcpy>:
 800b710:	440a      	add	r2, r1
 800b712:	4291      	cmp	r1, r2
 800b714:	f100 33ff 	add.w	r3, r0, #4294967295
 800b718:	d100      	bne.n	800b71c <memcpy+0xc>
 800b71a:	4770      	bx	lr
 800b71c:	b510      	push	{r4, lr}
 800b71e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b722:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b726:	4291      	cmp	r1, r2
 800b728:	d1f9      	bne.n	800b71e <memcpy+0xe>
 800b72a:	bd10      	pop	{r4, pc}

0800b72c <_realloc_r>:
 800b72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b730:	4680      	mov	r8, r0
 800b732:	4615      	mov	r5, r2
 800b734:	460c      	mov	r4, r1
 800b736:	b921      	cbnz	r1, 800b742 <_realloc_r+0x16>
 800b738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b73c:	4611      	mov	r1, r2
 800b73e:	f7ff bc4b 	b.w	800afd8 <_malloc_r>
 800b742:	b92a      	cbnz	r2, 800b750 <_realloc_r+0x24>
 800b744:	f7ff fbdc 	bl	800af00 <_free_r>
 800b748:	2400      	movs	r4, #0
 800b74a:	4620      	mov	r0, r4
 800b74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b750:	f000 f81a 	bl	800b788 <_malloc_usable_size_r>
 800b754:	4285      	cmp	r5, r0
 800b756:	4606      	mov	r6, r0
 800b758:	d802      	bhi.n	800b760 <_realloc_r+0x34>
 800b75a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b75e:	d8f4      	bhi.n	800b74a <_realloc_r+0x1e>
 800b760:	4629      	mov	r1, r5
 800b762:	4640      	mov	r0, r8
 800b764:	f7ff fc38 	bl	800afd8 <_malloc_r>
 800b768:	4607      	mov	r7, r0
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d0ec      	beq.n	800b748 <_realloc_r+0x1c>
 800b76e:	42b5      	cmp	r5, r6
 800b770:	462a      	mov	r2, r5
 800b772:	4621      	mov	r1, r4
 800b774:	bf28      	it	cs
 800b776:	4632      	movcs	r2, r6
 800b778:	f7ff ffca 	bl	800b710 <memcpy>
 800b77c:	4621      	mov	r1, r4
 800b77e:	4640      	mov	r0, r8
 800b780:	f7ff fbbe 	bl	800af00 <_free_r>
 800b784:	463c      	mov	r4, r7
 800b786:	e7e0      	b.n	800b74a <_realloc_r+0x1e>

0800b788 <_malloc_usable_size_r>:
 800b788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b78c:	1f18      	subs	r0, r3, #4
 800b78e:	2b00      	cmp	r3, #0
 800b790:	bfbc      	itt	lt
 800b792:	580b      	ldrlt	r3, [r1, r0]
 800b794:	18c0      	addlt	r0, r0, r3
 800b796:	4770      	bx	lr

0800b798 <_init>:
 800b798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b79a:	bf00      	nop
 800b79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b79e:	bc08      	pop	{r3}
 800b7a0:	469e      	mov	lr, r3
 800b7a2:	4770      	bx	lr

0800b7a4 <_fini>:
 800b7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a6:	bf00      	nop
 800b7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7aa:	bc08      	pop	{r3}
 800b7ac:	469e      	mov	lr, r3
 800b7ae:	4770      	bx	lr
